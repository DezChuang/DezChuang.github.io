{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/latte.jpg","path":"img/latte.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/header_img/bg.png","path":"img/header_img/bg.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"16f0295f39c85cac4cbded5821f8e1a04742b8ee","modified":1498223980000},{"_id":"source/404.md","hash":"e6b2664541d587b4cfea7ed22d7fc5d7d64d03a6","modified":1498233678000},{"_id":"source/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1498233678000},{"_id":"themes/beantech/.DS_Store","hash":"ed011c08cb234d64eb4501f439179b6f557cf790","modified":1498153771000},{"_id":"themes/beantech/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1498233678000},{"_id":"themes/beantech/_config.yml","hash":"6afd65c055d9b1c70ae67323cc869f1b4aa60348","modified":1498233678000},{"_id":"source/_posts/.DS_Store","hash":"f9d3b0a96632b15dacba5110c7bfad9e02a39a91","modified":1498310732000},{"_id":"source/_posts/20170325-2256_HelloWorld.md","hash":"340dfe5c7e6dc5a4ca933908cd997b728080197e","modified":1498283811000},{"_id":"source/_posts/20170406-2215_nodjs-blog.md","hash":"5a401987d16e8314bb37cddf37d46fdcfe129aed","modified":1498283882000},{"_id":"source/_posts/20170409-1222_aws-ec2-deploy-nodejs.md","hash":"f4972aaae20cf3933ad0fc3a5e20645f50b172c8","modified":1498284851000},{"_id":"source/_posts/20170412-1620-01-react-reference.md","hash":"c10f083e781e45e1cd29b111cd1f610aa7aa6021","modified":1498318763000},{"_id":"source/_posts/20170416-1502-huli-course-01.md","hash":"3f57ebaa35c48643c7430d5aec389e930ed5f151","modified":1498318742000},{"_id":"source/_posts/20170424-1502-huli-course-02.md","hash":"eb43f1bfc0e0fa970234e17b64467f19384d30bd","modified":1498318719000},{"_id":"source/_posts/20170427-1328-02-redux-note.md","hash":"196c12406cea58d6843b4340ba16a5743350d110","modified":1498318701000},{"_id":"source/_posts/20170502-1501-huli-course-03.md","hash":"be28c4a162c16019d71d20c954cd12523d470707","modified":1498318677000},{"_id":"source/_posts/20170509-1501-huli-course-04.md","hash":"4e411f6227c8412c141dd794a1ada556ff4e95dc","modified":1498318659000},{"_id":"source/_posts/20170517-1501-huli-course-05.md","hash":"b490d8b1516597f89d991c40bc1f43ad25a728a3","modified":1498318635000},{"_id":"source/_posts/20170518-1502-huli-course-06.md","hash":"4fa0d34acc4af20a3e3123756905e6704ecd4780","modified":1498318780000},{"_id":"source/_posts/20170525-1501-huli-course-07.md","hash":"a3a03aa2c1759effedb250d771631a77ce4a1f52","modified":1498318596000},{"_id":"source/_posts/20170604-1837-huli-course-08.md","hash":"c95c2a654cf5ff454e32a4a20fcecd0acac75f20","modified":1498318583000},{"_id":"source/_posts/20170609-1529-interview-js-event-bubble.md","hash":"87ee961dff721548b00b730a7f8ca12a9fb1bfe4","modified":1498318823000},{"_id":"source/_posts/20170611-1450-huli-course-09.md","hash":"020769600246adc63fd00bd2b963ffcd132da584","modified":1498318568000},{"_id":"source/_posts/20170611-1454-js-closure.md","hash":"b67e2ab7fccb3b247b29155ce37db8d667b54d6f","modified":1498318533000},{"_id":"source/_posts/20170612-1220-interview-json.md","hash":"d8c49a7e6608decb7cdd94e8c4ccd8a9586fc1e6","modified":1498318497000},{"_id":"source/_posts/20170617-1511-huli-course-10.md","hash":"e809d57ddfc4449c999a449d9203f1b25065a6b7","modified":1498318440000},{"_id":"source/_posts/20170617-1548-interview-coding.md","hash":"495674dfc5ac2e731912f5e25397c6ab59796aca","modified":1498318453000},{"_id":"source/_posts/20170619-0236-huli-course-feedback.md","hash":"aabb9f953b183f926d6b7b766d5364be7721fd7a","modified":1498318462000},{"_id":"source/about/index.md","hash":"b3185014dab52bd998ecd96a2e86dcca09c421b5","modified":1498233678000},{"_id":"source/archive/index.md","hash":"d5209cada82181446eb0a7ffb53a3fe6c1267713","modified":1498233678000},{"_id":"source/img/.DS_Store","hash":"68ae155e88356b8b9406859125e07d378ce68d29","modified":1498153796000},{"_id":"source/img/favicon.png","hash":"6233d8f9cf962ef12dda3b1afd1c963d147b68f3","modified":1498233678000},{"_id":"source/tags/index.md","hash":"c2a93f24404c49d1514bb25d7f58c04dc5dbc139","modified":1498233678000},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1498233678000},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1498233678000},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1498233678000},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1498233678000},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1498233678000},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1498233678000},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1498233678000},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1498233678000},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1498233678000},{"_id":"themes/beantech/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1498233678000},{"_id":"themes/beantech/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1498233678000},{"_id":"themes/beantech/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1498233678000},{"_id":"themes/beantech/layout/index.ejs","hash":"c701f4b755a1e53d519983c1d065a4e324200da5","modified":1498233678000},{"_id":"themes/beantech/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1498233678000},{"_id":"themes/beantech/layout/layout.ejs","hash":"6eafc83ae37d7e213200f658064419728db99c5a","modified":1498233678000},{"_id":"themes/beantech/layout/page.ejs","hash":"c90797e4394c5cb63c2515109480e766d04e486e","modified":1498233678000},{"_id":"themes/beantech/layout/post.ejs","hash":"2d55684fc539dc281f9e2ec0409f09ea6ca43949","modified":1498233678000},{"_id":"themes/beantech/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1498233678000},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"60f67429d62064eebe1c3108a4ae3b9399fe4fa5","modified":1498233678000},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"b2bd5f654afd1b1345229d6c6e2d41a2a95e37dc","modified":1498233678000},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"aafb744601042f0270d2e6595129ac8a73ad2608","modified":1498233678000},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1498233678000},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1498233678000},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1498233678000},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"837f01e8a20e5023b4b292d1b3141a399567da65","modified":1498233678000},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1498233678000},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1498233678000},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1498233678000},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1498233678000},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1498233678000},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"3b10bd768f6ef30a42b1703fbc9a88627f9bfdf1","modified":1498233678000},{"_id":"themes/beantech/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1498233678000},{"_id":"themes/beantech/source/css/beantech.css","hash":"b8a97382f70ab7fc0be147f0f2c9225c76f80449","modified":1498233678000},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"71141a197d4c6415472f9c2a9c1c0746cd463f80","modified":1498233678000},{"_id":"themes/beantech/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1498233678000},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1498233678000},{"_id":"themes/beantech/source/css/rocket.styl","hash":"19e3a730ca33d77d78ba3a7efcba399bc3182fa8","modified":1498233678000},{"_id":"themes/beantech/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1498233678000},{"_id":"themes/beantech/source/css/toc.styl","hash":"9e959cebf9aef87ecac0ea20db7ee96ea1c26b38","modified":1498233678000},{"_id":"themes/beantech/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1498233678000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1498233678000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1498233678000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1498233678000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1498233678000},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1498233678000},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1498233678000},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1498233678000},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1498233678000},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1498233678000},{"_id":"themes/beantech/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1498233679000},{"_id":"themes/beantech/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1498233679000},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1498233678000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1498233678000},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1498233678000},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1498233678000},{"_id":"source/img/latte.jpg","hash":"6c79acc1d215df4bccefee769baa8d1b51efdbf5","modified":1498233678000},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1498233678000},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1498233678000},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1498233678000},{"_id":"themes/beantech/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1498233678000},{"_id":"source/img/header_img/bg.png","hash":"74d23c05e93a2e4bb469737f69d1714d1074bcf9","modified":1498233678000},{"_id":"public/post-sitemap.xml","hash":"1c8b1f751d17fbcb7a9e5e0efdd0da1adf4ef0c8","modified":1498318846447},{"_id":"public/page-sitemap.xml","hash":"74b8f225cd1b5cebb53c5c6109cff6312aeb3e53","modified":1498318847423},{"_id":"public/tag-sitemap.xml","hash":"3052bf371979d9d317798dc146b4d5cf87e3db3e","modified":1498318847634},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1498318847691},{"_id":"public/sitemap.xml","hash":"a27d82df6ab3d9037802290cf0e139330032086b","modified":1498318847691},{"_id":"public/404.html","hash":"6326bcd33f620fc6a0f0474e2822f534fbcaf7a7","modified":1498318847724},{"_id":"public/tags/index.html","hash":"c1e83edffb921b737c612ca0a75be4de2f2c40dc","modified":1498318847724},{"_id":"public/2017/06/19/20170619-0236-huli-course-feedback/index.html","hash":"52d342b50d83892a4b8226dd31ebea1fcce00796","modified":1498318847724},{"_id":"public/2017/06/17/20170617-1548-interview-coding/index.html","hash":"b4570030d0a291d51ad4666942aaf231237dd6e5","modified":1498318847724},{"_id":"public/2017/06/17/20170617-1511-huli-course-10/index.html","hash":"c3be9faca9654328f9c682d39171f9de0c8b8f8e","modified":1498318847724},{"_id":"public/2017/06/12/20170612-1220-interview-json/index.html","hash":"4032fb511f1b5a07df37f35b3a9204b9f4be6303","modified":1498318847725},{"_id":"public/2017/06/11/20170611-1454-js-closure/index.html","hash":"42e398a5d7f0b59ba1247248bec97896392a1975","modified":1498318847725},{"_id":"public/2017/06/11/20170611-1450-huli-course-09/index.html","hash":"a5340f02106615652c47f152f2a57b67852ad0ec","modified":1498318847725},{"_id":"public/2017/06/09/20170609-1529-interview-js-event-bubble/index.html","hash":"5937c49987a18a331e9d48d76685e99b1cbcd6db","modified":1498318847725},{"_id":"public/2017/06/04/20170604-1837-huli-course-08/index.html","hash":"75b0f2a2955eae4c76cfa1c9795e3de2b3cf96fa","modified":1498318847725},{"_id":"public/2017/05/25/20170525-1501-huli-course-07/index.html","hash":"a3928568e66df5943af17faed55edacf131c7e7e","modified":1498318847725},{"_id":"public/2017/05/18/20170518-1502-huli-course-06/index.html","hash":"c434b56996336fc857a5770727f344867f631d15","modified":1498318847725},{"_id":"public/2017/05/17/20170517-1501-huli-course-05/index.html","hash":"47dced3e8561bbee1f3ab05c82a6d481ddf62566","modified":1498318847725},{"_id":"public/2017/05/09/20170509-1501-huli-course-04/index.html","hash":"ec541e26367bafc467db428ebb6a77b3428612cd","modified":1498318847725},{"_id":"public/2017/05/02/20170502-1501-huli-course-03/index.html","hash":"1efb9bfac726a080cdfea39db3ecd9fea17b8578","modified":1498318847725},{"_id":"public/2017/04/27/20170427-1328-02-redux-note/index.html","hash":"d799545cfa940ddc17be94042f11f0594055ae49","modified":1498318847725},{"_id":"public/2017/04/24/20170424-1502-huli-course-02/index.html","hash":"47ab11965f546f92c1f0cd822cab31cecb811020","modified":1498318847725},{"_id":"public/2017/04/16/20170416-1502-huli-course-01/index.html","hash":"a7080a3f284fa3eb8b5f2fbbd1565957367e9148","modified":1498318847725},{"_id":"public/2017/04/12/20170412-1620-01-react-reference/index.html","hash":"0bc095de32782ff584b5c13eceee502e28974285","modified":1498318847725},{"_id":"public/2017/04/09/20170409-1222_aws-ec2-deploy-nodejs/index.html","hash":"9a59bff94d6828f5b9acbd747cc9de23d721d265","modified":1498318847726},{"_id":"public/2017/04/06/20170406-2215_nodjs-blog/index.html","hash":"4b22753dea1d74449f7de373356254e8f94f164d","modified":1498318847726},{"_id":"public/2017/03/25/20170325-2256_HelloWorld/index.html","hash":"ea72f8ac557d8e68a9406e91e5f97ad78b1ad576","modified":1498318847726},{"_id":"public/about/index.html","hash":"229b2e095bc77346c40fcaf5e3990be74f14423d","modified":1498318847726},{"_id":"public/archive/index.html","hash":"232bbeeb3ff2d1387f4f9c1eb8054a7707f0e540","modified":1498318847726},{"_id":"public/archives/index.html","hash":"01639a9a241e36c196d40fbd1b07bec7a0102fce","modified":1498318847726},{"_id":"public/archives/archives/2/index.html","hash":"067768c4ebdee6c00e4e42c7897bceae0c42f5c7","modified":1498318847726},{"_id":"public/archives/2017/index.html","hash":"21c3f3b4a15fd46fcd8c67bf47d428b81cd76468","modified":1498318847726},{"_id":"public/archives/2017/archives/2/index.html","hash":"74297dc0f131a5a1536f47c1d75c195c1346d4ec","modified":1498318847726},{"_id":"public/archives/2017/03/index.html","hash":"8df927b03559cccec889d96e62b40f8a4b6bb843","modified":1498318847726},{"_id":"public/archives/2017/04/index.html","hash":"58947d3184b3c115163dade32ef2addc2c1ea238","modified":1498318847726},{"_id":"public/archives/2017/05/index.html","hash":"5f438f91ef63695313a75f2e01ea2af971b29d24","modified":1498318847726},{"_id":"public/archives/2017/06/index.html","hash":"33075d0b3f79b76eb041b1a0f5220e4464e39d0a","modified":1498318847726},{"_id":"public/index.html","hash":"d6de4436728a250caded22e0e11e10437fb15f51","modified":1498318847726},{"_id":"public/archives/2/index.html","hash":"2cb101a07d9b1f6974c48b1954a697c9856f0484","modified":1498318847726},{"_id":"public/tags/前端/index.html","hash":"f23101da50e501098f4c64e9c311656705b07a57","modified":1498318847727},{"_id":"public/tags/前端/archives/2/index.html","hash":"ee31d2c9ca17778327f33b7779fd3369de7e4a04","modified":1498318847727},{"_id":"public/tags/初學/index.html","hash":"640828a81b2f3e13dacc2d27fb1f9b0771079d0c","modified":1498318847727},{"_id":"public/tags/初學/archives/2/index.html","hash":"85a9b710678b6eb38a47cab69c5c6464ab5e1df3","modified":1498318847727},{"_id":"public/tags/心得/index.html","hash":"1811fccd073126830b304ab079853c18085c2905","modified":1498318847727},{"_id":"public/tags/Node/index.html","hash":"1a953ea9054e5c6fd5a6f2bab33d3f656b8e40cd","modified":1498318847728},{"_id":"public/tags/MongoDB/index.html","hash":"0125b8adc176fc60a04e765e0e2a5af3f82fc50a","modified":1498318847728},{"_id":"public/tags/Blog/index.html","hash":"787b262e0e9991b980cada66998b312ad84ffab9","modified":1498318847728},{"_id":"public/tags/ejs/index.html","hash":"c5f1c7c16b75259af8d4d3423c25544ebb062c97","modified":1498318847728},{"_id":"public/tags/後端/index.html","hash":"b24be77ba5b5a4372d7e490171c6481f27679337","modified":1498318847728},{"_id":"public/tags/AWS/index.html","hash":"44cb73255095fcb201b7cfc6a8754ac89ebb51dd","modified":1498318847728},{"_id":"public/tags/EC2/index.html","hash":"0509854d0674f14b10dc26a9a34e5db8eb667f50","modified":1498318847728},{"_id":"public/tags/deploy/index.html","hash":"be19ed1b57a42ff8cdda185576f602ceb1c2189e","modified":1498318847728},{"_id":"public/tags/部署/index.html","hash":"c1957f8a8dc6b6e8363e9c35d3e86ac49885c586","modified":1498318847728},{"_id":"public/tags/教學/index.html","hash":"0f84edb8d2953b8a2ac0310d9019e98f30b5b72e","modified":1498318847728},{"_id":"public/tags/筆記/index.html","hash":"69b9d327594a484383b302a6d3bbca3c95ce56b0","modified":1498318847728},{"_id":"public/tags/Front-End/index.html","hash":"9c944314f8f6c5361c0b7b39696063b9bfff2d7d","modified":1498318847728},{"_id":"public/tags/Front-End/archives/2/index.html","hash":"a222ce03778de782ef55ba8e29cf1e7104109646","modified":1498318847728},{"_id":"public/tags/React/index.html","hash":"bbb1d549b5d5e27a84c482746efd68af86def77d","modified":1498318847728},{"_id":"public/tags/HTML/index.html","hash":"22666d5a05d45ed3e42b2e771870d02fe3f9d77b","modified":1498318847729},{"_id":"public/tags/Flexbox/index.html","hash":"f842ed8332b3b6e27c3f779ca4eaa15788185449","modified":1498318847729},{"_id":"public/tags/切版/index.html","hash":"288f1061020c86d8f1f9d46b724bb90fe4b5058e","modified":1498318847729},{"_id":"public/tags/CSS/index.html","hash":"e89cda93d17a1491f552addce7ee629254cfb16f","modified":1498318847729},{"_id":"public/tags/transition/index.html","hash":"218adae3f5f4b87eb3a1d0ea11ce8239f4ae1b40","modified":1498318847729},{"_id":"public/tags/Redux/index.html","hash":"1b21d5a589c304574b3c42a6ff9371cd4af3f672","modified":1498318847729},{"_id":"public/tags/SASS/index.html","hash":"a4f660eb73f207e7603246950b48bfca429f11fc","modified":1498318847729},{"_id":"public/tags/Ajax/index.html","hash":"eac259af83d059a1dd4825cdb83d5e9066c43da2","modified":1498318847729},{"_id":"public/tags/API/index.html","hash":"b249c0a5ff8f89d42b6ce87d01ba8e0718b20cce","modified":1498318847729},{"_id":"public/tags/jQuery/index.html","hash":"e60863a5ab7440fbfa47ef0969f5b96dc6acc602","modified":1498318847729},{"_id":"public/tags/placeholder/index.html","hash":"f98570f14803d02ba69c98adabc7de51dd68e469","modified":1498318847729},{"_id":"public/tags/scroll/index.html","hash":"5cfd2857db4eef3c485a74a1fc62bc15ac8d41aa","modified":1498318847729},{"_id":"public/tags/Vanilla/index.html","hash":"948ccbc6df75e06830dcfba205ddd973552389c3","modified":1498318847729},{"_id":"public/tags/JavaScript/index.html","hash":"ead35803069d90480e17b339a494bce9e2c220d7","modified":1498318847729},{"_id":"public/tags/i18n/index.html","hash":"fd0ffa9bc4429e861626532ab090c3c3a6596889","modified":1498318847729},{"_id":"public/tags/Webpack/index.html","hash":"d40957e9187a7b52a7944fa2df9513f2b6c10dd3","modified":1498318847730},{"_id":"public/tags/stopPropagation/index.html","hash":"87f26f41952633973da514adbb024d22a91d2e91","modified":1498318847730},{"_id":"public/tags/Gulp/index.html","hash":"e4a124c86372e993c9cb11bad063146e189546f4","modified":1498318847730},{"_id":"public/tags/JSON/index.html","hash":"2517241a8ed7b6543a84bced94734ead80b845e3","modified":1498318847730},{"_id":"public/tags/面試/index.html","hash":"c212e05ca0e376ec286a0349b2bb2c96af4b95e5","modified":1498318847730},{"_id":"public/tags/ESLint/index.html","hash":"df482fd1868dfeac4e0bc660cd929673f8919476","modified":1498318847730},{"_id":"public/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1498318847741},{"_id":"public/img/favicon.png","hash":"6233d8f9cf962ef12dda3b1afd1c963d147b68f3","modified":1498318847741},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1498318847742},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1498318847742},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1498318847742},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1498318847742},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1498318847742},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1498318847742},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1498318848053},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1498318848066},{"_id":"public/css/highlight.css","hash":"03d1f0a648e9bdf7b1f57d217313cbac5d0c7eb1","modified":1498318848066},{"_id":"public/css/rocket.css","hash":"ff363acbf4d07259228a37738221033665b28794","modified":1498318848066},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1498318848066},{"_id":"public/css/toc.css","hash":"4a892d4d00d85f984c6aeba44a34648bb98f1861","modified":1498318848066},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1498318848066},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1498318848067},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1498318848067},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1498318848067},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1498318848067},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1498318848067},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1498318848067},{"_id":"public/css/beantech.css","hash":"b8a97382f70ab7fc0be147f0f2c9225c76f80449","modified":1498318848067},{"_id":"public/css/beantech.min.css","hash":"71141a197d4c6415472f9c2a9c1c0746cd463f80","modified":1498318848067},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1498318848067},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1498318848067},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1498318848067},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1498318848067},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1498318848067},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1498318848067},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1498318848067},{"_id":"public/img/latte.jpg","hash":"6c79acc1d215df4bccefee769baa8d1b51efdbf5","modified":1498318848079},{"_id":"public/img/header_img/bg.png","hash":"74d23c05e93a2e4bb469737f69d1714d1074bcf9","modified":1498318848189}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"404 Not found","header-img":"img/header_img/bg.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"404 Not found\"\nheader-img: \"img/header_img/bg.png\"\n---\n","date":"2017-06-23T16:01:18.000Z","updated":"2017-06-23T16:01:18.000Z","path":"404.html","title":"","comments":1,"_id":"cj4bgcs2x0000474ug3nbu327","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2017-06-23T13:23:00.000Z","description":"Hi, I'm Dez!","header-img":"img/header_img/bg.png","comments":1,"_content":"\n# Intro.\nHi，我是Dez，目前專注於自學網頁開發相關技術，大部分為前端加一點後端，偶爾培養一些UI/UX的知識，短期的目標是成為有設計感又略懂略懂技術的「前端工程師」。\n\n由於近年來，網頁開發技術百家爭鳴變化快速，此部落格初期構想是「記錄」與「分享」。不論是心得與筆記，甚至之後鑽研深一些，能有全面性的教學文章，期待能透過寫部落格文章的方式，讓自己能夠真正地從入門到理解，也能記錄自己在軟體開發領域的成長過程，如果能幫助到剛好需要查資料的人，那就更好了。\n\n如果內容有誤或有任何疑問，都非常歡迎留言或來信討論！\n\n---\n\n# Works collection\n* [Demo Page](https://dezchuang.github.io/works-collection-demo/index.html)\n\n# Resume\n* [Reume Link](https://github.com/DezChuang/resume/blob/master/resume/DezChuang_Resume.pdf)\n\n---\n\n# Contact me\n* E-mail:  [dissaivent@gmail.com](mailto:dissaivent@gmail.com)\n* Github:  [http://github.com/DezChuang](http://github.com/DezChuang)\n* Linkdin: [http://www.linkedin.com/in/dezchuang/](http://www.linkedin.com/in/dezchuang/)\n<br>\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2017-06-23 21:23:00\ndescription: \"Hi, I'm Dez!\"\nheader-img: \"img/header_img/bg.png\"\ncomments: true\n---\n\n# Intro.\nHi，我是Dez，目前專注於自學網頁開發相關技術，大部分為前端加一點後端，偶爾培養一些UI/UX的知識，短期的目標是成為有設計感又略懂略懂技術的「前端工程師」。\n\n由於近年來，網頁開發技術百家爭鳴變化快速，此部落格初期構想是「記錄」與「分享」。不論是心得與筆記，甚至之後鑽研深一些，能有全面性的教學文章，期待能透過寫部落格文章的方式，讓自己能夠真正地從入門到理解，也能記錄自己在軟體開發領域的成長過程，如果能幫助到剛好需要查資料的人，那就更好了。\n\n如果內容有誤或有任何疑問，都非常歡迎留言或來信討論！\n\n---\n\n# Works collection\n* [Demo Page](https://dezchuang.github.io/works-collection-demo/index.html)\n\n# Resume\n* [Reume Link](https://github.com/DezChuang/resume/blob/master/resume/DezChuang_Resume.pdf)\n\n---\n\n# Contact me\n* E-mail:  [dissaivent@gmail.com](mailto:dissaivent@gmail.com)\n* Github:  [http://github.com/DezChuang](http://github.com/DezChuang)\n* Linkdin: [http://www.linkedin.com/in/dezchuang/](http://www.linkedin.com/in/dezchuang/)\n<br>\n\n","updated":"2017-06-23T16:01:18.000Z","path":"about/index.html","_id":"cj4bgcs440002474u18qyvt97","content":"<h1 id=\"intro\">Intro.</h1>\n<p>Hi，我是Dez，目前專注於自學網頁開發相關技術，大部分為前端加一點後端，偶爾培養一些UI/UX的知識，短期的目標是成為有設計感又略懂略懂技術的「前端工程師」。</p>\n<p>由於近年來，網頁開發技術百家爭鳴變化快速，此部落格初期構想是「記錄」與「分享」。不論是心得與筆記，甚至之後鑽研深一些，能有全面性的教學文章，期待能透過寫部落格文章的方式，讓自己能夠真正地從入門到理解，也能記錄自己在軟體開發領域的成長過程，如果能幫助到剛好需要查資料的人，那就更好了。</p>\n<p>如果內容有誤或有任何疑問，都非常歡迎留言或來信討論！</p>\n<hr>\n<h1 id=\"works-collection\">Works collection</h1>\n<ul>\n<li><a href=\"https://dezchuang.github.io/works-collection-demo/index.html\">Demo Page</a></li>\n</ul>\n<h1 id=\"resume\">Resume</h1>\n<ul>\n<li><a href=\"https://github.com/DezChuang/resume/blob/master/resume/DezChuang_Resume.pdf\" target=\"_blank\" rel=\"external\">Reume Link</a></li>\n</ul>\n<hr>\n<h1 id=\"contact-me\">Contact me</h1>\n<ul>\n<li>E-mail:  <a href=\"mailto:dissaivent@gmail.com\" target=\"_blank\" rel=\"external\">dissaivent@gmail.com</a></li>\n<li>Github:  <a href=\"http://github.com/DezChuang\" target=\"_blank\" rel=\"external\">http://github.com/DezChuang</a></li>\n<li>Linkdin: <a href=\"http://www.linkedin.com/in/dezchuang/\" target=\"_blank\" rel=\"external\">http://www.linkedin.com/in/dezchuang/</a><br>\n<br></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>Intro.</h1>\n<p>Hi，我是Dez，目前專注於自學網頁開發相關技術，大部分為前端加一點後端，偶爾培養一些UI/UX的知識，短期的目標是成為有設計感又略懂略懂技術的「前端工程師」。</p>\n<p>由於近年來，網頁開發技術百家爭鳴變化快速，此部落格初期構想是「記錄」與「分享」。不論是心得與筆記，甚至之後鑽研深一些，能有全面性的教學文章，期待能透過寫部落格文章的方式，讓自己能夠真正地從入門到理解，也能記錄自己在軟體開發領域的成長過程，如果能幫助到剛好需要查資料的人，那就更好了。</p>\n<p>如果內容有誤或有任何疑問，都非常歡迎留言或來信討論！</p>\n<hr>\n<h1>Works collection</h1>\n<ul>\n<li><a href=\"https://dezchuang.github.io/works-collection-demo/index.html\">Demo Page</a></li>\n</ul>\n<h1>Resume</h1>\n<ul>\n<li><a href=\"https://github.com/DezChuang/resume/blob/master/resume/DezChuang_Resume.pdf\" target=\"_blank\" rel=\"external\">Reume Link</a></li>\n</ul>\n<hr>\n<h1>Contact me</h1>\n<ul>\n<li>E-mail:  <a href=\"mailto:dissaivent@gmail.com\" target=\"_blank\" rel=\"external\">dissaivent@gmail.com</a></li>\n<li>Github:  <a href=\"http://github.com/DezChuang\" target=\"_blank\" rel=\"external\">http://github.com/DezChuang</a></li>\n<li>Linkdin: <a href=\"http://www.linkedin.com/in/dezchuang/\" target=\"_blank\" rel=\"external\">http://www.linkedin.com/in/dezchuang/</a><br>\n<br></li>\n</ul>\n"},{"layout":"archive","title":"Archives","header-img":"img/header_img/bg.png","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/bg.png\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2017-06-23T16:01:18.000Z","path":"archive/index.html","_id":"cj4bgcs490004474uruvxeiyp","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/header_img/bg.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/header_img/bg.png\"\n---\n","date":"2017-06-23T16:01:18.000Z","updated":"2017-06-23T16:01:18.000Z","path":"tags/index.html","comments":1,"_id":"cj4bgcs7h0056474uq1yszqo1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"日常｜Hello world","catalog":true,"date":"2017-03-25T14:56:00.000Z","subtitle":"藉著分享所學的新技術，讓自己能夠真正地從入門到理解。","header-img":"../../../../img/header_img/bg.png","_content":"\nHi，我是Dez，今天要來聊聊這個部落格的緣由。好想發一篇類似「我要成為前端工程師」的文章，但鑒於在這個領域還只是個rookie，再過個一兩年增長見識後再來聊聊心路歷程好了，簡言之在去年十月，因為興趣與職涯考量決定開始自學網頁開發。\n\n\n## 前言\n當時就一直想著「<b>反正先架個部落格吧</b>」，於是用Hexo在Github上粗略地弄了個靜態網頁，半夜還在研究怎麼加上DISQUS留言板，最後不免俗地發了一篇Hello wolrd的文章，隨後就展開了自學之旅。\n\n## 決戰十里坡\n網路文章零散，初學者還無法分辨資訊的重要性，所以一開始學習略無組織，從W3C的HTML第一頁開始翻，也在Codecademy學Python，簡單架了個Django網頁，最扯的是，到書局想買本Javascript的書，卻帶了Swift回家...\n\n最後狠下心買了幾門國外線上課程，賭著不想浪費錢的我，就真的乖乖上起web-dev bootcamp，跟著組織性的課程，才終於開始走上正軌，從最基本的HTML/CSS/Javascript到Node.js/Express/React.js，總算到最近是從前到後瀏覽了一遍網頁開發的皮毛，也稍微看懂了[How it feels to learn JavaScript in 2016](https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.ssq3szpwq)這篇警世文。\n\n## 拿魔杖普攻\n跟著講師動手做的範例頂多也只是在練英打，於是最近打算開始開發一些自己的作品，「不如來架個部落格吧」，這個熟悉的聲音又在腦中響起，於是想打鐵趁熱利用Node.js與React.js來打造自己的部落格。\n\n基於功力還不夠從無到有打造一整個包含後台的部落格 \\(目前後台程度大約是新增,編輯,刪除,authentication的功能\\) 。原本打算以去年的Hexo為模板改造，卻發現後台只有hexo-hey可以作為發文的UI，當初在Github上branch也切得太亂，只好忍痛砍掉，幾經搜索後決定使用<b>Ghost</b>與<b>Heroku</b>暫時做為基底。花了一兩天的時間，簡單的完成Heroku的deploy作業，也將git連到Github管理，Database暫時是使用Heroku的Postgres，對於自己架站做部落格還有許多的想法諸如:\n* 利用React重構前端View，做一個專屬的theme\n* 調整Node.js設定，個人化自己的後台\n* 將資料庫連結至Amazon AWS S3\n* 加入可以新增圖片的功能與後台介面及連結資料庫\n* 修改authentication設定\n\n## 後記\nBUT，人生就是這個BUT，越是想自己造一台車，就越發現自己這個還沒學那個也需要會，在車子還沒完成前，總是需要先找個可以代步的工具，於是選擇許多開發者使用的Logdown，來做為一個可以分享技術的平台，讓自己可以先專注在學習基本功上，藉著分享所學的新技術，讓自己能夠真正地從入門到理解。\n\n最後，希望這不會是這個部落格的最後一篇文章拉！\n\n\n### 3/28更新\n結果我還是手癢，利用這股衝動，將之前線上教學的YelpCamp重構成blog中...\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1639317/jBqzsvjXRQmrhQp6gjtq_Screen%20Shot%202017-03-28%20at%209.30.06%20PM.png\">\n把基本的功能修好，近期就會將半成品deploy到Heroku，再順便把deploy到Heroku的流程當做下一篇文章的主題好了！","source":"_posts/20170325-2256_HelloWorld.md","raw":"---\ntitle: 日常｜Hello world\ncatalog: true\ndate: 2017-03-25 22:56:00\nsubtitle: 藉著分享所學的新技術，讓自己能夠真正地從入門到理解。\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - 前端\n    - 初學\n    - 心得\n---\n\nHi，我是Dez，今天要來聊聊這個部落格的緣由。好想發一篇類似「我要成為前端工程師」的文章，但鑒於在這個領域還只是個rookie，再過個一兩年增長見識後再來聊聊心路歷程好了，簡言之在去年十月，因為興趣與職涯考量決定開始自學網頁開發。\n\n\n## 前言\n當時就一直想著「<b>反正先架個部落格吧</b>」，於是用Hexo在Github上粗略地弄了個靜態網頁，半夜還在研究怎麼加上DISQUS留言板，最後不免俗地發了一篇Hello wolrd的文章，隨後就展開了自學之旅。\n\n## 決戰十里坡\n網路文章零散，初學者還無法分辨資訊的重要性，所以一開始學習略無組織，從W3C的HTML第一頁開始翻，也在Codecademy學Python，簡單架了個Django網頁，最扯的是，到書局想買本Javascript的書，卻帶了Swift回家...\n\n最後狠下心買了幾門國外線上課程，賭著不想浪費錢的我，就真的乖乖上起web-dev bootcamp，跟著組織性的課程，才終於開始走上正軌，從最基本的HTML/CSS/Javascript到Node.js/Express/React.js，總算到最近是從前到後瀏覽了一遍網頁開發的皮毛，也稍微看懂了[How it feels to learn JavaScript in 2016](https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.ssq3szpwq)這篇警世文。\n\n## 拿魔杖普攻\n跟著講師動手做的範例頂多也只是在練英打，於是最近打算開始開發一些自己的作品，「不如來架個部落格吧」，這個熟悉的聲音又在腦中響起，於是想打鐵趁熱利用Node.js與React.js來打造自己的部落格。\n\n基於功力還不夠從無到有打造一整個包含後台的部落格 \\(目前後台程度大約是新增,編輯,刪除,authentication的功能\\) 。原本打算以去年的Hexo為模板改造，卻發現後台只有hexo-hey可以作為發文的UI，當初在Github上branch也切得太亂，只好忍痛砍掉，幾經搜索後決定使用<b>Ghost</b>與<b>Heroku</b>暫時做為基底。花了一兩天的時間，簡單的完成Heroku的deploy作業，也將git連到Github管理，Database暫時是使用Heroku的Postgres，對於自己架站做部落格還有許多的想法諸如:\n* 利用React重構前端View，做一個專屬的theme\n* 調整Node.js設定，個人化自己的後台\n* 將資料庫連結至Amazon AWS S3\n* 加入可以新增圖片的功能與後台介面及連結資料庫\n* 修改authentication設定\n\n## 後記\nBUT，人生就是這個BUT，越是想自己造一台車，就越發現自己這個還沒學那個也需要會，在車子還沒完成前，總是需要先找個可以代步的工具，於是選擇許多開發者使用的Logdown，來做為一個可以分享技術的平台，讓自己可以先專注在學習基本功上，藉著分享所學的新技術，讓自己能夠真正地從入門到理解。\n\n最後，希望這不會是這個部落格的最後一篇文章拉！\n\n\n### 3/28更新\n結果我還是手癢，利用這股衝動，將之前線上教學的YelpCamp重構成blog中...\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1639317/jBqzsvjXRQmrhQp6gjtq_Screen%20Shot%202017-03-28%20at%209.30.06%20PM.png\">\n把基本的功能修好，近期就會將半成品deploy到Heroku，再順便把deploy到Heroku的流程當做下一篇文章的主題好了！","slug":"20170325-2256_HelloWorld","published":1,"updated":"2017-06-24T05:56:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs3z0001474u9kg0n51u","content":"<p>Hi，我是Dez，今天要來聊聊這個部落格的緣由。好想發一篇類似「我要成為前端工程師」的文章，但鑒於在這個領域還只是個rookie，再過個一兩年增長見識後再來聊聊心路歷程好了，簡言之在去年十月，因為興趣與職涯考量決定開始自學網頁開發。</p>\n<h2 id=\"前言\">前言</h2>\n<p>當時就一直想著「<b>反正先架個部落格吧</b>」，於是用Hexo在Github上粗略地弄了個靜態網頁，半夜還在研究怎麼加上DISQUS留言板，最後不免俗地發了一篇Hello wolrd的文章，隨後就展開了自學之旅。</p>\n<h2 id=\"決戰十里坡\">決戰十里坡</h2>\n<p>網路文章零散，初學者還無法分辨資訊的重要性，所以一開始學習略無組織，從W3C的HTML第一頁開始翻，也在Codecademy學Python，簡單架了個Django網頁，最扯的是，到書局想買本Javascript的書，卻帶了Swift回家…</p>\n<p>最後狠下心買了幾門國外線上課程，賭著不想浪費錢的我，就真的乖乖上起web-dev bootcamp，跟著組織性的課程，才終於開始走上正軌，從最基本的HTML/CSS/Javascript到Node.js/Express/React.js，總算到最近是從前到後瀏覽了一遍網頁開發的皮毛，也稍微看懂了<a href=\"https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.ssq3szpwq\" target=\"_blank\" rel=\"external\">How it feels to learn JavaScript in 2016</a>這篇警世文。</p>\n<h2 id=\"拿魔杖普攻\">拿魔杖普攻</h2>\n<p>跟著講師動手做的範例頂多也只是在練英打，於是最近打算開始開發一些自己的作品，「不如來架個部落格吧」，這個熟悉的聲音又在腦中響起，於是想打鐵趁熱利用Node.js與React.js來打造自己的部落格。</p>\n<p>基於功力還不夠從無到有打造一整個包含後台的部落格 (目前後台程度大約是新增,編輯,刪除,authentication的功能) 。原本打算以去年的Hexo為模板改造，卻發現後台只有hexo-hey可以作為發文的UI，當初在Github上branch也切得太亂，只好忍痛砍掉，幾經搜索後決定使用<b>Ghost</b>與<b>Heroku</b>暫時做為基底。花了一兩天的時間，簡單的完成Heroku的deploy作業，也將git連到Github管理，Database暫時是使用Heroku的Postgres，對於自己架站做部落格還有許多的想法諸如:</p>\n<ul>\n<li>利用React重構前端View，做一個專屬的theme</li>\n<li>調整Node.js設定，個人化自己的後台</li>\n<li>將資料庫連結至Amazon AWS S3</li>\n<li>加入可以新增圖片的功能與後台介面及連結資料庫</li>\n<li>修改authentication設定</li>\n</ul>\n<h2 id=\"後記\">後記</h2>\n<p>BUT，人生就是這個BUT，越是想自己造一台車，就越發現自己這個還沒學那個也需要會，在車子還沒完成前，總是需要先找個可以代步的工具，於是選擇許多開發者使用的Logdown，來做為一個可以分享技術的平台，讓自己可以先專注在學習基本功上，藉著分享所學的新技術，讓自己能夠真正地從入門到理解。</p>\n<p>最後，希望這不會是這個部落格的最後一篇文章拉！</p>\n<h3 id=\"328更新\">3/28更新</h3>\n<p>結果我還是手癢，利用這股衝動，將之前線上教學的YelpCamp重構成blog中…<br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1639317/jBqzsvjXRQmrhQp6gjtq_Screen%20Shot%202017-03-28%20at%209.30.06%20PM.png\"><br>\n把基本的功能修好，近期就會將半成品deploy到Heroku，再順便把deploy到Heroku的流程當做下一篇文章的主題好了！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hi，我是Dez，今天要來聊聊這個部落格的緣由。好想發一篇類似「我要成為前端工程師」的文章，但鑒於在這個領域還只是個rookie，再過個一兩年增長見識後再來聊聊心路歷程好了，簡言之在去年十月，因為興趣與職涯考量決定開始自學網頁開發。</p>\n<h2>前言</h2>\n<p>當時就一直想著「<b>反正先架個部落格吧</b>」，於是用Hexo在Github上粗略地弄了個靜態網頁，半夜還在研究怎麼加上DISQUS留言板，最後不免俗地發了一篇Hello wolrd的文章，隨後就展開了自學之旅。</p>\n<h2>決戰十里坡</h2>\n<p>網路文章零散，初學者還無法分辨資訊的重要性，所以一開始學習略無組織，從W3C的HTML第一頁開始翻，也在Codecademy學Python，簡單架了個Django網頁，最扯的是，到書局想買本Javascript的書，卻帶了Swift回家…</p>\n<p>最後狠下心買了幾門國外線上課程，賭著不想浪費錢的我，就真的乖乖上起web-dev bootcamp，跟著組織性的課程，才終於開始走上正軌，從最基本的HTML/CSS/Javascript到Node.js/Express/React.js，總算到最近是從前到後瀏覽了一遍網頁開發的皮毛，也稍微看懂了<a href=\"https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.ssq3szpwq\" target=\"_blank\" rel=\"external\">How it feels to learn JavaScript in 2016</a>這篇警世文。</p>\n<h2>拿魔杖普攻</h2>\n<p>跟著講師動手做的範例頂多也只是在練英打，於是最近打算開始開發一些自己的作品，「不如來架個部落格吧」，這個熟悉的聲音又在腦中響起，於是想打鐵趁熱利用Node.js與React.js來打造自己的部落格。</p>\n<p>基於功力還不夠從無到有打造一整個包含後台的部落格 (目前後台程度大約是新增,編輯,刪除,authentication的功能) 。原本打算以去年的Hexo為模板改造，卻發現後台只有hexo-hey可以作為發文的UI，當初在Github上branch也切得太亂，只好忍痛砍掉，幾經搜索後決定使用<b>Ghost</b>與<b>Heroku</b>暫時做為基底。花了一兩天的時間，簡單的完成Heroku的deploy作業，也將git連到Github管理，Database暫時是使用Heroku的Postgres，對於自己架站做部落格還有許多的想法諸如:</p>\n<ul>\n<li>利用React重構前端View，做一個專屬的theme</li>\n<li>調整Node.js設定，個人化自己的後台</li>\n<li>將資料庫連結至Amazon AWS S3</li>\n<li>加入可以新增圖片的功能與後台介面及連結資料庫</li>\n<li>修改authentication設定</li>\n</ul>\n<h2>後記</h2>\n<p>BUT，人生就是這個BUT，越是想自己造一台車，就越發現自己這個還沒學那個也需要會，在車子還沒完成前，總是需要先找個可以代步的工具，於是選擇許多開發者使用的Logdown，來做為一個可以分享技術的平台，讓自己可以先專注在學習基本功上，藉著分享所學的新技術，讓自己能夠真正地從入門到理解。</p>\n<p>最後，希望這不會是這個部落格的最後一篇文章拉！</p>\n<h3>3/28更新</h3>\n<p>結果我還是手癢，利用這股衝動，將之前線上教學的YelpCamp重構成blog中…<br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1639317/jBqzsvjXRQmrhQp6gjtq_Screen%20Shot%202017-03-28%20at%209.30.06%20PM.png\"><br>\n把基本的功能修好，近期就會將半成品deploy到Heroku，再順便把deploy到Heroku的流程當做下一篇文章的主題好了！</p>\n"},{"title":"心得｜新手架站心得｜Node.js & MongoDB","catalog":true,"date":"2017-04-06T14:15:00.000Z","subtitle":"或許架站並不難做，套套版型不用幾天就能完成，但想想我也是從頭到尾用sublime刻出來的，容我稱呼自己為「那個造輪子的魔術師」吧！","header-img":"../../../../img/header_img/bg.png","_content":"\n首先先附上成果： [http://52.197.26.179/](http://52.197.26.179/)，這是還沒買網域的AWS EC2網址，請安心前往。\n\n<br>\n\n## 前言\n由於一直想架一個部落格，雖然辦了logdown還是覺得手癢，趁著最近需要弄些作品集，決定把之前在Udemy的[The Web Developer Bootcamp](https://www.udemy.com/the-web-developer-bootcamp/)課程中，還未完成的「YelpCamp實作」學完，並剛好利用這個版型，自己重構成專屬的部落格。\n\n這門課是之前原本打算學Python時，偶然從[Pala.tw](http://pala.tw/learn-web-development-on-udemy/#course_4)得知的網頁開發入門，也正式讓我的學習步入正軌。從最基本的前端HTML/CSS/Javascript/jQuery，到後端Node.js/Express/MongoDB/Authentication/Flash Message等等，雖然並沒有時下最潮React，但算是能讓初學者從前到後打通任督二脈的課程，由於課程內容非常豐富，前前後後斷斷續續我就這樣學了半年，直至近一個月，卯起來把最後的後端功能補齊，正式完成了YelpCamp project。\n<br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/rjYLXicrTGOgG4xRq0NQ_Screen%20Shot%202017-04-06%20at%208.30.23%20PM.png\">\n<br>\n這個YelpCamp練習，後端的功能含有註冊登入等Authentication、文章與評論的新增修改刪除，剛好是個很適合改造成部落格的版型，大概在兩個禮拜前開工，在改造前腦力激盪了許多需要設計與新增的功能：\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/XW9Bx3L8Rgd87bV4mOHA_Screen%20Shot%202017-04-06%20at%208.59.02%20PM.png\">\n<br>\n\n## 模仿與重構\n實際上自己動手做才是挑戰的開始，想不出來的問題，沒有課程錄影可以直接給解答，只能常常把chrome開滿滿的分頁，自己挖每一個問題的解法，不過這樣每完成一項自己開發的功能，就得到一點成就感，或許就是網頁開發迷人的地方，就算整天都在整理這個不知道會不會被看到的小東西，卻也不覺得疲乏，大概就是這樣我才選擇成為前端工程師(雖然我現在一直在玩Node.js...)\n\n從上面的表就可以看到，目前還有一些未完成的功能，也有一些雖然看起來完成的項目，其實也只是做個暫時的walk around，像是我一直想解決如何做一個administrator的schema、如何把評論系統做成nested comment、發文的圖片上傳插入功能、如何套用markdown view engine等等，這些功能很有趣，但基於時間的考量暫且擱置。\n\n以下就讓我們來看一下半成品的畫面：\n### (1)歡迎頁\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/wGuxnASyRva36RXVfjYV_Screen%20Shot%202017-04-06%20at%208.11.13%20PM.png\">\n\n歡迎頁是參考課程助教Ian的[background-slide](https://github.com/nax3t/background-slider)來實作，是一些CSS animation的操作，比較有趣的是原來背景投影片使用\\<li\\>的tag來排序：\n```\n.slideshow li {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-size: cover;\n  background-position: 50% 50%;\n  background-repeat: no-repeat;\n  opacity: 0;\n  z-index: 0;\n  animation: imageAnimation 60s linear infinite;\n}\n```\n再暫時套用幾張Pixabay的CC0高解析圖片，莫名的就很有質感。\n<br>\n### (2)文章列表\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/oCwwF7REKt8w22RUhYlA_Screen%20Shot%202017-04-06%20at%209.20.54%20PM.png\">\n\n由於Bootstrap中喜歡的套件不多，所以我又引入Semantic UI來做一些styling，目前整體的畫面還是稍微粗糙，未來在重構時打算將小元件與背景色系統一，或許再把歡迎頁與主頁的header合併。\n\n在實作這整個部落格時，常常需要切版與調整font-size，這時原本不熟練的Google Chrome DevTools都慢慢地上手了，感覺像修改style有playground的感覺，再直接套到主CSS檔即可完成，不過目前全部集中在同一隻main.css中，算是之後需要重構的地方。\n\n這裡要特別提一下最上方的Navbar，RWD與burger button是原本YelpCamp就有的功能，不過要讓它浮動在最上方倒是加上了一些jQuery來實作，甚至額外又加上去的回到頂端功能也是jQuery，一直有一個哪天用React重構成SPA的想法，不知道到時候會不會整個view都要砍掉重練(汗...)\n<br>\n### (3)文章與評論\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/gAKzRm5nTma43rAL23nJ_Screen%20Shot%202017-04-06%20at%209.34.07%20PM.png\">\n\n時間的部分使用了[Moment.js](https://momentjs.com/)，其中遇到的問題是前幾天deploy時，資料庫的所在地是美國，所以需要再另外加上時區的API才能正確顯示+8的時間：\n```\n<%= moment.tz(post.created, 'Asia/Taipei').format('MMM Do YYYY') %> | <%= moment.tz(post.created, 'Asia/Taipei').format('hh:mm:ss a') %>\n```\n以及讓文章在文章列表能依發布時間反向堆疊也是做了一點手腳：\n```\n<% posts.reverse().forEach(function(post){%>\n```\n而一定要提的就是評論的部分，因為在schema部分是接在每篇文章後，不禁讓我想到那段被多維指標陣列荼毒的日子，雖然這是個稍微複雜的功能，但後來發現沒有nested reply整個就是很不滿意，大可直接套用DISQUS即可(還可以貼圖片哩)。又因為我也還沒實作修改個人資料等功能，若把我的評論系統拿掉的話，遊客註冊會員就變成一個雞肋的存在了，所以暫時放著以示我是真的會做，之後打算仿照DISQUS來做一套schema。\n<br>\n## 部署選擇\n關於部署(Deploy)平台有兩個選擇，之前放demo作品的Heroku與從頭自己來的AWS EC2，稍微研究了一下Heroku的收費方案，如果用免費的package，每次要開啟網站時還得先等一段叫醒server的時間，整個UX可能沒那麼好。於是這兩天我一直在玩AWS EC2的部署，意外地沒那麼難，不過也是零零散散搜集了一些2010~2014年間「EC2 nodejs deploy」之類的文章才終於架好，實在有必要在[筆記一篇](http://dez.logdown.com/posts/2017/04/07/aws-ec2-deploy-nodejs-web-app)2017年版的，供未來健忘的我與入門的人們做參考。\n\n目前部署的成果有以下兩個：\n* Heroku: [http://deztwblog.herokuapp.com/](http://deztwblog.herokuapp.com/)\n* AWS EC2: [http://52.197.26.179/](http://52.197.26.179/)\n\n之後打算再去買個網域與更換比較好用的資料庫方案，目前是暫時使用[mLab](https://mlab.com/)的免費方案，之後打算來研究AWS S3與DynamoDB，或是尋找一個比較好的MongoDB部署平台，從這邊開始感受到全端一條龍兩頭燒的感覺啊...\n<br>\n## 後記\n或許這個看似陽春的部落格並不難做，可以套套版型不用幾天就能完成，但想想我也是從頭到尾用sublime刻出來的，容我稱呼自己為「那個造輪子的魔術師」吧！\n\n最近後端玩得太久了，差不多該開始把當初還沒看完的React再起爐灶，之後會趁著想玩點新東西時把「暫時不做的功能」補完，也有打算利用這個部落格為模板，做為我練習React的作品，如果可以做成SPA、ajax應該會很酷。\n\n目前需要再補上React Router、Flux、Redux、ImmutableJS、Isomorphic等等的技能，之後可能就會開始多一些討論React相關的文章了！\n\n### Apr. 13th更新\n還可以再利用Gulp來優化網站，[參考文章](http://ithelp.ithome.com.tw/articles/10185976)。\n\n<br>\n\n## Reference\n* [The Web Developer Bootcamp](https://www.udemy.com/the-web-developer-bootcamp/)\n* [Pala.tw - Udemy與網頁設計課程推薦](http://pala.tw/learn-web-development-on-udemy/#course_4)\n* [Full Screen Background Image Slider](https://github.com/nax3t/background-slider)\n","source":"_posts/20170406-2215_nodjs-blog.md","raw":"---\ntitle: 心得｜新手架站心得｜Node.js & MongoDB\ncatalog: true\ndate: 2017-04-06 22:15:00\nsubtitle: 或許架站並不難做，套套版型不用幾天就能完成，但想想我也是從頭到尾用sublime刻出來的，容我稱呼自己為「那個造輪子的魔術師」吧！\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Node\n    - MongoDB\n    - Blog\n    - ejs\n    - 後端\n    - 初學\n    - 心得\n---\n\n首先先附上成果： [http://52.197.26.179/](http://52.197.26.179/)，這是還沒買網域的AWS EC2網址，請安心前往。\n\n<br>\n\n## 前言\n由於一直想架一個部落格，雖然辦了logdown還是覺得手癢，趁著最近需要弄些作品集，決定把之前在Udemy的[The Web Developer Bootcamp](https://www.udemy.com/the-web-developer-bootcamp/)課程中，還未完成的「YelpCamp實作」學完，並剛好利用這個版型，自己重構成專屬的部落格。\n\n這門課是之前原本打算學Python時，偶然從[Pala.tw](http://pala.tw/learn-web-development-on-udemy/#course_4)得知的網頁開發入門，也正式讓我的學習步入正軌。從最基本的前端HTML/CSS/Javascript/jQuery，到後端Node.js/Express/MongoDB/Authentication/Flash Message等等，雖然並沒有時下最潮React，但算是能讓初學者從前到後打通任督二脈的課程，由於課程內容非常豐富，前前後後斷斷續續我就這樣學了半年，直至近一個月，卯起來把最後的後端功能補齊，正式完成了YelpCamp project。\n<br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/rjYLXicrTGOgG4xRq0NQ_Screen%20Shot%202017-04-06%20at%208.30.23%20PM.png\">\n<br>\n這個YelpCamp練習，後端的功能含有註冊登入等Authentication、文章與評論的新增修改刪除，剛好是個很適合改造成部落格的版型，大概在兩個禮拜前開工，在改造前腦力激盪了許多需要設計與新增的功能：\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/XW9Bx3L8Rgd87bV4mOHA_Screen%20Shot%202017-04-06%20at%208.59.02%20PM.png\">\n<br>\n\n## 模仿與重構\n實際上自己動手做才是挑戰的開始，想不出來的問題，沒有課程錄影可以直接給解答，只能常常把chrome開滿滿的分頁，自己挖每一個問題的解法，不過這樣每完成一項自己開發的功能，就得到一點成就感，或許就是網頁開發迷人的地方，就算整天都在整理這個不知道會不會被看到的小東西，卻也不覺得疲乏，大概就是這樣我才選擇成為前端工程師(雖然我現在一直在玩Node.js...)\n\n從上面的表就可以看到，目前還有一些未完成的功能，也有一些雖然看起來完成的項目，其實也只是做個暫時的walk around，像是我一直想解決如何做一個administrator的schema、如何把評論系統做成nested comment、發文的圖片上傳插入功能、如何套用markdown view engine等等，這些功能很有趣，但基於時間的考量暫且擱置。\n\n以下就讓我們來看一下半成品的畫面：\n### (1)歡迎頁\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/wGuxnASyRva36RXVfjYV_Screen%20Shot%202017-04-06%20at%208.11.13%20PM.png\">\n\n歡迎頁是參考課程助教Ian的[background-slide](https://github.com/nax3t/background-slider)來實作，是一些CSS animation的操作，比較有趣的是原來背景投影片使用\\<li\\>的tag來排序：\n```\n.slideshow li {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-size: cover;\n  background-position: 50% 50%;\n  background-repeat: no-repeat;\n  opacity: 0;\n  z-index: 0;\n  animation: imageAnimation 60s linear infinite;\n}\n```\n再暫時套用幾張Pixabay的CC0高解析圖片，莫名的就很有質感。\n<br>\n### (2)文章列表\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/oCwwF7REKt8w22RUhYlA_Screen%20Shot%202017-04-06%20at%209.20.54%20PM.png\">\n\n由於Bootstrap中喜歡的套件不多，所以我又引入Semantic UI來做一些styling，目前整體的畫面還是稍微粗糙，未來在重構時打算將小元件與背景色系統一，或許再把歡迎頁與主頁的header合併。\n\n在實作這整個部落格時，常常需要切版與調整font-size，這時原本不熟練的Google Chrome DevTools都慢慢地上手了，感覺像修改style有playground的感覺，再直接套到主CSS檔即可完成，不過目前全部集中在同一隻main.css中，算是之後需要重構的地方。\n\n這裡要特別提一下最上方的Navbar，RWD與burger button是原本YelpCamp就有的功能，不過要讓它浮動在最上方倒是加上了一些jQuery來實作，甚至額外又加上去的回到頂端功能也是jQuery，一直有一個哪天用React重構成SPA的想法，不知道到時候會不會整個view都要砍掉重練(汗...)\n<br>\n### (3)文章與評論\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/gAKzRm5nTma43rAL23nJ_Screen%20Shot%202017-04-06%20at%209.34.07%20PM.png\">\n\n時間的部分使用了[Moment.js](https://momentjs.com/)，其中遇到的問題是前幾天deploy時，資料庫的所在地是美國，所以需要再另外加上時區的API才能正確顯示+8的時間：\n```\n<%= moment.tz(post.created, 'Asia/Taipei').format('MMM Do YYYY') %> | <%= moment.tz(post.created, 'Asia/Taipei').format('hh:mm:ss a') %>\n```\n以及讓文章在文章列表能依發布時間反向堆疊也是做了一點手腳：\n```\n<% posts.reverse().forEach(function(post){%>\n```\n而一定要提的就是評論的部分，因為在schema部分是接在每篇文章後，不禁讓我想到那段被多維指標陣列荼毒的日子，雖然這是個稍微複雜的功能，但後來發現沒有nested reply整個就是很不滿意，大可直接套用DISQUS即可(還可以貼圖片哩)。又因為我也還沒實作修改個人資料等功能，若把我的評論系統拿掉的話，遊客註冊會員就變成一個雞肋的存在了，所以暫時放著以示我是真的會做，之後打算仿照DISQUS來做一套schema。\n<br>\n## 部署選擇\n關於部署(Deploy)平台有兩個選擇，之前放demo作品的Heroku與從頭自己來的AWS EC2，稍微研究了一下Heroku的收費方案，如果用免費的package，每次要開啟網站時還得先等一段叫醒server的時間，整個UX可能沒那麼好。於是這兩天我一直在玩AWS EC2的部署，意外地沒那麼難，不過也是零零散散搜集了一些2010~2014年間「EC2 nodejs deploy」之類的文章才終於架好，實在有必要在[筆記一篇](http://dez.logdown.com/posts/2017/04/07/aws-ec2-deploy-nodejs-web-app)2017年版的，供未來健忘的我與入門的人們做參考。\n\n目前部署的成果有以下兩個：\n* Heroku: [http://deztwblog.herokuapp.com/](http://deztwblog.herokuapp.com/)\n* AWS EC2: [http://52.197.26.179/](http://52.197.26.179/)\n\n之後打算再去買個網域與更換比較好用的資料庫方案，目前是暫時使用[mLab](https://mlab.com/)的免費方案，之後打算來研究AWS S3與DynamoDB，或是尋找一個比較好的MongoDB部署平台，從這邊開始感受到全端一條龍兩頭燒的感覺啊...\n<br>\n## 後記\n或許這個看似陽春的部落格並不難做，可以套套版型不用幾天就能完成，但想想我也是從頭到尾用sublime刻出來的，容我稱呼自己為「那個造輪子的魔術師」吧！\n\n最近後端玩得太久了，差不多該開始把當初還沒看完的React再起爐灶，之後會趁著想玩點新東西時把「暫時不做的功能」補完，也有打算利用這個部落格為模板，做為我練習React的作品，如果可以做成SPA、ajax應該會很酷。\n\n目前需要再補上React Router、Flux、Redux、ImmutableJS、Isomorphic等等的技能，之後可能就會開始多一些討論React相關的文章了！\n\n### Apr. 13th更新\n還可以再利用Gulp來優化網站，[參考文章](http://ithelp.ithome.com.tw/articles/10185976)。\n\n<br>\n\n## Reference\n* [The Web Developer Bootcamp](https://www.udemy.com/the-web-developer-bootcamp/)\n* [Pala.tw - Udemy與網頁設計課程推薦](http://pala.tw/learn-web-development-on-udemy/#course_4)\n* [Full Screen Background Image Slider](https://github.com/nax3t/background-slider)\n","slug":"20170406-2215_nodjs-blog","published":1,"updated":"2017-06-24T05:58:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs460003474u67tu9ayw","content":"<p>首先先附上成果： <a href=\"http://52.197.26.179/\" target=\"_blank\" rel=\"external\">http://52.197.26.179/</a>，這是還沒買網域的AWS EC2網址，請安心前往。</p>\n<br>\n<h2 id=\"前言\">前言</h2>\n<p>由於一直想架一個部落格，雖然辦了logdown還是覺得手癢，趁著最近需要弄些作品集，決定把之前在Udemy的<a href=\"https://www.udemy.com/the-web-developer-bootcamp/\" target=\"_blank\" rel=\"external\">The Web Developer Bootcamp</a>課程中，還未完成的「YelpCamp實作」學完，並剛好利用這個版型，自己重構成專屬的部落格。</p>\n<p>這門課是之前原本打算學Python時，偶然從<a href=\"http://pala.tw/learn-web-development-on-udemy/#course_4\" target=\"_blank\" rel=\"external\">Pala.tw</a>得知的網頁開發入門，也正式讓我的學習步入正軌。從最基本的前端HTML/CSS/Javascript/jQuery，到後端Node.js/Express/MongoDB/Authentication/Flash Message等等，雖然並沒有時下最潮React，但算是能讓初學者從前到後打通任督二脈的課程，由於課程內容非常豐富，前前後後斷斷續續我就這樣學了半年，直至近一個月，卯起來把最後的後端功能補齊，正式完成了YelpCamp project。<br>\n<br><br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/rjYLXicrTGOgG4xRq0NQ_Screen%20Shot%202017-04-06%20at%208.30.23%20PM.png\"><br>\n<br><br>\n這個YelpCamp練習，後端的功能含有註冊登入等Authentication、文章與評論的新增修改刪除，剛好是個很適合改造成部落格的版型，大概在兩個禮拜前開工，在改造前腦力激盪了許多需要設計與新增的功能：<br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/XW9Bx3L8Rgd87bV4mOHA_Screen%20Shot%202017-04-06%20at%208.59.02%20PM.png\"><br>\n<br></p>\n<h2 id=\"模仿與重構\">模仿與重構</h2>\n<p>實際上自己動手做才是挑戰的開始，想不出來的問題，沒有課程錄影可以直接給解答，只能常常把chrome開滿滿的分頁，自己挖每一個問題的解法，不過這樣每完成一項自己開發的功能，就得到一點成就感，或許就是網頁開發迷人的地方，就算整天都在整理這個不知道會不會被看到的小東西，卻也不覺得疲乏，大概就是這樣我才選擇成為前端工程師(雖然我現在一直在玩Node.js…)</p>\n<p>從上面的表就可以看到，目前還有一些未完成的功能，也有一些雖然看起來完成的項目，其實也只是做個暫時的walk around，像是我一直想解決如何做一個administrator的schema、如何把評論系統做成nested comment、發文的圖片上傳插入功能、如何套用markdown view engine等等，這些功能很有趣，但基於時間的考量暫且擱置。</p>\n<p>以下就讓我們來看一下半成品的畫面：</p>\n<h3 id=\"1歡迎頁\">(1)歡迎頁</h3>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/wGuxnASyRva36RXVfjYV_Screen%20Shot%202017-04-06%20at%208.11.13%20PM.png\">\n<p>歡迎頁是參考課程助教Ian的<a href=\"https://github.com/nax3t/background-slider\" target=\"_blank\" rel=\"external\">background-slide</a>來實作，是一些CSS animation的操作，比較有趣的是原來背景投影片使用&lt;li&gt;的tag來排序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.slideshow li &#123;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  top: 0;</div><div class=\"line\">  left: 0;</div><div class=\"line\">  background-size: cover;</div><div class=\"line\">  background-position: 50% 50%;</div><div class=\"line\">  background-repeat: no-repeat;</div><div class=\"line\">  opacity: 0;</div><div class=\"line\">  z-index: 0;</div><div class=\"line\">  animation: imageAnimation 60s linear infinite;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再暫時套用幾張Pixabay的CC0高解析圖片，莫名的就很有質感。<br>\n<br></p>\n<h3 id=\"2文章列表\">(2)文章列表</h3>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/oCwwF7REKt8w22RUhYlA_Screen%20Shot%202017-04-06%20at%209.20.54%20PM.png\">\n<p>由於Bootstrap中喜歡的套件不多，所以我又引入Semantic UI來做一些styling，目前整體的畫面還是稍微粗糙，未來在重構時打算將小元件與背景色系統一，或許再把歡迎頁與主頁的header合併。</p>\n<p>在實作這整個部落格時，常常需要切版與調整font-size，這時原本不熟練的Google Chrome DevTools都慢慢地上手了，感覺像修改style有playground的感覺，再直接套到主CSS檔即可完成，不過目前全部集中在同一隻main.css中，算是之後需要重構的地方。</p>\n<p>這裡要特別提一下最上方的Navbar，RWD與burger button是原本YelpCamp就有的功能，不過要讓它浮動在最上方倒是加上了一些jQuery來實作，甚至額外又加上去的回到頂端功能也是jQuery，一直有一個哪天用React重構成SPA的想法，不知道到時候會不會整個view都要砍掉重練(汗…)<br>\n<br></p>\n<h3 id=\"3文章與評論\">(3)文章與評論</h3>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/gAKzRm5nTma43rAL23nJ_Screen%20Shot%202017-04-06%20at%209.34.07%20PM.png\">\n<p>時間的部分使用了<a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"external\">Moment.js</a>，其中遇到的問題是前幾天deploy時，資料庫的所在地是美國，所以需要再另外加上時區的API才能正確顯示+8的時間：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%= moment.tz(post.created, &apos;Asia/Taipei&apos;).format(&apos;MMM Do YYYY&apos;) %&gt; | &lt;%= moment.tz(post.created, &apos;Asia/Taipei&apos;).format(&apos;hh:mm:ss a&apos;) %&gt;</div></pre></td></tr></table></figure>\n<p>以及讓文章在文章列表能依發布時間反向堆疊也是做了一點手腳：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% posts.reverse().forEach(function(post)&#123;%&gt;</div></pre></td></tr></table></figure>\n<p>而一定要提的就是評論的部分，因為在schema部分是接在每篇文章後，不禁讓我想到那段被多維指標陣列荼毒的日子，雖然這是個稍微複雜的功能，但後來發現沒有nested reply整個就是很不滿意，大可直接套用DISQUS即可(還可以貼圖片哩)。又因為我也還沒實作修改個人資料等功能，若把我的評論系統拿掉的話，遊客註冊會員就變成一個雞肋的存在了，所以暫時放著以示我是真的會做，之後打算仿照DISQUS來做一套schema。<br>\n<br></p>\n<h2 id=\"部署選擇\">部署選擇</h2>\n<p>關於部署(Deploy)平台有兩個選擇，之前放demo作品的Heroku與從頭自己來的AWS EC2，稍微研究了一下Heroku的收費方案，如果用免費的package，每次要開啟網站時還得先等一段叫醒server的時間，整個UX可能沒那麼好。於是這兩天我一直在玩AWS EC2的部署，意外地沒那麼難，不過也是零零散散搜集了一些2010~2014年間「EC2 nodejs deploy」之類的文章才終於架好，實在有必要在<a href=\"http://dez.logdown.com/posts/2017/04/07/aws-ec2-deploy-nodejs-web-app\" target=\"_blank\" rel=\"external\">筆記一篇</a>2017年版的，供未來健忘的我與入門的人們做參考。</p>\n<p>目前部署的成果有以下兩個：</p>\n<ul>\n<li>Heroku: <a href=\"http://deztwblog.herokuapp.com/\" target=\"_blank\" rel=\"external\">http://deztwblog.herokuapp.com/</a></li>\n<li>AWS EC2: <a href=\"http://52.197.26.179/\" target=\"_blank\" rel=\"external\">http://52.197.26.179/</a></li>\n</ul>\n<p>之後打算再去買個網域與更換比較好用的資料庫方案，目前是暫時使用<a href=\"https://mlab.com/\" target=\"_blank\" rel=\"external\">mLab</a>的免費方案，之後打算來研究AWS S3與DynamoDB，或是尋找一個比較好的MongoDB部署平台，從這邊開始感受到全端一條龍兩頭燒的感覺啊…<br>\n<br></p>\n<h2 id=\"後記\">後記</h2>\n<p>或許這個看似陽春的部落格並不難做，可以套套版型不用幾天就能完成，但想想我也是從頭到尾用sublime刻出來的，容我稱呼自己為「那個造輪子的魔術師」吧！</p>\n<p>最近後端玩得太久了，差不多該開始把當初還沒看完的React再起爐灶，之後會趁著想玩點新東西時把「暫時不做的功能」補完，也有打算利用這個部落格為模板，做為我練習React的作品，如果可以做成SPA、ajax應該會很酷。</p>\n<p>目前需要再補上React Router、Flux、Redux、ImmutableJS、Isomorphic等等的技能，之後可能就會開始多一些討論React相關的文章了！</p>\n<h3 id=\"apr-13th更新\">Apr. 13th更新</h3>\n<p>還可以再利用Gulp來優化網站，<a href=\"http://ithelp.ithome.com.tw/articles/10185976\" target=\"_blank\" rel=\"external\">參考文章</a>。</p>\n<br>\n<h2 id=\"reference\">Reference</h2>\n<ul>\n<li><a href=\"https://www.udemy.com/the-web-developer-bootcamp/\" target=\"_blank\" rel=\"external\">The Web Developer Bootcamp</a></li>\n<li><a href=\"http://pala.tw/learn-web-development-on-udemy/#course_4\" target=\"_blank\" rel=\"external\">Pala.tw - Udemy與網頁設計課程推薦</a></li>\n<li><a href=\"https://github.com/nax3t/background-slider\" target=\"_blank\" rel=\"external\">Full Screen Background Image Slider</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>首先先附上成果： <a href=\"http://52.197.26.179/\" target=\"_blank\" rel=\"external\">http://52.197.26.179/</a>，這是還沒買網域的AWS EC2網址，請安心前往。</p>\n<br>\n<h2>前言</h2>\n<p>由於一直想架一個部落格，雖然辦了logdown還是覺得手癢，趁著最近需要弄些作品集，決定把之前在Udemy的<a href=\"https://www.udemy.com/the-web-developer-bootcamp/\" target=\"_blank\" rel=\"external\">The Web Developer Bootcamp</a>課程中，還未完成的「YelpCamp實作」學完，並剛好利用這個版型，自己重構成專屬的部落格。</p>\n<p>這門課是之前原本打算學Python時，偶然從<a href=\"http://pala.tw/learn-web-development-on-udemy/#course_4\" target=\"_blank\" rel=\"external\">Pala.tw</a>得知的網頁開發入門，也正式讓我的學習步入正軌。從最基本的前端HTML/CSS/Javascript/jQuery，到後端Node.js/Express/MongoDB/Authentication/Flash Message等等，雖然並沒有時下最潮React，但算是能讓初學者從前到後打通任督二脈的課程，由於課程內容非常豐富，前前後後斷斷續續我就這樣學了半年，直至近一個月，卯起來把最後的後端功能補齊，正式完成了YelpCamp project。<br>\n<br><br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/rjYLXicrTGOgG4xRq0NQ_Screen%20Shot%202017-04-06%20at%208.30.23%20PM.png\"><br>\n<br><br>\n這個YelpCamp練習，後端的功能含有註冊登入等Authentication、文章與評論的新增修改刪除，剛好是個很適合改造成部落格的版型，大概在兩個禮拜前開工，在改造前腦力激盪了許多需要設計與新增的功能：<br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/XW9Bx3L8Rgd87bV4mOHA_Screen%20Shot%202017-04-06%20at%208.59.02%20PM.png\"><br>\n<br></p>\n<h2>模仿與重構</h2>\n<p>實際上自己動手做才是挑戰的開始，想不出來的問題，沒有課程錄影可以直接給解答，只能常常把chrome開滿滿的分頁，自己挖每一個問題的解法，不過這樣每完成一項自己開發的功能，就得到一點成就感，或許就是網頁開發迷人的地方，就算整天都在整理這個不知道會不會被看到的小東西，卻也不覺得疲乏，大概就是這樣我才選擇成為前端工程師(雖然我現在一直在玩Node.js…)</p>\n<p>從上面的表就可以看到，目前還有一些未完成的功能，也有一些雖然看起來完成的項目，其實也只是做個暫時的walk around，像是我一直想解決如何做一個administrator的schema、如何把評論系統做成nested comment、發文的圖片上傳插入功能、如何套用markdown view engine等等，這些功能很有趣，但基於時間的考量暫且擱置。</p>\n<p>以下就讓我們來看一下半成品的畫面：</p>\n<h3>(1)歡迎頁</h3>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/wGuxnASyRva36RXVfjYV_Screen%20Shot%202017-04-06%20at%208.11.13%20PM.png\">\n<p>歡迎頁是參考課程助教Ian的<a href=\"https://github.com/nax3t/background-slider\" target=\"_blank\" rel=\"external\">background-slide</a>來實作，是一些CSS animation的操作，比較有趣的是原來背景投影片使用&lt;li&gt;的tag來排序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.slideshow li &#123;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  top: 0;</div><div class=\"line\">  left: 0;</div><div class=\"line\">  background-size: cover;</div><div class=\"line\">  background-position: 50% 50%;</div><div class=\"line\">  background-repeat: no-repeat;</div><div class=\"line\">  opacity: 0;</div><div class=\"line\">  z-index: 0;</div><div class=\"line\">  animation: imageAnimation 60s linear infinite;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再暫時套用幾張Pixabay的CC0高解析圖片，莫名的就很有質感。<br>\n<br></p>\n<h3>(2)文章列表</h3>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/oCwwF7REKt8w22RUhYlA_Screen%20Shot%202017-04-06%20at%209.20.54%20PM.png\">\n<p>由於Bootstrap中喜歡的套件不多，所以我又引入Semantic UI來做一些styling，目前整體的畫面還是稍微粗糙，未來在重構時打算將小元件與背景色系統一，或許再把歡迎頁與主頁的header合併。</p>\n<p>在實作這整個部落格時，常常需要切版與調整font-size，這時原本不熟練的Google Chrome DevTools都慢慢地上手了，感覺像修改style有playground的感覺，再直接套到主CSS檔即可完成，不過目前全部集中在同一隻main.css中，算是之後需要重構的地方。</p>\n<p>這裡要特別提一下最上方的Navbar，RWD與burger button是原本YelpCamp就有的功能，不過要讓它浮動在最上方倒是加上了一些jQuery來實作，甚至額外又加上去的回到頂端功能也是jQuery，一直有一個哪天用React重構成SPA的想法，不知道到時候會不會整個view都要砍掉重練(汗…)<br>\n<br></p>\n<h3>(3)文章與評論</h3>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1675245/gAKzRm5nTma43rAL23nJ_Screen%20Shot%202017-04-06%20at%209.34.07%20PM.png\">\n<p>時間的部分使用了<a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"external\">Moment.js</a>，其中遇到的問題是前幾天deploy時，資料庫的所在地是美國，所以需要再另外加上時區的API才能正確顯示+8的時間：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%= moment.tz(post.created, &apos;Asia/Taipei&apos;).format(&apos;MMM Do YYYY&apos;) %&gt; | &lt;%= moment.tz(post.created, &apos;Asia/Taipei&apos;).format(&apos;hh:mm:ss a&apos;) %&gt;</div></pre></td></tr></table></figure>\n<p>以及讓文章在文章列表能依發布時間反向堆疊也是做了一點手腳：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% posts.reverse().forEach(function(post)&#123;%&gt;</div></pre></td></tr></table></figure>\n<p>而一定要提的就是評論的部分，因為在schema部分是接在每篇文章後，不禁讓我想到那段被多維指標陣列荼毒的日子，雖然這是個稍微複雜的功能，但後來發現沒有nested reply整個就是很不滿意，大可直接套用DISQUS即可(還可以貼圖片哩)。又因為我也還沒實作修改個人資料等功能，若把我的評論系統拿掉的話，遊客註冊會員就變成一個雞肋的存在了，所以暫時放著以示我是真的會做，之後打算仿照DISQUS來做一套schema。<br>\n<br></p>\n<h2>部署選擇</h2>\n<p>關於部署(Deploy)平台有兩個選擇，之前放demo作品的Heroku與從頭自己來的AWS EC2，稍微研究了一下Heroku的收費方案，如果用免費的package，每次要開啟網站時還得先等一段叫醒server的時間，整個UX可能沒那麼好。於是這兩天我一直在玩AWS EC2的部署，意外地沒那麼難，不過也是零零散散搜集了一些2010~2014年間「EC2 nodejs deploy」之類的文章才終於架好，實在有必要在<a href=\"http://dez.logdown.com/posts/2017/04/07/aws-ec2-deploy-nodejs-web-app\" target=\"_blank\" rel=\"external\">筆記一篇</a>2017年版的，供未來健忘的我與入門的人們做參考。</p>\n<p>目前部署的成果有以下兩個：</p>\n<ul>\n<li>Heroku: <a href=\"http://deztwblog.herokuapp.com/\" target=\"_blank\" rel=\"external\">http://deztwblog.herokuapp.com/</a></li>\n<li>AWS EC2: <a href=\"http://52.197.26.179/\" target=\"_blank\" rel=\"external\">http://52.197.26.179/</a></li>\n</ul>\n<p>之後打算再去買個網域與更換比較好用的資料庫方案，目前是暫時使用<a href=\"https://mlab.com/\" target=\"_blank\" rel=\"external\">mLab</a>的免費方案，之後打算來研究AWS S3與DynamoDB，或是尋找一個比較好的MongoDB部署平台，從這邊開始感受到全端一條龍兩頭燒的感覺啊…<br>\n<br></p>\n<h2>後記</h2>\n<p>或許這個看似陽春的部落格並不難做，可以套套版型不用幾天就能完成，但想想我也是從頭到尾用sublime刻出來的，容我稱呼自己為「那個造輪子的魔術師」吧！</p>\n<p>最近後端玩得太久了，差不多該開始把當初還沒看完的React再起爐灶，之後會趁著想玩點新東西時把「暫時不做的功能」補完，也有打算利用這個部落格為模板，做為我練習React的作品，如果可以做成SPA、ajax應該會很酷。</p>\n<p>目前需要再補上React Router、Flux、Redux、ImmutableJS、Isomorphic等等的技能，之後可能就會開始多一些討論React相關的文章了！</p>\n<h3>Apr. 13th更新</h3>\n<p>還可以再利用Gulp來優化網站，<a href=\"http://ithelp.ithome.com.tw/articles/10185976\" target=\"_blank\" rel=\"external\">參考文章</a>。</p>\n<br>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://www.udemy.com/the-web-developer-bootcamp/\" target=\"_blank\" rel=\"external\">The Web Developer Bootcamp</a></li>\n<li><a href=\"http://pala.tw/learn-web-development-on-udemy/#course_4\" target=\"_blank\" rel=\"external\">Pala.tw - Udemy與網頁設計課程推薦</a></li>\n<li><a href=\"https://github.com/nax3t/background-slider\" target=\"_blank\" rel=\"external\">Full Screen Background Image Slider</a></li>\n</ul>\n"},{"title":"筆記｜在AWS EC2部署Node.js web教學","catalog":true,"date":"2017-04-09T04:22:00.000Z","subtitle":"趁著記憶還新鮮，把這幾天蒐集關於「AWS EC2部署Node.js網頁應用程式」的步驟資訊都整理在這一篇，提供未來健忘的我以及路過的人們參考。","header-img":"../../../../img/header_img/bg.png","_content":"\n續前一篇所提到的部署平台選擇，雖然網路上可以找到蠻多寫得很仔細的教學，但整個流程還是需要從不同的文件查找，所以就汲取每一篇的精華整理在一起，不管是官方文件、其他人的分享等等，並利用自己的話紀錄「在AWS EC2部署Node.js網頁應用程式的步驟」，分成以下幾大項：\n* AWS EC2部署\n    1. 註冊與Launch Instance\n    2. IP綁定與登入主機\n    3. 在主機上設定Node.js環境\n    4. 開始運作Node.js網頁應用\n* Troubleshooting\n* 後記\n* References\n\n***\n\n## AWS EC2部署\n\n### 註冊與Launch Instance\n\n1. 註冊AWS帳號與認證\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/gElEfHeJS92ysNb8sN7B_001.png\">\n首先當然需至[AWS](https://aws.amazon.com/tw/)註冊一個帳號，填完基本資料後，會需要完成信用卡認證以及電話認證。\n\n需要注意的是電話認證的部分，在請系統打電話給你時，需注意用`清楚的英文念出四位PIN碼`，即可認證通過(一開始用keypad輸入試了好幾次都失敗，最後還超過了驗證次數)，最後選擇免費方案即完成註冊。\n\n2. 進入主控台後，在左上角的Services中選擇EC2\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/2qM9nOYDRMOZ6uuP4a8b_002.png\">\n\n3. 在EC2主頁處(EC2 Dashboard)，選擇`Launch Instance`\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/B2ifMovVQk23naxOOI2o_003.png\">\n\n在Launch前稍微提一下，可以從右上角的地方選擇Tokyo，這樣在台灣的[反應時間會比較快](http://www.vedfolnir.com/aws-amazon-web-services-location-choice-7368.html)。\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/v3dNytJcQt2QRezM6RTM_004.png\">\n\n4. 選擇作業系統，這裡使用`Amazon Linux AMI 64-bit`\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/TEZmtpwQ5KtZo7W6dDge_005.png\">\n\n5. 選擇主機類型，使用免費方案`t2.micro`\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/XgrMGlowSeOefaYJq7sQ_006.png\">\n\n6. 其他設定\n\n* Add Tags，可以自行增加tag方便管理\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/ISZDht7FTfuN1KIqdP0x_007.png\">\n\n* Configure Security Group，加入SSH/HTTP/HTTPS的設定如下：\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/j610JezeSWaQvsAK2npx_008.png\">\n\n這裡HTTP(80)與HTTPS(443)兩個port的Source都打開為`Anywhere`(::/0為IPV6的格式)，這樣才能讓全世界連進來;至於SSH(22)這個是管理者自己在後台開發所使用的port，所以我將它設為`My IP`，至於怎麼設定比較安全需要研究下。\n\n\n7. Review與下載keypair\n最後Review確定設定無誤，按下Launch。此時會跳出keypair的視窗，這是等等需要拿來登入後台的key file，選擇`Create a new key pair`，並輸入你想取的名字並下載保存好，再按下`Launch Instances`即完成launch的步驟。\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/h3HSNNLdTiumdIFnUpOR_009.png\">\n\n### IP綁定與登入主機\n\n1. Allocate新IP\n\n* 點一旁的`Elastic IPs`，並點選`Allocate new address`\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/QdnpL6GhTZSe7sUa9mIc_010.png\">\n\n* 再點選`Allocate`即可得到一個IP如下示意：\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/j0f5xwotROiV1hELoUDV_011.png\">\n\n2. Associate address到Instance\n\n* 對著新建IP按右鍵後，點選Associate address\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/ltKkdIk6RCW3Nvqz6UmG_012.png\">\n\n* 選擇剛剛建立的Instance後，點選Associate即完成IP綁定\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/ZS5XrQhQeOLxbS1qFJYx_013.png\">\n\n\n3. 回到左方Instances標籤，即可看到全部設定的review\n以我的deztwblog為例，此時複製剛剛綁定的`Public IP`：\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/tTETSUVhQGuOTHstsvc7_014.png\">\n\n4. 打開terminal，輸入command後即可登入主機\n\n```\nssh -i [key.pem] -l ec2-user [your public IP]\n```\n\n其中`key.pem`使用你剛剛下載下來的key file絕對路徑，`your public IP`使用上一步複製的IP，`ec2-user`為預設登入帳號\n\n5. 其他設定\n* 建議可以在`.bashrc`(或像我是用`.zshrc`)中加入alias，即可使用指令快速登入\n\n```\nalias sshAWS='ssh -i [key.pem] -l ec2-user [your public IP]'\n```\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/Grj8Q7tRGCGm8J13JUXA_015.png\">\n\n* 也可以從Filezilla登入直接從local端傳檔案\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/9ojSN3KUTTist2b176Cc_017.png\">\n\n### 在主機上設定Node.js環境\n\n(建議可以參考[AWS Tutorial](http://docs.aws.amazon.com/zh_cn/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html))\n\n1. 由於之後會使用screen來常駐執行server，所以以下全程使用root來安裝\n\n```\nsudo -i\n```\n\n2. 安裝NVM\n建議是使用NVM來安裝Node.js，如此還可方便做Node版本切換\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash\n```\n\n\n3. 使用以下command啟動NVM\n\n```\n. ~/.nvm/nvm.sh\n```\n\n4. 安裝你所需要的Node版本\n\n* 這裡可以先在本機查看自己local開發的node version\n\n```\nnode -v\n```\n\n* 再到EC2主機安裝你所需要的版本\n\n```\nnvm install 6.10.0\n```\n\n5. 使用以下指令確認安裝成功與版本\n\n```\nnode -e \"console.log('Running Node.js ' + process.version)\"\n```\n\n6. 可能需要的其他設定\n\n* 檢查更新\n\n```\nsudo yum update\n```\n\n* 安裝git\n\n```\nsudo yum install git\n```\n\n* 在AWS EC2主機上設定`.bashrc`(optional)\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/cAE7B1JpQgm3gMvHRdj4_016.png\">\n\n### 開始運作Node.js網頁應用\n\n1. 上傳專案source code到EC2主機上\n這邊我是直接從Github上將自己的code git clone下來，或者你也可以利用FTP來上傳code。\n\n2. 執行screen，主機上預設是有安裝screen\n\n```\nscreen\n```\n\n3. 執行你的Node主程式\n\n```\nnode index.js\n```\n\n`ctrl + a`然後`d`來做screen的detach後，即可讓自己的網站應用always on，不過感覺上用screen不太像是標準的作法，或許還有更好的方法。\n\n4. 到網頁輸入你的public IP，即可看到成果\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/M3l7RB4iTymmmFd2Wsfo_018.png\">\n\n## Troubleshooting\n\n* 針對AWS Security Group設定如何做比較安全？\n* 在EC2主機上run `node index.js`時，除了用screen有什麼更好的做法？\n\n\n## 後記\n在EC2部署完後，算是正式讓這個作品上線了，試著將logdown的文章貼過去，圖片的展示卻是未達「開發者體驗」的滿意標準，更別說UX了，這時又覺得logdown真的是應有盡有。\n\n不過所謂萬事起頭難，既然已經起了個頭，讓它漸入佳境也只是時間上的問題，想想Facebook也是[隨著時間成長](https://www.quora.com/How-has-Facebooks-UI-changed-over-time)來著，接下來就是把Dez.tw用React重構了。\n\n\n## References\n* [Amazon Web Services AWS 伺服器機房的區域選擇](http://www.vedfolnir.com/aws-amazon-web-services-location-choice-7368.html)\n* [Tutorial: Setting Up Node.js on an Amazon EC2 Instance](http://docs.aws.amazon.com/zh_cn/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html)\n* [[教學]十分鐘快速建立Amazon EC2免費主機](https://blog.json.tw/teaching-ten-minutes-to-quickly-build-a-free-amazon-ec2-host)\n* [在Amazon EC2 上部署node.js應用](http://fanli7.net/a/bianchengyuyan/C__/20130126/297941.html)\n\n\n## 5/4補充\n今天突然收到AWS寄Bill給我，其中有兩項被收費：\n* `$0.05 per GB-Month of snapshot data stored - Asia Pacific (Tokyo)   1.058 GB-Mo $0.05`\n參考[這篇](https://aws.amazon.com/premiumsupport/knowledge-center/snapshot-in-use-error/)把快照刪除，希望下個月不會再收到Bill...\n\n* `$0.005 per Elastic IP address not attached to a running instance per hour (prorated)    568.400 Hrs $2.84`\n參考[這篇](http://stackoverflow.com/questions/12913278/keeping-ec2-free-instances-free)，原來是有多申請一個閒置的靜態IP，結果忘了release，就被白白收費了！\n","source":"_posts/20170409-1222_aws-ec2-deploy-nodejs.md","raw":"---\ntitle: 筆記｜在AWS EC2部署Node.js web教學\ncatalog: true\ndate: 2017-04-09 12:22:00\nsubtitle: 趁著記憶還新鮮，把這幾天蒐集關於「AWS EC2部署Node.js網頁應用程式」的步驟資訊都整理在這一篇，提供未來健忘的我以及路過的人們參考。\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - AWS\n    - EC2\n    - Node\n    - deploy\n    - 部署\n    - 教學\n    - 筆記\n---\n\n續前一篇所提到的部署平台選擇，雖然網路上可以找到蠻多寫得很仔細的教學，但整個流程還是需要從不同的文件查找，所以就汲取每一篇的精華整理在一起，不管是官方文件、其他人的分享等等，並利用自己的話紀錄「在AWS EC2部署Node.js網頁應用程式的步驟」，分成以下幾大項：\n* AWS EC2部署\n    1. 註冊與Launch Instance\n    2. IP綁定與登入主機\n    3. 在主機上設定Node.js環境\n    4. 開始運作Node.js網頁應用\n* Troubleshooting\n* 後記\n* References\n\n***\n\n## AWS EC2部署\n\n### 註冊與Launch Instance\n\n1. 註冊AWS帳號與認證\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/gElEfHeJS92ysNb8sN7B_001.png\">\n首先當然需至[AWS](https://aws.amazon.com/tw/)註冊一個帳號，填完基本資料後，會需要完成信用卡認證以及電話認證。\n\n需要注意的是電話認證的部分，在請系統打電話給你時，需注意用`清楚的英文念出四位PIN碼`，即可認證通過(一開始用keypad輸入試了好幾次都失敗，最後還超過了驗證次數)，最後選擇免費方案即完成註冊。\n\n2. 進入主控台後，在左上角的Services中選擇EC2\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/2qM9nOYDRMOZ6uuP4a8b_002.png\">\n\n3. 在EC2主頁處(EC2 Dashboard)，選擇`Launch Instance`\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/B2ifMovVQk23naxOOI2o_003.png\">\n\n在Launch前稍微提一下，可以從右上角的地方選擇Tokyo，這樣在台灣的[反應時間會比較快](http://www.vedfolnir.com/aws-amazon-web-services-location-choice-7368.html)。\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/v3dNytJcQt2QRezM6RTM_004.png\">\n\n4. 選擇作業系統，這裡使用`Amazon Linux AMI 64-bit`\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/TEZmtpwQ5KtZo7W6dDge_005.png\">\n\n5. 選擇主機類型，使用免費方案`t2.micro`\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/XgrMGlowSeOefaYJq7sQ_006.png\">\n\n6. 其他設定\n\n* Add Tags，可以自行增加tag方便管理\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/ISZDht7FTfuN1KIqdP0x_007.png\">\n\n* Configure Security Group，加入SSH/HTTP/HTTPS的設定如下：\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/j610JezeSWaQvsAK2npx_008.png\">\n\n這裡HTTP(80)與HTTPS(443)兩個port的Source都打開為`Anywhere`(::/0為IPV6的格式)，這樣才能讓全世界連進來;至於SSH(22)這個是管理者自己在後台開發所使用的port，所以我將它設為`My IP`，至於怎麼設定比較安全需要研究下。\n\n\n7. Review與下載keypair\n最後Review確定設定無誤，按下Launch。此時會跳出keypair的視窗，這是等等需要拿來登入後台的key file，選擇`Create a new key pair`，並輸入你想取的名字並下載保存好，再按下`Launch Instances`即完成launch的步驟。\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/h3HSNNLdTiumdIFnUpOR_009.png\">\n\n### IP綁定與登入主機\n\n1. Allocate新IP\n\n* 點一旁的`Elastic IPs`，並點選`Allocate new address`\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/QdnpL6GhTZSe7sUa9mIc_010.png\">\n\n* 再點選`Allocate`即可得到一個IP如下示意：\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/j0f5xwotROiV1hELoUDV_011.png\">\n\n2. Associate address到Instance\n\n* 對著新建IP按右鍵後，點選Associate address\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/ltKkdIk6RCW3Nvqz6UmG_012.png\">\n\n* 選擇剛剛建立的Instance後，點選Associate即完成IP綁定\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/ZS5XrQhQeOLxbS1qFJYx_013.png\">\n\n\n3. 回到左方Instances標籤，即可看到全部設定的review\n以我的deztwblog為例，此時複製剛剛綁定的`Public IP`：\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/tTETSUVhQGuOTHstsvc7_014.png\">\n\n4. 打開terminal，輸入command後即可登入主機\n\n```\nssh -i [key.pem] -l ec2-user [your public IP]\n```\n\n其中`key.pem`使用你剛剛下載下來的key file絕對路徑，`your public IP`使用上一步複製的IP，`ec2-user`為預設登入帳號\n\n5. 其他設定\n* 建議可以在`.bashrc`(或像我是用`.zshrc`)中加入alias，即可使用指令快速登入\n\n```\nalias sshAWS='ssh -i [key.pem] -l ec2-user [your public IP]'\n```\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/Grj8Q7tRGCGm8J13JUXA_015.png\">\n\n* 也可以從Filezilla登入直接從local端傳檔案\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/9ojSN3KUTTist2b176Cc_017.png\">\n\n### 在主機上設定Node.js環境\n\n(建議可以參考[AWS Tutorial](http://docs.aws.amazon.com/zh_cn/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html))\n\n1. 由於之後會使用screen來常駐執行server，所以以下全程使用root來安裝\n\n```\nsudo -i\n```\n\n2. 安裝NVM\n建議是使用NVM來安裝Node.js，如此還可方便做Node版本切換\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash\n```\n\n\n3. 使用以下command啟動NVM\n\n```\n. ~/.nvm/nvm.sh\n```\n\n4. 安裝你所需要的Node版本\n\n* 這裡可以先在本機查看自己local開發的node version\n\n```\nnode -v\n```\n\n* 再到EC2主機安裝你所需要的版本\n\n```\nnvm install 6.10.0\n```\n\n5. 使用以下指令確認安裝成功與版本\n\n```\nnode -e \"console.log('Running Node.js ' + process.version)\"\n```\n\n6. 可能需要的其他設定\n\n* 檢查更新\n\n```\nsudo yum update\n```\n\n* 安裝git\n\n```\nsudo yum install git\n```\n\n* 在AWS EC2主機上設定`.bashrc`(optional)\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/cAE7B1JpQgm3gMvHRdj4_016.png\">\n\n### 開始運作Node.js網頁應用\n\n1. 上傳專案source code到EC2主機上\n這邊我是直接從Github上將自己的code git clone下來，或者你也可以利用FTP來上傳code。\n\n2. 執行screen，主機上預設是有安裝screen\n\n```\nscreen\n```\n\n3. 執行你的Node主程式\n\n```\nnode index.js\n```\n\n`ctrl + a`然後`d`來做screen的detach後，即可讓自己的網站應用always on，不過感覺上用screen不太像是標準的作法，或許還有更好的方法。\n\n4. 到網頁輸入你的public IP，即可看到成果\n\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/M3l7RB4iTymmmFd2Wsfo_018.png\">\n\n## Troubleshooting\n\n* 針對AWS Security Group設定如何做比較安全？\n* 在EC2主機上run `node index.js`時，除了用screen有什麼更好的做法？\n\n\n## 後記\n在EC2部署完後，算是正式讓這個作品上線了，試著將logdown的文章貼過去，圖片的展示卻是未達「開發者體驗」的滿意標準，更別說UX了，這時又覺得logdown真的是應有盡有。\n\n不過所謂萬事起頭難，既然已經起了個頭，讓它漸入佳境也只是時間上的問題，想想Facebook也是[隨著時間成長](https://www.quora.com/How-has-Facebooks-UI-changed-over-time)來著，接下來就是把Dez.tw用React重構了。\n\n\n## References\n* [Amazon Web Services AWS 伺服器機房的區域選擇](http://www.vedfolnir.com/aws-amazon-web-services-location-choice-7368.html)\n* [Tutorial: Setting Up Node.js on an Amazon EC2 Instance](http://docs.aws.amazon.com/zh_cn/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html)\n* [[教學]十分鐘快速建立Amazon EC2免費主機](https://blog.json.tw/teaching-ten-minutes-to-quickly-build-a-free-amazon-ec2-host)\n* [在Amazon EC2 上部署node.js應用](http://fanli7.net/a/bianchengyuyan/C__/20130126/297941.html)\n\n\n## 5/4補充\n今天突然收到AWS寄Bill給我，其中有兩項被收費：\n* `$0.05 per GB-Month of snapshot data stored - Asia Pacific (Tokyo)   1.058 GB-Mo $0.05`\n參考[這篇](https://aws.amazon.com/premiumsupport/knowledge-center/snapshot-in-use-error/)把快照刪除，希望下個月不會再收到Bill...\n\n* `$0.005 per Elastic IP address not attached to a running instance per hour (prorated)    568.400 Hrs $2.84`\n參考[這篇](http://stackoverflow.com/questions/12913278/keeping-ec2-free-instances-free)，原來是有多申請一個閒置的靜態IP，結果忘了release，就被白白收費了！\n","slug":"20170409-1222_aws-ec2-deploy-nodejs","published":1,"updated":"2017-06-24T06:14:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs4e0006474uytuxgeul","content":"<p>續前一篇所提到的部署平台選擇，雖然網路上可以找到蠻多寫得很仔細的教學，但整個流程還是需要從不同的文件查找，所以就汲取每一篇的精華整理在一起，不管是官方文件、其他人的分享等等，並利用自己的話紀錄「在AWS EC2部署Node.js網頁應用程式的步驟」，分成以下幾大項：</p>\n<ul>\n<li>AWS EC2部署\n<ol>\n<li>註冊與Launch Instance</li>\n<li>IP綁定與登入主機</li>\n<li>在主機上設定Node.js環境</li>\n<li>開始運作Node.js網頁應用</li>\n</ol>\n</li>\n<li>Troubleshooting</li>\n<li>後記</li>\n<li>References</li>\n</ul>\n<hr>\n<h2 id=\"aws-ec2部署\">AWS EC2部署</h2>\n<h3 id=\"註冊與launch-instance\">註冊與Launch Instance</h3>\n<ol>\n<li>註冊AWS帳號與認證<br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/gElEfHeJS92ysNb8sN7B_001.png\"><br>\n首先當然需至<a href=\"https://aws.amazon.com/tw/\" target=\"_blank\" rel=\"external\">AWS</a>註冊一個帳號，填完基本資料後，會需要完成信用卡認證以及電話認證。</li>\n</ol>\n<p>需要注意的是電話認證的部分，在請系統打電話給你時，需注意用<code>清楚的英文念出四位PIN碼</code>，即可認證通過(一開始用keypad輸入試了好幾次都失敗，最後還超過了驗證次數)，最後選擇免費方案即完成註冊。</p>\n<ol start=\"2\">\n<li>\n<p>進入主控台後，在左上角的Services中選擇EC2<br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/2qM9nOYDRMOZ6uuP4a8b_002.png\"></p>\n</li>\n<li>\n<p>在EC2主頁處(EC2 Dashboard)，選擇<code>Launch Instance</code></p>\n</li>\n</ol>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/B2ifMovVQk23naxOOI2o_003.png\">\n<p>在Launch前稍微提一下，可以從右上角的地方選擇Tokyo，這樣在台灣的<a href=\"http://www.vedfolnir.com/aws-amazon-web-services-location-choice-7368.html\" target=\"_blank\" rel=\"external\">反應時間會比較快</a>。</p>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/v3dNytJcQt2QRezM6RTM_004.png\">\n<ol start=\"4\">\n<li>選擇作業系統，這裡使用<code>Amazon Linux AMI 64-bit</code></li>\n</ol>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/TEZmtpwQ5KtZo7W6dDge_005.png\">\n<ol start=\"5\">\n<li>選擇主機類型，使用免費方案<code>t2.micro</code></li>\n</ol>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/XgrMGlowSeOefaYJq7sQ_006.png\">\n<ol start=\"6\">\n<li>其他設定</li>\n</ol>\n<ul>\n<li>Add Tags，可以自行增加tag方便管理</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/ISZDht7FTfuN1KIqdP0x_007.png\">\n<ul>\n<li>Configure Security Group，加入SSH/HTTP/HTTPS的設定如下：</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/j610JezeSWaQvsAK2npx_008.png\">\n<p>這裡HTTP(80)與HTTPS(443)兩個port的Source都打開為<code>Anywhere</code>(::/0為IPV6的格式)，這樣才能讓全世界連進來;至於SSH(22)這個是管理者自己在後台開發所使用的port，所以我將它設為<code>My IP</code>，至於怎麼設定比較安全需要研究下。</p>\n<ol start=\"7\">\n<li>Review與下載keypair<br>\n最後Review確定設定無誤，按下Launch。此時會跳出keypair的視窗，這是等等需要拿來登入後台的key file，選擇<code>Create a new key pair</code>，並輸入你想取的名字並下載保存好，再按下<code>Launch Instances</code>即完成launch的步驟。</li>\n</ol>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/h3HSNNLdTiumdIFnUpOR_009.png\">\n<h3 id=\"ip綁定與登入主機\">IP綁定與登入主機</h3>\n<ol>\n<li>Allocate新IP</li>\n</ol>\n<ul>\n<li>\n<p>點一旁的<code>Elastic IPs</code>，並點選<code>Allocate new address</code><br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/QdnpL6GhTZSe7sUa9mIc_010.png\"></p>\n</li>\n<li>\n<p>再點選<code>Allocate</code>即可得到一個IP如下示意：</p>\n</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/j0f5xwotROiV1hELoUDV_011.png\">\n<ol start=\"2\">\n<li>Associate address到Instance</li>\n</ol>\n<ul>\n<li>對著新建IP按右鍵後，點選Associate address</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/ltKkdIk6RCW3Nvqz6UmG_012.png\">\n<ul>\n<li>選擇剛剛建立的Instance後，點選Associate即完成IP綁定</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/ZS5XrQhQeOLxbS1qFJYx_013.png\">\n<ol start=\"3\">\n<li>回到左方Instances標籤，即可看到全部設定的review<br>\n以我的deztwblog為例，此時複製剛剛綁定的<code>Public IP</code>：</li>\n</ol>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/tTETSUVhQGuOTHstsvc7_014.png\">\n<ol start=\"4\">\n<li>打開terminal，輸入command後即可登入主機</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -i [key.pem] -l ec2-user [your public IP]</div></pre></td></tr></table></figure>\n<p>其中<code>key.pem</code>使用你剛剛下載下來的key file絕對路徑，<code>your public IP</code>使用上一步複製的IP，<code>ec2-user</code>為預設登入帳號</p>\n<ol start=\"5\">\n<li>其他設定</li>\n</ol>\n<ul>\n<li>建議可以在<code>.bashrc</code>(或像我是用<code>.zshrc</code>)中加入alias，即可使用指令快速登入</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alias sshAWS=&apos;ssh -i [key.pem] -l ec2-user [your public IP]&apos;</div></pre></td></tr></table></figure>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/Grj8Q7tRGCGm8J13JUXA_015.png\">\n<ul>\n<li>也可以從Filezilla登入直接從local端傳檔案</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/9ojSN3KUTTist2b176Cc_017.png\">\n<h3 id=\"在主機上設定nodejs環境\">在主機上設定Node.js環境</h3>\n<p>(建議可以參考<a href=\"http://docs.aws.amazon.com/zh_cn/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html\" target=\"_blank\" rel=\"external\">AWS Tutorial</a>)</p>\n<ol>\n<li>由於之後會使用screen來常駐執行server，所以以下全程使用root來安裝</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo -i</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安裝NVM<br>\n建議是使用NVM來安裝Node.js，如此還可方便做Node版本切換</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用以下command啟動NVM</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">. ~/.nvm/nvm.sh</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>安裝你所需要的Node版本</li>\n</ol>\n<ul>\n<li>這裡可以先在本機查看自己local開發的node version</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div></pre></td></tr></table></figure>\n<ul>\n<li>再到EC2主機安裝你所需要的版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm install 6.10.0</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>使用以下指令確認安裝成功與版本</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -e &quot;console.log(&apos;Running Node.js &apos; + process.version)&quot;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>可能需要的其他設定</li>\n</ol>\n<ul>\n<li>檢查更新</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum update</div></pre></td></tr></table></figure>\n<ul>\n<li>安裝git</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install git</div></pre></td></tr></table></figure>\n<ul>\n<li>在AWS EC2主機上設定<code>.bashrc</code>(optional)</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/cAE7B1JpQgm3gMvHRdj4_016.png\">\n<h3 id=\"開始運作nodejs網頁應用\">開始運作Node.js網頁應用</h3>\n<ol>\n<li>\n<p>上傳專案source code到EC2主機上<br>\n這邊我是直接從Github上將自己的code git clone下來，或者你也可以利用FTP來上傳code。</p>\n</li>\n<li>\n<p>執行screen，主機上預設是有安裝screen</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">screen</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>執行你的Node主程式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node index.js</div></pre></td></tr></table></figure>\n<p><code>ctrl + a</code>然後<code>d</code>來做screen的detach後，即可讓自己的網站應用always on，不過感覺上用screen不太像是標準的作法，或許還有更好的方法。</p>\n<ol start=\"4\">\n<li>到網頁輸入你的public IP，即可看到成果</li>\n</ol>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/M3l7RB4iTymmmFd2Wsfo_018.png\">\n<h2 id=\"troubleshooting\">Troubleshooting</h2>\n<ul>\n<li>針對AWS Security Group設定如何做比較安全？</li>\n<li>在EC2主機上run <code>node index.js</code>時，除了用screen有什麼更好的做法？</li>\n</ul>\n<h2 id=\"後記\">後記</h2>\n<p>在EC2部署完後，算是正式讓這個作品上線了，試著將logdown的文章貼過去，圖片的展示卻是未達「開發者體驗」的滿意標準，更別說UX了，這時又覺得logdown真的是應有盡有。</p>\n<p>不過所謂萬事起頭難，既然已經起了個頭，讓它漸入佳境也只是時間上的問題，想想Facebook也是<a href=\"https://www.quora.com/How-has-Facebooks-UI-changed-over-time\" target=\"_blank\" rel=\"external\">隨著時間成長</a>來著，接下來就是把Dez.tw用React重構了。</p>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"http://www.vedfolnir.com/aws-amazon-web-services-location-choice-7368.html\" target=\"_blank\" rel=\"external\">Amazon Web Services AWS 伺服器機房的區域選擇</a></li>\n<li><a href=\"http://docs.aws.amazon.com/zh_cn/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html\" target=\"_blank\" rel=\"external\">Tutorial: Setting Up Node.js on an Amazon EC2 Instance</a></li>\n<li><a href=\"https://blog.json.tw/teaching-ten-minutes-to-quickly-build-a-free-amazon-ec2-host\" target=\"_blank\" rel=\"external\">[教學]十分鐘快速建立Amazon EC2免費主機</a></li>\n<li><a href=\"http://fanli7.net/a/bianchengyuyan/C__/20130126/297941.html\" target=\"_blank\" rel=\"external\">在Amazon EC2 上部署node.js應用</a></li>\n</ul>\n<h2 id=\"54補充\">5/4補充</h2>\n<p>今天突然收到AWS寄Bill給我，其中有兩項被收費：</p>\n<ul>\n<li>\n<p><code>$0.05 per GB-Month of snapshot data stored - Asia Pacific (Tokyo) 1.058 GB-Mo $0.05</code><br>\n參考<a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/snapshot-in-use-error/\" target=\"_blank\" rel=\"external\">這篇</a>把快照刪除，希望下個月不會再收到Bill…</p>\n</li>\n<li>\n<p><code>$0.005 per Elastic IP address not attached to a running instance per hour (prorated) 568.400 Hrs $2.84</code><br>\n參考<a href=\"http://stackoverflow.com/questions/12913278/keeping-ec2-free-instances-free\" target=\"_blank\" rel=\"external\">這篇</a>，原來是有多申請一個閒置的靜態IP，結果忘了release，就被白白收費了！</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>續前一篇所提到的部署平台選擇，雖然網路上可以找到蠻多寫得很仔細的教學，但整個流程還是需要從不同的文件查找，所以就汲取每一篇的精華整理在一起，不管是官方文件、其他人的分享等等，並利用自己的話紀錄「在AWS EC2部署Node.js網頁應用程式的步驟」，分成以下幾大項：</p>\n<ul>\n<li>AWS EC2部署\n<ol>\n<li>註冊與Launch Instance</li>\n<li>IP綁定與登入主機</li>\n<li>在主機上設定Node.js環境</li>\n<li>開始運作Node.js網頁應用</li>\n</ol>\n</li>\n<li>Troubleshooting</li>\n<li>後記</li>\n<li>References</li>\n</ul>\n<hr>\n<h2>AWS EC2部署</h2>\n<h3>註冊與Launch Instance</h3>\n<ol>\n<li>註冊AWS帳號與認證<br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/gElEfHeJS92ysNb8sN7B_001.png\"><br>\n首先當然需至<a href=\"https://aws.amazon.com/tw/\" target=\"_blank\" rel=\"external\">AWS</a>註冊一個帳號，填完基本資料後，會需要完成信用卡認證以及電話認證。</li>\n</ol>\n<p>需要注意的是電話認證的部分，在請系統打電話給你時，需注意用<code>清楚的英文念出四位PIN碼</code>，即可認證通過(一開始用keypad輸入試了好幾次都失敗，最後還超過了驗證次數)，最後選擇免費方案即完成註冊。</p>\n<ol start=\"2\">\n<li>\n<p>進入主控台後，在左上角的Services中選擇EC2<br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/2qM9nOYDRMOZ6uuP4a8b_002.png\"></p>\n</li>\n<li>\n<p>在EC2主頁處(EC2 Dashboard)，選擇<code>Launch Instance</code></p>\n</li>\n</ol>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/B2ifMovVQk23naxOOI2o_003.png\">\n<p>在Launch前稍微提一下，可以從右上角的地方選擇Tokyo，這樣在台灣的<a href=\"http://www.vedfolnir.com/aws-amazon-web-services-location-choice-7368.html\" target=\"_blank\" rel=\"external\">反應時間會比較快</a>。</p>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/v3dNytJcQt2QRezM6RTM_004.png\">\n<ol start=\"4\">\n<li>選擇作業系統，這裡使用<code>Amazon Linux AMI 64-bit</code></li>\n</ol>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/TEZmtpwQ5KtZo7W6dDge_005.png\">\n<ol start=\"5\">\n<li>選擇主機類型，使用免費方案<code>t2.micro</code></li>\n</ol>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/XgrMGlowSeOefaYJq7sQ_006.png\">\n<ol start=\"6\">\n<li>其他設定</li>\n</ol>\n<ul>\n<li>Add Tags，可以自行增加tag方便管理</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/ISZDht7FTfuN1KIqdP0x_007.png\">\n<ul>\n<li>Configure Security Group，加入SSH/HTTP/HTTPS的設定如下：</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/j610JezeSWaQvsAK2npx_008.png\">\n<p>這裡HTTP(80)與HTTPS(443)兩個port的Source都打開為<code>Anywhere</code>(::/0為IPV6的格式)，這樣才能讓全世界連進來;至於SSH(22)這個是管理者自己在後台開發所使用的port，所以我將它設為<code>My IP</code>，至於怎麼設定比較安全需要研究下。</p>\n<ol start=\"7\">\n<li>Review與下載keypair<br>\n最後Review確定設定無誤，按下Launch。此時會跳出keypair的視窗，這是等等需要拿來登入後台的key file，選擇<code>Create a new key pair</code>，並輸入你想取的名字並下載保存好，再按下<code>Launch Instances</code>即完成launch的步驟。</li>\n</ol>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/h3HSNNLdTiumdIFnUpOR_009.png\">\n<h3>IP綁定與登入主機</h3>\n<ol>\n<li>Allocate新IP</li>\n</ol>\n<ul>\n<li>\n<p>點一旁的<code>Elastic IPs</code>，並點選<code>Allocate new address</code><br>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/QdnpL6GhTZSe7sUa9mIc_010.png\"></p>\n</li>\n<li>\n<p>再點選<code>Allocate</code>即可得到一個IP如下示意：</p>\n</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/j0f5xwotROiV1hELoUDV_011.png\">\n<ol start=\"2\">\n<li>Associate address到Instance</li>\n</ol>\n<ul>\n<li>對著新建IP按右鍵後，點選Associate address</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/ltKkdIk6RCW3Nvqz6UmG_012.png\">\n<ul>\n<li>選擇剛剛建立的Instance後，點選Associate即完成IP綁定</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/ZS5XrQhQeOLxbS1qFJYx_013.png\">\n<ol start=\"3\">\n<li>回到左方Instances標籤，即可看到全部設定的review<br>\n以我的deztwblog為例，此時複製剛剛綁定的<code>Public IP</code>：</li>\n</ol>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/tTETSUVhQGuOTHstsvc7_014.png\">\n<ol start=\"4\">\n<li>打開terminal，輸入command後即可登入主機</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -i [key.pem] -l ec2-user [your public IP]</div></pre></td></tr></table></figure>\n<p>其中<code>key.pem</code>使用你剛剛下載下來的key file絕對路徑，<code>your public IP</code>使用上一步複製的IP，<code>ec2-user</code>為預設登入帳號</p>\n<ol start=\"5\">\n<li>其他設定</li>\n</ol>\n<ul>\n<li>建議可以在<code>.bashrc</code>(或像我是用<code>.zshrc</code>)中加入alias，即可使用指令快速登入</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alias sshAWS=&apos;ssh -i [key.pem] -l ec2-user [your public IP]&apos;</div></pre></td></tr></table></figure>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/Grj8Q7tRGCGm8J13JUXA_015.png\">\n<ul>\n<li>也可以從Filezilla登入直接從local端傳檔案</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/9ojSN3KUTTist2b176Cc_017.png\">\n<h3>在主機上設定Node.js環境</h3>\n<p>(建議可以參考<a href=\"http://docs.aws.amazon.com/zh_cn/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html\" target=\"_blank\" rel=\"external\">AWS Tutorial</a>)</p>\n<ol>\n<li>由於之後會使用screen來常駐執行server，所以以下全程使用root來安裝</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo -i</div></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安裝NVM<br>\n建議是使用NVM來安裝Node.js，如此還可方便做Node版本切換</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用以下command啟動NVM</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">. ~/.nvm/nvm.sh</div></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>安裝你所需要的Node版本</li>\n</ol>\n<ul>\n<li>這裡可以先在本機查看自己local開發的node version</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div></pre></td></tr></table></figure>\n<ul>\n<li>再到EC2主機安裝你所需要的版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm install 6.10.0</div></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>使用以下指令確認安裝成功與版本</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -e &quot;console.log(&apos;Running Node.js &apos; + process.version)&quot;</div></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>可能需要的其他設定</li>\n</ol>\n<ul>\n<li>檢查更新</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum update</div></pre></td></tr></table></figure>\n<ul>\n<li>安裝git</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install git</div></pre></td></tr></table></figure>\n<ul>\n<li>在AWS EC2主機上設定<code>.bashrc</code>(optional)</li>\n</ul>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/cAE7B1JpQgm3gMvHRdj4_016.png\">\n<h3>開始運作Node.js網頁應用</h3>\n<ol>\n<li>\n<p>上傳專案source code到EC2主機上<br>\n這邊我是直接從Github上將自己的code git clone下來，或者你也可以利用FTP來上傳code。</p>\n</li>\n<li>\n<p>執行screen，主機上預設是有安裝screen</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">screen</div></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>執行你的Node主程式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node index.js</div></pre></td></tr></table></figure>\n<p><code>ctrl + a</code>然後<code>d</code>來做screen的detach後，即可讓自己的網站應用always on，不過感覺上用screen不太像是標準的作法，或許還有更好的方法。</p>\n<ol start=\"4\">\n<li>到網頁輸入你的public IP，即可看到成果</li>\n</ol>\n<img class=\"center\" src=\"http://user-image.logdown.io/user/25993/blog/24964/post/1679358/M3l7RB4iTymmmFd2Wsfo_018.png\">\n<h2>Troubleshooting</h2>\n<ul>\n<li>針對AWS Security Group設定如何做比較安全？</li>\n<li>在EC2主機上run <code>node index.js</code>時，除了用screen有什麼更好的做法？</li>\n</ul>\n<h2>後記</h2>\n<p>在EC2部署完後，算是正式讓這個作品上線了，試著將logdown的文章貼過去，圖片的展示卻是未達「開發者體驗」的滿意標準，更別說UX了，這時又覺得logdown真的是應有盡有。</p>\n<p>不過所謂萬事起頭難，既然已經起了個頭，讓它漸入佳境也只是時間上的問題，想想Facebook也是<a href=\"https://www.quora.com/How-has-Facebooks-UI-changed-over-time\" target=\"_blank\" rel=\"external\">隨著時間成長</a>來著，接下來就是把Dez.tw用React重構了。</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"http://www.vedfolnir.com/aws-amazon-web-services-location-choice-7368.html\" target=\"_blank\" rel=\"external\">Amazon Web Services AWS 伺服器機房的區域選擇</a></li>\n<li><a href=\"http://docs.aws.amazon.com/zh_cn/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html\" target=\"_blank\" rel=\"external\">Tutorial: Setting Up Node.js on an Amazon EC2 Instance</a></li>\n<li><a href=\"https://blog.json.tw/teaching-ten-minutes-to-quickly-build-a-free-amazon-ec2-host\" target=\"_blank\" rel=\"external\">[教學]十分鐘快速建立Amazon EC2免費主機</a></li>\n<li><a href=\"http://fanli7.net/a/bianchengyuyan/C__/20130126/297941.html\" target=\"_blank\" rel=\"external\">在Amazon EC2 上部署node.js應用</a></li>\n</ul>\n<h2>5/4補充</h2>\n<p>今天突然收到AWS寄Bill給我，其中有兩項被收費：</p>\n<ul>\n<li>\n<p><code>$0.05 per GB-Month of snapshot data stored - Asia Pacific (Tokyo) 1.058 GB-Mo $0.05</code><br>\n參考<a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/snapshot-in-use-error/\" target=\"_blank\" rel=\"external\">這篇</a>把快照刪除，希望下個月不會再收到Bill…</p>\n</li>\n<li>\n<p><code>$0.005 per Elastic IP address not attached to a running instance per hour (prorated) 568.400 Hrs $2.84</code><br>\n參考<a href=\"http://stackoverflow.com/questions/12913278/keeping-ec2-free-instances-free\" target=\"_blank\" rel=\"external\">這篇</a>，原來是有多申請一個閒置的靜態IP，結果忘了release，就被白白收費了！</p>\n</li>\n</ul>\n"},{"title":"筆記｜Dez.tw重構日誌#1｜React.js學習資源","catalog":true,"date":"2017-04-12T06:58:22.000Z","subtitle":"我在React/Redux陡峭的學習曲線段上攀岩中...","header-img":"../../../../img/header_img/bg.png","_content":"\n### React相關教學\n\n#### Redux官方教學文檔(繁體中文)\n\n[http://chentsulin.github.io/redux/index.html](http://chentsulin.github.io/redux/index.html)\n\n#### Getting Started with Redux - Dan Abramov\n\n[https://egghead.io/courses/getting-started-with-redux](https://egghead.io/courses/getting-started-with-redux)\n\n#### Modern/Advanced React with Redux - Stephen Grider\n\n[https://www.udemy.com/react-redux/](https://www.udemy.com/react-redux/)\n\n基本的React App練習範例是利用Youtube API做一個即時搜尋頁面，美式腔調有字幕，由淺入深適合入門。\n\n[https://www.udemy.com/react-redux-tutorial/](https://www.udemy.com/react-redux-tutorial/)\n\n[https://github.com/StephenGrider](https://github.com/StephenGrider)\n\n#### React JS Tutorials - LearnCode.academy\n\n[https://www.youtube.com/playlist?list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b](https://www.youtube.com/playlist?list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b)\n\n#### 從零開始學 ReactJS（ReactJS 101）- kdchang\n\n[https://github.com/kdchang/reactjs101](https://github.com/kdchang/reactjs101)\n\n#### React From The Ground Up - Tim Knight\n\n[https://www.udemy.com/reactjs-from-the-ground-up/](https://www.udemy.com/reactjs-from-the-ground-up/)\n\n基本的React App練習範例是利用Pokemon API做一個分頁圖鑑，英式腔調無字幕，完成Pokemon圖鑑練習，React範例有趣好入門。Redux部分因為無基礎，再加上腔調關係又沒字幕，實在聽不懂，所以又買了Stephen Grider的Modern React with Redux來學習。\n\n#### Flux 筆記 - andyyou\n\n[http://andyyou.logdown.com/posts/241839-flux-notes](http://andyyou.logdown.com/posts/241839-flux-notes)\n\n[https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture](https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture)\n\n### 其他教學\n\n#### 你走你的陽關道，我走我的獨木橋：前後端分離 - Huli\n\n[http://ithelp.ithome.com.tw/articles/10187675](http://ithelp.ithome.com.tw/articles/10187675)\n\n#### React/Redux 一個月的開發感想 - Knovour\n\n[https://notes.knovour.ninja/2016/05/23/my-experience-about-react-redux-in-one-month/](https://notes.knovour.ninja/2016/05/23/my-experience-about-react-redux-in-one-month/)\n\n### 後記\n\n由於在前端領域完全是個菜鳥，所以React學起來的感覺，學習曲線的初期就意外地陡峭，現在大概處在一個在攀岩的階段，然後爬一爬還會覺得很高就去學點別的，像是架個站之類的。\n\n資料讀得越多，就越發現自己的不足，也代表還有許多的進步空間，引用從[Denny大大的文章](https://denny.qollie.com/2016/07/30/front-end-career-job/)看到他引用[GregWang](https://twitter.com/GregWeng/status/703517539477794817)的一句話共勉之吧！\n\n> 你使用的語言被人嘲笑\n>\n> 職業被藐視\n>\n> 解決問題的努力被視為噱頭\n>\n> 自詡不弄髒手的人輕視你面對的問題\n>\n> 執行引擎到處是實作者從未重視過的 Bug\n>\n> 所有跨平台的承諾都在增加你要解決的問題\n>\n> UX認為要的效果很簡單\n>\n> QA給你的回報難對上問題\n>\n> 最後，報酬通常低於平均水準\n>\n> 你說，你想成為前端工程師","source":"_posts/20170412-1620-01-react-reference.md","raw":"---\ntitle: '筆記｜Dez.tw重構日誌#1｜React.js學習資源'\ncatalog: true\ndate: 2017-04-12 14:58:22\nsubtitle: 我在React/Redux陡峭的學習曲線段上攀岩中...\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - React\n    - 前端\n    - 筆記\n---\n\n### React相關教學\n\n#### Redux官方教學文檔(繁體中文)\n\n[http://chentsulin.github.io/redux/index.html](http://chentsulin.github.io/redux/index.html)\n\n#### Getting Started with Redux - Dan Abramov\n\n[https://egghead.io/courses/getting-started-with-redux](https://egghead.io/courses/getting-started-with-redux)\n\n#### Modern/Advanced React with Redux - Stephen Grider\n\n[https://www.udemy.com/react-redux/](https://www.udemy.com/react-redux/)\n\n基本的React App練習範例是利用Youtube API做一個即時搜尋頁面，美式腔調有字幕，由淺入深適合入門。\n\n[https://www.udemy.com/react-redux-tutorial/](https://www.udemy.com/react-redux-tutorial/)\n\n[https://github.com/StephenGrider](https://github.com/StephenGrider)\n\n#### React JS Tutorials - LearnCode.academy\n\n[https://www.youtube.com/playlist?list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b](https://www.youtube.com/playlist?list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b)\n\n#### 從零開始學 ReactJS（ReactJS 101）- kdchang\n\n[https://github.com/kdchang/reactjs101](https://github.com/kdchang/reactjs101)\n\n#### React From The Ground Up - Tim Knight\n\n[https://www.udemy.com/reactjs-from-the-ground-up/](https://www.udemy.com/reactjs-from-the-ground-up/)\n\n基本的React App練習範例是利用Pokemon API做一個分頁圖鑑，英式腔調無字幕，完成Pokemon圖鑑練習，React範例有趣好入門。Redux部分因為無基礎，再加上腔調關係又沒字幕，實在聽不懂，所以又買了Stephen Grider的Modern React with Redux來學習。\n\n#### Flux 筆記 - andyyou\n\n[http://andyyou.logdown.com/posts/241839-flux-notes](http://andyyou.logdown.com/posts/241839-flux-notes)\n\n[https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture](https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture)\n\n### 其他教學\n\n#### 你走你的陽關道，我走我的獨木橋：前後端分離 - Huli\n\n[http://ithelp.ithome.com.tw/articles/10187675](http://ithelp.ithome.com.tw/articles/10187675)\n\n#### React/Redux 一個月的開發感想 - Knovour\n\n[https://notes.knovour.ninja/2016/05/23/my-experience-about-react-redux-in-one-month/](https://notes.knovour.ninja/2016/05/23/my-experience-about-react-redux-in-one-month/)\n\n### 後記\n\n由於在前端領域完全是個菜鳥，所以React學起來的感覺，學習曲線的初期就意外地陡峭，現在大概處在一個在攀岩的階段，然後爬一爬還會覺得很高就去學點別的，像是架個站之類的。\n\n資料讀得越多，就越發現自己的不足，也代表還有許多的進步空間，引用從[Denny大大的文章](https://denny.qollie.com/2016/07/30/front-end-career-job/)看到他引用[GregWang](https://twitter.com/GregWeng/status/703517539477794817)的一句話共勉之吧！\n\n> 你使用的語言被人嘲笑\n>\n> 職業被藐視\n>\n> 解決問題的努力被視為噱頭\n>\n> 自詡不弄髒手的人輕視你面對的問題\n>\n> 執行引擎到處是實作者從未重視過的 Bug\n>\n> 所有跨平台的承諾都在增加你要解決的問題\n>\n> UX認為要的效果很簡單\n>\n> QA給你的回報難對上問題\n>\n> 最後，報酬通常低於平均水準\n>\n> 你說，你想成為前端工程師","slug":"20170412-1620-01-react-reference","published":1,"updated":"2017-06-24T15:39:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs4g0007474uve5meuye","content":"<h3 id=\"react相關教學\">React相關教學</h3>\n<h4 id=\"redux官方教學文檔繁體中文\">Redux官方教學文檔(繁體中文)</h4>\n<p><a href=\"http://chentsulin.github.io/redux/index.html\" target=\"_blank\" rel=\"external\">http://chentsulin.github.io/redux/index.html</a></p>\n<h4 id=\"getting-started-with-redux-dan-abramov\">Getting Started with Redux - Dan Abramov</h4>\n<p><a href=\"https://egghead.io/courses/getting-started-with-redux\" target=\"_blank\" rel=\"external\">https://egghead.io/courses/getting-started-with-redux</a></p>\n<h4 id=\"modernadvanced-react-with-redux-stephen-grider\">Modern/Advanced React with Redux - Stephen Grider</h4>\n<p><a href=\"https://www.udemy.com/react-redux/\" target=\"_blank\" rel=\"external\">https://www.udemy.com/react-redux/</a></p>\n<p>基本的React App練習範例是利用Youtube API做一個即時搜尋頁面，美式腔調有字幕，由淺入深適合入門。</p>\n<p><a href=\"https://www.udemy.com/react-redux-tutorial/\" target=\"_blank\" rel=\"external\">https://www.udemy.com/react-redux-tutorial/</a></p>\n<p><a href=\"https://github.com/StephenGrider\" target=\"_blank\" rel=\"external\">https://github.com/StephenGrider</a></p>\n<h4 id=\"react-js-tutorials-learncodeacademy\">React JS Tutorials - LearnCode.academy</h4>\n<p><a href=\"https://www.youtube.com/playlist?list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b\" target=\"_blank\" rel=\"external\">https://www.youtube.com/playlist?list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b</a></p>\n<h4 id=\"從零開始學-reactjsreactjs-101-kdchang\">從零開始學 ReactJS（ReactJS 101）- kdchang</h4>\n<p><a href=\"https://github.com/kdchang/reactjs101\" target=\"_blank\" rel=\"external\">https://github.com/kdchang/reactjs101</a></p>\n<h4 id=\"react-from-the-ground-up-tim-knight\">React From The Ground Up - Tim Knight</h4>\n<p><a href=\"https://www.udemy.com/reactjs-from-the-ground-up/\" target=\"_blank\" rel=\"external\">https://www.udemy.com/reactjs-from-the-ground-up/</a></p>\n<p>基本的React App練習範例是利用Pokemon API做一個分頁圖鑑，英式腔調無字幕，完成Pokemon圖鑑練習，React範例有趣好入門。Redux部分因為無基礎，再加上腔調關係又沒字幕，實在聽不懂，所以又買了Stephen Grider的Modern React with Redux來學習。</p>\n<h4 id=\"flux-筆記-andyyou\">Flux 筆記 - andyyou</h4>\n<p><a href=\"http://andyyou.logdown.com/posts/241839-flux-notes\" target=\"_blank\" rel=\"external\">http://andyyou.logdown.com/posts/241839-flux-notes</a></p>\n<p><a href=\"https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture\" target=\"_blank\" rel=\"external\">https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture</a></p>\n<h3 id=\"其他教學\">其他教學</h3>\n<h4 id=\"你走你的陽關道我走我的獨木橋前後端分離-huli\">你走你的陽關道，我走我的獨木橋：前後端分離 - Huli</h4>\n<p><a href=\"http://ithelp.ithome.com.tw/articles/10187675\" target=\"_blank\" rel=\"external\">http://ithelp.ithome.com.tw/articles/10187675</a></p>\n<h4 id=\"reactredux-一個月的開發感想-knovour\">React/Redux 一個月的開發感想 - Knovour</h4>\n<p><a href=\"https://notes.knovour.ninja/2016/05/23/my-experience-about-react-redux-in-one-month/\" target=\"_blank\" rel=\"external\">https://notes.knovour.ninja/2016/05/23/my-experience-about-react-redux-in-one-month/</a></p>\n<h3 id=\"後記\">後記</h3>\n<p>由於在前端領域完全是個菜鳥，所以React學起來的感覺，學習曲線的初期就意外地陡峭，現在大概處在一個在攀岩的階段，然後爬一爬還會覺得很高就去學點別的，像是架個站之類的。</p>\n<p>資料讀得越多，就越發現自己的不足，也代表還有許多的進步空間，引用從<a href=\"https://denny.qollie.com/2016/07/30/front-end-career-job/\" target=\"_blank\" rel=\"external\">Denny大大的文章</a>看到他引用<a href=\"https://twitter.com/GregWeng/status/703517539477794817\" target=\"_blank\" rel=\"external\">GregWang</a>的一句話共勉之吧！</p>\n<blockquote>\n<p>你使用的語言被人嘲笑</p>\n<p>職業被藐視</p>\n<p>解決問題的努力被視為噱頭</p>\n<p>自詡不弄髒手的人輕視你面對的問題</p>\n<p>執行引擎到處是實作者從未重視過的 Bug</p>\n<p>所有跨平台的承諾都在增加你要解決的問題</p>\n<p>UX認為要的效果很簡單</p>\n<p>QA給你的回報難對上問題</p>\n<p>最後，報酬通常低於平均水準</p>\n<p>你說，你想成為前端工程師</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3>React相關教學</h3>\n<h4>Redux官方教學文檔(繁體中文)</h4>\n<p><a href=\"http://chentsulin.github.io/redux/index.html\" target=\"_blank\" rel=\"external\">http://chentsulin.github.io/redux/index.html</a></p>\n<h4>Getting Started with Redux - Dan Abramov</h4>\n<p><a href=\"https://egghead.io/courses/getting-started-with-redux\" target=\"_blank\" rel=\"external\">https://egghead.io/courses/getting-started-with-redux</a></p>\n<h4>Modern/Advanced React with Redux - Stephen Grider</h4>\n<p><a href=\"https://www.udemy.com/react-redux/\" target=\"_blank\" rel=\"external\">https://www.udemy.com/react-redux/</a></p>\n<p>基本的React App練習範例是利用Youtube API做一個即時搜尋頁面，美式腔調有字幕，由淺入深適合入門。</p>\n<p><a href=\"https://www.udemy.com/react-redux-tutorial/\" target=\"_blank\" rel=\"external\">https://www.udemy.com/react-redux-tutorial/</a></p>\n<p><a href=\"https://github.com/StephenGrider\" target=\"_blank\" rel=\"external\">https://github.com/StephenGrider</a></p>\n<h4>React JS Tutorials - LearnCode.academy</h4>\n<p><a href=\"https://www.youtube.com/playlist?list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b\" target=\"_blank\" rel=\"external\">https://www.youtube.com/playlist?list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b</a></p>\n<h4>從零開始學 ReactJS（ReactJS 101）- kdchang</h4>\n<p><a href=\"https://github.com/kdchang/reactjs101\" target=\"_blank\" rel=\"external\">https://github.com/kdchang/reactjs101</a></p>\n<h4>React From The Ground Up - Tim Knight</h4>\n<p><a href=\"https://www.udemy.com/reactjs-from-the-ground-up/\" target=\"_blank\" rel=\"external\">https://www.udemy.com/reactjs-from-the-ground-up/</a></p>\n<p>基本的React App練習範例是利用Pokemon API做一個分頁圖鑑，英式腔調無字幕，完成Pokemon圖鑑練習，React範例有趣好入門。Redux部分因為無基礎，再加上腔調關係又沒字幕，實在聽不懂，所以又買了Stephen Grider的Modern React with Redux來學習。</p>\n<h4>Flux 筆記 - andyyou</h4>\n<p><a href=\"http://andyyou.logdown.com/posts/241839-flux-notes\" target=\"_blank\" rel=\"external\">http://andyyou.logdown.com/posts/241839-flux-notes</a></p>\n<p><a href=\"https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture\" target=\"_blank\" rel=\"external\">https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture</a></p>\n<h3>其他教學</h3>\n<h4>你走你的陽關道，我走我的獨木橋：前後端分離 - Huli</h4>\n<p><a href=\"http://ithelp.ithome.com.tw/articles/10187675\" target=\"_blank\" rel=\"external\">http://ithelp.ithome.com.tw/articles/10187675</a></p>\n<h4>React/Redux 一個月的開發感想 - Knovour</h4>\n<p><a href=\"https://notes.knovour.ninja/2016/05/23/my-experience-about-react-redux-in-one-month/\" target=\"_blank\" rel=\"external\">https://notes.knovour.ninja/2016/05/23/my-experience-about-react-redux-in-one-month/</a></p>\n<h3>後記</h3>\n<p>由於在前端領域完全是個菜鳥，所以React學起來的感覺，學習曲線的初期就意外地陡峭，現在大概處在一個在攀岩的階段，然後爬一爬還會覺得很高就去學點別的，像是架個站之類的。</p>\n<p>資料讀得越多，就越發現自己的不足，也代表還有許多的進步空間，引用從<a href=\"https://denny.qollie.com/2016/07/30/front-end-career-job/\" target=\"_blank\" rel=\"external\">Denny大大的文章</a>看到他引用<a href=\"https://twitter.com/GregWeng/status/703517539477794817\" target=\"_blank\" rel=\"external\">GregWang</a>的一句話共勉之吧！</p>\n<blockquote>\n<p>你使用的語言被人嘲笑</p>\n<p>職業被藐視</p>\n<p>解決問題的努力被視為噱頭</p>\n<p>自詡不弄髒手的人輕視你面對的問題</p>\n<p>執行引擎到處是實作者從未重視過的 Bug</p>\n<p>所有跨平台的承諾都在增加你要解決的問題</p>\n<p>UX認為要的效果很簡單</p>\n<p>QA給你的回報難對上問題</p>\n<p>最後，報酬通常低於平均水準</p>\n<p>你說，你想成為前端工程師</p>\n</blockquote>\n"},{"title":"學習｜Huli's Course#1｜基本 HTML/CSS 練習","catalog":true,"date":"2017-04-16T07:02:40.000Z","subtitle":"HW1","header-img":"../../../../img/header_img/bg.png","_content":"\n### Question Set\n\n#### 1.請問 CSS 的屬性position有哪幾種值？\n\n> `static`、`relative`、`fixed`、`absolute`\n\n#### 2.承上，請問那幾種值有哪些區別？請講出適合應用的地方。\n\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th style=\"text-align: left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static</td>\n<td style=\"text-align: left\">\n`static` 是預設值。任何套用 `position: static` 的元素「不會被特別定位」在頁面上特定位置，而是照著瀏覽器預設的配置自動排版在頁面上，所有其他的屬性值都代表該元素會被定位在頁面上。</td>\n</tr>\n<tr>\n<td>relative</td>\n<td style=\"text-align: left\">在一個設定為 `position: relative` 的元素內設定 `top` 、 `right` 、 `bottom` 和 `left` 屬性，會使其元素「相對地」調整其原本該出現的所在位置，而不管這些「相對定位」過的元素如何在頁面上移動位置或增加了多少空間，都不會影響到原本其他元素所在的位置。</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td style=\"text-align: left\">\n`position: fixed`的元素會相對於瀏覽器視窗來定位，這意味著即便頁面捲動，它還是會固定在相同的位置。和 `relative` 一樣，我們會使用 `top` 、 `right` 、 `bottom` 和 `left` 屬性來定位。</td>\n</tr>\n<tr>\n<td>absolute</td>\n<td style=\"text-align: left\">\n`absolute` 與 `fixed` 的行為很像，不一樣的地方在於 `absolute` 元素的定位是在他所處上層容器的相對位置。如果這個套用 `position: absolute` 的元素，其上層容器並沒有「可以被定位」的元素的話，那麼這個元素的定位就是相對於該網頁所有內容（也就是 `&lt;body&gt;` 元素）最左上角的絕對位置，看起來就是這張網頁的絕對位置一樣，所以當你的畫面在捲動時，該元素還是會隨著頁面捲動。</td>\n</tr>\n</tbody>\n</table>\n\n![](https://internetingishard.com/html-and-css/advanced-positioning/css-positioning-schemes-790d5b.png)\n\n#### 3.display的三個值inline, block, inline-block有什麼異同？可以試著舉出幾個例子嗎？\n\n<table>\n<thead>\n<tr>\n<th>display種類</th>\n<th style=\"text-align: left\">異同</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>block</td>\n<td style=\"text-align: left\">A block element has some whitespace above and below it and does not tolerate any HTML elements next to it.</td>\n</tr>\n<tr>\n<td>inline</td>\n<td style=\"text-align: left\">An inline element has no line break before or after it, and it tolerates HTML elements next to it.</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td style=\"text-align: left\">An inline-block element is placed as an inline element (on the same line as adjacent content), but it behaves as a block element.</td>\n</tr>\n</tbody>\n</table>\n\n![](https://i.stack.imgur.com/mGTYI.png)\n\n#### 4.有哪些 HTML 元素是 inline, 哪些是 block？\n\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline</td>\n<td>\n`&lt;span&gt;`、`&lt;em&gt;`、`&lt;strong&gt;`、`&lt;a&gt;`、`&lt;img&gt;` ...</td>\n</tr>\n<tr>\n<td>block</td>\n<td>\n`&lt;div&gt;`、`&lt;h1&gt; - &lt;h6&gt;`、`&lt;p&gt;`、`&lt;form&gt;` ...</td>\n</tr>\n</tbody>\n</table>\n\n**[補充]**\n\n每個HTML元素render時都被以box的樣貌顯示，其中分為`inline`與`block`兩種屬性\n\n![](https://internetingishard.com/html-and-css/css-box-model/inline-vs-block-boxes-f3e662.png)\n\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th style=\"text-align: left\">異同</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>block</td>\n<td style=\"text-align: left\">\n`block`屬性的元素如其名，預設會以區塊的樣貌顯現並影響排版。預設上，他的`width`會受其parent container影響，而`height`會受其所含內容多寡影響。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td style=\"text-align: left\">\n`inline`屬性的元素並不會影響block的排版，而是用來設定block內元素的外型。</td>\n</tr>\n</tbody>\n</table>\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>h1, p {\n  background-color: #DDE0E3;    /* Light gray */\n}\n\nem, strong {\n  background-color: #B2D6FF;    /* Light blue */\n}\n</pre></div>\n</figure>\n\n![](https://internetingishard.com/html-and-css/css-box-model/block-boxes-and-inline-boxes-7cfa0a.png)\n\n#### 5.當我設定一個元素的width為300px，並且padding設成10px之後，這個元素的寬度應該會是多少？\n\n> 320px， 可使用`box-sizing:border-box`預設為300px\n\n參考[這篇](http://pinkyvivi.pixnet.net/blog/post/1131260-css%E2%88%A5%E6%8E%92%E7%89%88%E8%A7%80%E5%BF%B5-boxmodel%3Emargin%E3%80%81padding)\n\n![](http://pic.pimg.tw/pinkyvivi/1164624374.gif)\n\n#### 6.這次實作的畫面當頻道名稱字太多的時候，會超出一格的大小或者會直接被卡掉，有沒有辦法讓字太多的時候在尾巴顯示...？例如原本名稱叫做：「1234567」，顯示的時候變成：「12345...」？\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>p {\n  white-space: nowrap;      /* no newline */\n  overflow: hidden;         /* crop text */\n  text-overflow: ellipsis;  /* ... */\n}\n</pre></div>\n</figure>\n\n### References\n\n*   [https://internetingishard.com/html-and-css](https://internetingishard.com/html-and-css)\n*   [http://zh-tw.learnlayout.com/position.html](http://zh-tw.learnlayout.com/position.html)\n*   [https://www.w3schools.com/html/html_blocks.asp](https://www.w3schools.com/html/html_blocks.asp)\n*   [http://stackoverflow.com/questions/9189810/css-display-inline-vs-inline-block](http://stackoverflow.com/questions/9189810/css-display-inline-vs-inline-block)\n*   [http://pinkyvivi.pixnet.net/blog/post/1131260-css%E2%88%A5%E6%8E%92%E7%89%88%E8%A7%80%E5%BF%B5-boxmodel%3Emargin%E3%80%81padding](http://pinkyvivi.pixnet.net/blog/post/1131260-css%E2%88%A5%E6%8E%92%E7%89%88%E8%A7%80%E5%BF%B5-boxmodel%3Emargin%E3%80%81padding)\n\n### Troubleshooting\n\n*   thumbnail與meta中間的空白\n調整如下可解決，可以再仔細研究一下display的屬性，或許thumbnail與avatar使用img會比較好：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>.stream-item {\n  display: inline-block;\n    ...\n}\n\n.thumbnail {\n    ...\n}\n\n.meta {\n  display: inline-block;\n    ...\n}\n\n.avatar {\n  display: inline-block;\n    ...\n}\n\n.content {\n  float: right;\n\n}\n</pre></div>\n</figure>\n\n*   最底部container與body間的不知名空白\n\n*   不知道為什麼 `.bgmask { display: inline-block; ... }` 這行拿掉會沒有半透明遮罩\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw1/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw1/index.html)","source":"_posts/20170416-1502-huli-course-01.md","raw":"---\ntitle: '學習｜Huli''s Course#1｜基本 HTML/CSS 練習'\ncatalog: true\ndate: 2017-04-16 15:02:40\nsubtitle: HW1\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - HTML\n    - Flexbox\n    - 切版\n    - 前端\n    - 初學\n---\n\n### Question Set\n\n#### 1.請問 CSS 的屬性position有哪幾種值？\n\n> `static`、`relative`、`fixed`、`absolute`\n\n#### 2.承上，請問那幾種值有哪些區別？請講出適合應用的地方。\n\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th style=\"text-align: left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static</td>\n<td style=\"text-align: left\">\n`static` 是預設值。任何套用 `position: static` 的元素「不會被特別定位」在頁面上特定位置，而是照著瀏覽器預設的配置自動排版在頁面上，所有其他的屬性值都代表該元素會被定位在頁面上。</td>\n</tr>\n<tr>\n<td>relative</td>\n<td style=\"text-align: left\">在一個設定為 `position: relative` 的元素內設定 `top` 、 `right` 、 `bottom` 和 `left` 屬性，會使其元素「相對地」調整其原本該出現的所在位置，而不管這些「相對定位」過的元素如何在頁面上移動位置或增加了多少空間，都不會影響到原本其他元素所在的位置。</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td style=\"text-align: left\">\n`position: fixed`的元素會相對於瀏覽器視窗來定位，這意味著即便頁面捲動，它還是會固定在相同的位置。和 `relative` 一樣，我們會使用 `top` 、 `right` 、 `bottom` 和 `left` 屬性來定位。</td>\n</tr>\n<tr>\n<td>absolute</td>\n<td style=\"text-align: left\">\n`absolute` 與 `fixed` 的行為很像，不一樣的地方在於 `absolute` 元素的定位是在他所處上層容器的相對位置。如果這個套用 `position: absolute` 的元素，其上層容器並沒有「可以被定位」的元素的話，那麼這個元素的定位就是相對於該網頁所有內容（也就是 `&lt;body&gt;` 元素）最左上角的絕對位置，看起來就是這張網頁的絕對位置一樣，所以當你的畫面在捲動時，該元素還是會隨著頁面捲動。</td>\n</tr>\n</tbody>\n</table>\n\n![](https://internetingishard.com/html-and-css/advanced-positioning/css-positioning-schemes-790d5b.png)\n\n#### 3.display的三個值inline, block, inline-block有什麼異同？可以試著舉出幾個例子嗎？\n\n<table>\n<thead>\n<tr>\n<th>display種類</th>\n<th style=\"text-align: left\">異同</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>block</td>\n<td style=\"text-align: left\">A block element has some whitespace above and below it and does not tolerate any HTML elements next to it.</td>\n</tr>\n<tr>\n<td>inline</td>\n<td style=\"text-align: left\">An inline element has no line break before or after it, and it tolerates HTML elements next to it.</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td style=\"text-align: left\">An inline-block element is placed as an inline element (on the same line as adjacent content), but it behaves as a block element.</td>\n</tr>\n</tbody>\n</table>\n\n![](https://i.stack.imgur.com/mGTYI.png)\n\n#### 4.有哪些 HTML 元素是 inline, 哪些是 block？\n\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline</td>\n<td>\n`&lt;span&gt;`、`&lt;em&gt;`、`&lt;strong&gt;`、`&lt;a&gt;`、`&lt;img&gt;` ...</td>\n</tr>\n<tr>\n<td>block</td>\n<td>\n`&lt;div&gt;`、`&lt;h1&gt; - &lt;h6&gt;`、`&lt;p&gt;`、`&lt;form&gt;` ...</td>\n</tr>\n</tbody>\n</table>\n\n**[補充]**\n\n每個HTML元素render時都被以box的樣貌顯示，其中分為`inline`與`block`兩種屬性\n\n![](https://internetingishard.com/html-and-css/css-box-model/inline-vs-block-boxes-f3e662.png)\n\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th style=\"text-align: left\">異同</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>block</td>\n<td style=\"text-align: left\">\n`block`屬性的元素如其名，預設會以區塊的樣貌顯現並影響排版。預設上，他的`width`會受其parent container影響，而`height`會受其所含內容多寡影響。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td style=\"text-align: left\">\n`inline`屬性的元素並不會影響block的排版，而是用來設定block內元素的外型。</td>\n</tr>\n</tbody>\n</table>\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>h1, p {\n  background-color: #DDE0E3;    /* Light gray */\n}\n\nem, strong {\n  background-color: #B2D6FF;    /* Light blue */\n}\n</pre></div>\n</figure>\n\n![](https://internetingishard.com/html-and-css/css-box-model/block-boxes-and-inline-boxes-7cfa0a.png)\n\n#### 5.當我設定一個元素的width為300px，並且padding設成10px之後，這個元素的寬度應該會是多少？\n\n> 320px， 可使用`box-sizing:border-box`預設為300px\n\n參考[這篇](http://pinkyvivi.pixnet.net/blog/post/1131260-css%E2%88%A5%E6%8E%92%E7%89%88%E8%A7%80%E5%BF%B5-boxmodel%3Emargin%E3%80%81padding)\n\n![](http://pic.pimg.tw/pinkyvivi/1164624374.gif)\n\n#### 6.這次實作的畫面當頻道名稱字太多的時候，會超出一格的大小或者會直接被卡掉，有沒有辦法讓字太多的時候在尾巴顯示...？例如原本名稱叫做：「1234567」，顯示的時候變成：「12345...」？\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>p {\n  white-space: nowrap;      /* no newline */\n  overflow: hidden;         /* crop text */\n  text-overflow: ellipsis;  /* ... */\n}\n</pre></div>\n</figure>\n\n### References\n\n*   [https://internetingishard.com/html-and-css](https://internetingishard.com/html-and-css)\n*   [http://zh-tw.learnlayout.com/position.html](http://zh-tw.learnlayout.com/position.html)\n*   [https://www.w3schools.com/html/html_blocks.asp](https://www.w3schools.com/html/html_blocks.asp)\n*   [http://stackoverflow.com/questions/9189810/css-display-inline-vs-inline-block](http://stackoverflow.com/questions/9189810/css-display-inline-vs-inline-block)\n*   [http://pinkyvivi.pixnet.net/blog/post/1131260-css%E2%88%A5%E6%8E%92%E7%89%88%E8%A7%80%E5%BF%B5-boxmodel%3Emargin%E3%80%81padding](http://pinkyvivi.pixnet.net/blog/post/1131260-css%E2%88%A5%E6%8E%92%E7%89%88%E8%A7%80%E5%BF%B5-boxmodel%3Emargin%E3%80%81padding)\n\n### Troubleshooting\n\n*   thumbnail與meta中間的空白\n調整如下可解決，可以再仔細研究一下display的屬性，或許thumbnail與avatar使用img會比較好：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>.stream-item {\n  display: inline-block;\n    ...\n}\n\n.thumbnail {\n    ...\n}\n\n.meta {\n  display: inline-block;\n    ...\n}\n\n.avatar {\n  display: inline-block;\n    ...\n}\n\n.content {\n  float: right;\n\n}\n</pre></div>\n</figure>\n\n*   最底部container與body間的不知名空白\n\n*   不知道為什麼 `.bgmask { display: inline-block; ... }` 這行拿掉會沒有半透明遮罩\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw1/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw1/index.html)","slug":"20170416-1502-huli-course-01","published":1,"updated":"2017-06-24T15:39:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs4k0008474uf4s6xthk","content":"<h3 id=\"question-set\">Question Set</h3>\n<h4 id=\"1請問-css-的屬性position有哪幾種值\">1.請問 CSS 的屬性position有哪幾種值？</h4>\n<blockquote>\n<p><code>static</code>、<code>relative</code>、<code>fixed</code>、<code>absolute</code></p>\n</blockquote>\n<h4 id=\"2承上請問那幾種值有哪些區別請講出適合應用的地方\">2.承上，請問那幾種值有哪些區別？請講出適合應用的地方。</h4>\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th style=\"text-align: left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static</td>\n<td style=\"text-align: left\">\n`static` 是預設值。任何套用 `position: static` 的元素「不會被特別定位」在頁面上特定位置，而是照著瀏覽器預設的配置自動排版在頁面上，所有其他的屬性值都代表該元素會被定位在頁面上。</td>\n</tr>\n<tr>\n<td>relative</td>\n<td style=\"text-align: left\">在一個設定為 `position: relative` 的元素內設定 `top` 、 `right` 、 `bottom` 和 `left` 屬性，會使其元素「相對地」調整其原本該出現的所在位置，而不管這些「相對定位」過的元素如何在頁面上移動位置或增加了多少空間，都不會影響到原本其他元素所在的位置。</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td style=\"text-align: left\">\n`position: fixed`的元素會相對於瀏覽器視窗來定位，這意味著即便頁面捲動，它還是會固定在相同的位置。和 `relative` 一樣，我們會使用 `top` 、 `right` 、 `bottom` 和 `left` 屬性來定位。</td>\n</tr>\n<tr>\n<td>absolute</td>\n<td style=\"text-align: left\">\n`absolute` 與 `fixed` 的行為很像，不一樣的地方在於 `absolute` 元素的定位是在他所處上層容器的相對位置。如果這個套用 `position: absolute` 的元素，其上層容器並沒有「可以被定位」的元素的話，那麼這個元素的定位就是相對於該網頁所有內容（也就是 `&lt;body&gt;` 元素）最左上角的絕對位置，看起來就是這張網頁的絕對位置一樣，所以當你的畫面在捲動時，該元素還是會隨著頁面捲動。</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://internetingishard.com/html-and-css/advanced-positioning/css-positioning-schemes-790d5b.png\" alt=\"\"></p>\n<h4 id=\"3display的三個值inline-block-inline-block有什麼異同可以試著舉出幾個例子嗎\">3.display的三個值inline, block, inline-block有什麼異同？可以試著舉出幾個例子嗎？</h4>\n<table>\n<thead>\n<tr>\n<th>display種類</th>\n<th style=\"text-align: left\">異同</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>block</td>\n<td style=\"text-align: left\">A block element has some whitespace above and below it and does not tolerate any HTML elements next to it.</td>\n</tr>\n<tr>\n<td>inline</td>\n<td style=\"text-align: left\">An inline element has no line break before or after it, and it tolerates HTML elements next to it.</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td style=\"text-align: left\">An inline-block element is placed as an inline element (on the same line as adjacent content), but it behaves as a block element.</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://i.stack.imgur.com/mGTYI.png\" alt=\"\"></p>\n<h4 id=\"4有哪些-html-元素是-inline-哪些是-block\">4.有哪些 HTML 元素是 inline, 哪些是 block？</h4>\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline</td>\n<td>\n`&lt;span&gt;`、`&lt;em&gt;`、`&lt;strong&gt;`、`&lt;a&gt;`、`&lt;img&gt;` ...</td>\n</tr>\n<tr>\n<td>block</td>\n<td>\n`&lt;div&gt;`、`&lt;h1&gt; - &lt;h6&gt;`、`&lt;p&gt;`、`&lt;form&gt;` ...</td>\n</tr>\n</tbody>\n</table>\n<p><strong>[補充]</strong></p>\n<p>每個HTML元素render時都被以box的樣貌顯示，其中分為<code>inline</code>與<code>block</code>兩種屬性</p>\n<p><img src=\"https://internetingishard.com/html-and-css/css-box-model/inline-vs-block-boxes-f3e662.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th style=\"text-align: left\">異同</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>block</td>\n<td style=\"text-align: left\">\n`block`屬性的元素如其名，預設會以區塊的樣貌顯現並影響排版。預設上，他的`width`會受其parent container影響，而`height`會受其所含內容多寡影響。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td style=\"text-align: left\">\n`inline`屬性的元素並不會影響block的排版，而是用來設定block內元素的外型。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>h1, p {\n  background-color: #DDE0E3;    /* Light gray */\n}\n<p>em, strong {<br>\nbackground-color: #B2D6FF;    /* Light blue */<br>\n}</p>\n</pre></div>\n</figure>\n<p><img src=\"https://internetingishard.com/html-and-css/css-box-model/block-boxes-and-inline-boxes-7cfa0a.png\" alt=\"\"></p>\n<h4 id=\"5當我設定一個元素的width為300px並且padding設成10px之後這個元素的寬度應該會是多少\">5.當我設定一個元素的width為300px，並且padding設成10px之後，這個元素的寬度應該會是多少？</h4>\n<blockquote>\n<p>320px， 可使用<code>box-sizing:border-box</code>預設為300px</p>\n</blockquote>\n<p>參考<a href=\"http://pinkyvivi.pixnet.net/blog/post/1131260-css%E2%88%A5%E6%8E%92%E7%89%88%E8%A7%80%E5%BF%B5-boxmodel%3Emargin%E3%80%81padding\" target=\"_blank\" rel=\"external\">這篇</a></p>\n<p><img src=\"http://pic.pimg.tw/pinkyvivi/1164624374.gif\" alt=\"\"></p>\n<h4 id=\"6這次實作的畫面當頻道名稱字太多的時候會超出一格的大小或者會直接被卡掉有沒有辦法讓字太多的時候在尾巴顯示例如原本名稱叫做1234567顯示的時候變成12345\">6.這次實作的畫面當頻道名稱字太多的時候，會超出一格的大小或者會直接被卡掉，有沒有辦法讓字太多的時候在尾巴顯示…？例如原本名稱叫做：「1234567」，顯示的時候變成：「12345…」？</h4>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>p {\n  white-space: nowrap;      /* no newline */\n  overflow: hidden;         /* crop text */\n  text-overflow: ellipsis;  /* ... */\n}\n</pre></div>\n</figure>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://internetingishard.com/html-and-css\" target=\"_blank\" rel=\"external\">https://internetingishard.com/html-and-css</a></li>\n<li><a href=\"http://zh-tw.learnlayout.com/position.html\" target=\"_blank\" rel=\"external\">http://zh-tw.learnlayout.com/position.html</a></li>\n<li><a href=\"https://www.w3schools.com/html/html_blocks.asp\" target=\"_blank\" rel=\"external\">https://www.w3schools.com/html/html_blocks.asp</a></li>\n<li><a href=\"http://stackoverflow.com/questions/9189810/css-display-inline-vs-inline-block\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/9189810/css-display-inline-vs-inline-block</a></li>\n<li><a href=\"http://pinkyvivi.pixnet.net/blog/post/1131260-css%E2%88%A5%E6%8E%92%E7%89%88%E8%A7%80%E5%BF%B5-boxmodel%3Emargin%E3%80%81padding\" target=\"_blank\" rel=\"external\">http://pinkyvivi.pixnet.net/blog/post/1131260-css%E2%88%A5%E6%8E%92%E7%89%88%E8%A7%80%E5%BF%B5-boxmodel%3Emargin%E3%80%81padding</a></li>\n</ul>\n<h3 id=\"troubleshooting\">Troubleshooting</h3>\n<ul>\n<li>thumbnail與meta中間的空白<br>\n調整如下可解決，可以再仔細研究一下display的屬性，或許thumbnail與avatar使用img會比較好：</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>.stream-item {\n  display: inline-block;\n    ...\n}\n<p>.thumbnail {<br>\n…<br>\n}</p>\n<p>.meta {<br>\ndisplay: inline-block;<br>\n…<br>\n}</p>\n<p>.avatar {<br>\ndisplay: inline-block;<br>\n…<br>\n}</p>\n<p>.content {<br>\nfloat: right;</p>\n<p>}</p>\n</pre></div>\n</figure>\n<ul>\n<li>\n<p>最底部container與body間的不知名空白</p>\n</li>\n<li>\n<p>不知道為什麼 <code>.bgmask { display: inline-block; ... }</code> 這行拿掉會沒有半透明遮罩</p>\n</li>\n</ul>\n<h3 id=\"demo\">Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw1/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw1/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>Question Set</h3>\n<h4>1.請問 CSS 的屬性position有哪幾種值？</h4>\n<blockquote>\n<p><code>static</code>、<code>relative</code>、<code>fixed</code>、<code>absolute</code></p>\n</blockquote>\n<h4>2.承上，請問那幾種值有哪些區別？請講出適合應用的地方。</h4>\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th style=\"text-align: left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static</td>\n<td style=\"text-align: left\">\n`static` 是預設值。任何套用 `position: static` 的元素「不會被特別定位」在頁面上特定位置，而是照著瀏覽器預設的配置自動排版在頁面上，所有其他的屬性值都代表該元素會被定位在頁面上。</td>\n</tr>\n<tr>\n<td>relative</td>\n<td style=\"text-align: left\">在一個設定為 `position: relative` 的元素內設定 `top` 、 `right` 、 `bottom` 和 `left` 屬性，會使其元素「相對地」調整其原本該出現的所在位置，而不管這些「相對定位」過的元素如何在頁面上移動位置或增加了多少空間，都不會影響到原本其他元素所在的位置。</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td style=\"text-align: left\">\n`position: fixed`的元素會相對於瀏覽器視窗來定位，這意味著即便頁面捲動，它還是會固定在相同的位置。和 `relative` 一樣，我們會使用 `top` 、 `right` 、 `bottom` 和 `left` 屬性來定位。</td>\n</tr>\n<tr>\n<td>absolute</td>\n<td style=\"text-align: left\">\n`absolute` 與 `fixed` 的行為很像，不一樣的地方在於 `absolute` 元素的定位是在他所處上層容器的相對位置。如果這個套用 `position: absolute` 的元素，其上層容器並沒有「可以被定位」的元素的話，那麼這個元素的定位就是相對於該網頁所有內容（也就是 `&lt;body&gt;` 元素）最左上角的絕對位置，看起來就是這張網頁的絕對位置一樣，所以當你的畫面在捲動時，該元素還是會隨著頁面捲動。</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://internetingishard.com/html-and-css/advanced-positioning/css-positioning-schemes-790d5b.png\" alt=\"\"></p>\n<h4>3.display的三個值inline, block, inline-block有什麼異同？可以試著舉出幾個例子嗎？</h4>\n<table>\n<thead>\n<tr>\n<th>display種類</th>\n<th style=\"text-align: left\">異同</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>block</td>\n<td style=\"text-align: left\">A block element has some whitespace above and below it and does not tolerate any HTML elements next to it.</td>\n</tr>\n<tr>\n<td>inline</td>\n<td style=\"text-align: left\">An inline element has no line break before or after it, and it tolerates HTML elements next to it.</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td style=\"text-align: left\">An inline-block element is placed as an inline element (on the same line as adjacent content), but it behaves as a block element.</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://i.stack.imgur.com/mGTYI.png\" alt=\"\"></p>\n<h4>4.有哪些 HTML 元素是 inline, 哪些是 block？</h4>\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline</td>\n<td>\n`&lt;span&gt;`、`&lt;em&gt;`、`&lt;strong&gt;`、`&lt;a&gt;`、`&lt;img&gt;` ...</td>\n</tr>\n<tr>\n<td>block</td>\n<td>\n`&lt;div&gt;`、`&lt;h1&gt; - &lt;h6&gt;`、`&lt;p&gt;`、`&lt;form&gt;` ...</td>\n</tr>\n</tbody>\n</table>\n<p><strong>[補充]</strong></p>\n<p>每個HTML元素render時都被以box的樣貌顯示，其中分為<code>inline</code>與<code>block</code>兩種屬性</p>\n<p><img src=\"https://internetingishard.com/html-and-css/css-box-model/inline-vs-block-boxes-f3e662.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>種類</th>\n<th style=\"text-align: left\">異同</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>block</td>\n<td style=\"text-align: left\">\n`block`屬性的元素如其名，預設會以區塊的樣貌顯現並影響排版。預設上，他的`width`會受其parent container影響，而`height`會受其所含內容多寡影響。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td style=\"text-align: left\">\n`inline`屬性的元素並不會影響block的排版，而是用來設定block內元素的外型。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>h1, p {\n  background-color: #DDE0E3;    /* Light gray */\n}\n<p>em, strong {<br>\nbackground-color: #B2D6FF;    /* Light blue */<br>\n}</p>\n</pre></div>\n</figure>\n<p><img src=\"https://internetingishard.com/html-and-css/css-box-model/block-boxes-and-inline-boxes-7cfa0a.png\" alt=\"\"></p>\n<h4>5.當我設定一個元素的width為300px，並且padding設成10px之後，這個元素的寬度應該會是多少？</h4>\n<blockquote>\n<p>320px， 可使用<code>box-sizing:border-box</code>預設為300px</p>\n</blockquote>\n<p>參考<a href=\"http://pinkyvivi.pixnet.net/blog/post/1131260-css%E2%88%A5%E6%8E%92%E7%89%88%E8%A7%80%E5%BF%B5-boxmodel%3Emargin%E3%80%81padding\" target=\"_blank\" rel=\"external\">這篇</a></p>\n<p><img src=\"http://pic.pimg.tw/pinkyvivi/1164624374.gif\" alt=\"\"></p>\n<h4>6.這次實作的畫面當頻道名稱字太多的時候，會超出一格的大小或者會直接被卡掉，有沒有辦法讓字太多的時候在尾巴顯示…？例如原本名稱叫做：「1234567」，顯示的時候變成：「12345…」？</h4>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>p {\n  white-space: nowrap;      /* no newline */\n  overflow: hidden;         /* crop text */\n  text-overflow: ellipsis;  /* ... */\n}\n</pre></div>\n</figure>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://internetingishard.com/html-and-css\" target=\"_blank\" rel=\"external\">https://internetingishard.com/html-and-css</a></li>\n<li><a href=\"http://zh-tw.learnlayout.com/position.html\" target=\"_blank\" rel=\"external\">http://zh-tw.learnlayout.com/position.html</a></li>\n<li><a href=\"https://www.w3schools.com/html/html_blocks.asp\" target=\"_blank\" rel=\"external\">https://www.w3schools.com/html/html_blocks.asp</a></li>\n<li><a href=\"http://stackoverflow.com/questions/9189810/css-display-inline-vs-inline-block\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/9189810/css-display-inline-vs-inline-block</a></li>\n<li><a href=\"http://pinkyvivi.pixnet.net/blog/post/1131260-css%E2%88%A5%E6%8E%92%E7%89%88%E8%A7%80%E5%BF%B5-boxmodel%3Emargin%E3%80%81padding\" target=\"_blank\" rel=\"external\">http://pinkyvivi.pixnet.net/blog/post/1131260-css%E2%88%A5%E6%8E%92%E7%89%88%E8%A7%80%E5%BF%B5-boxmodel%3Emargin%E3%80%81padding</a></li>\n</ul>\n<h3>Troubleshooting</h3>\n<ul>\n<li>thumbnail與meta中間的空白<br>\n調整如下可解決，可以再仔細研究一下display的屬性，或許thumbnail與avatar使用img會比較好：</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>.stream-item {\n  display: inline-block;\n    ...\n}\n<p>.thumbnail {<br>\n…<br>\n}</p>\n<p>.meta {<br>\ndisplay: inline-block;<br>\n…<br>\n}</p>\n<p>.avatar {<br>\ndisplay: inline-block;<br>\n…<br>\n}</p>\n<p>.content {<br>\nfloat: right;</p>\n<p>}</p>\n</pre></div>\n</figure>\n<ul>\n<li>\n<p>最底部container與body間的不知名空白</p>\n</li>\n<li>\n<p>不知道為什麼 <code>.bgmask { display: inline-block; ... }</code> 這行拿掉會沒有半透明遮罩</p>\n</li>\n</ul>\n<h3>Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw1/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw1/index.html</a></p>\n"},{"title":"學習｜Huli's Course#2｜CSS transition","catalog":true,"date":"2017-04-24T07:02:05.000Z","subtitle":"HW2","header-img":"../../../../img/header_img/bg.png","_content":"\n### Properties\n\n*   hover至每一個項目時會有以下的transition\n*   在整個`stream-item`加上`filter: contrast(125%) brightness(150%);`做對比與亮度的增強\n*   在整個`stream-item`加上`box-shadow: 5px 5px 20px 2.5px #323232;`做邊框深灰陰影\n*   在`content`加上hover時背景為全黑無透明\n*   第一項目加入`id=\"special\"`demo移過去一秒後發生hover效果\n*   `transition` 這個屬性加在 `.class` 上跟加在 `.class:hover` 上面是不一樣，欲使移入移出皆有效果，就需要加在`.class`上\n*   加入一些sass語法\n\n### Question Set\n\n#### 1.你能不能試著做出另外一種 hover 的形式？例如說 hover 的時候背景顏色改變之類的\n\n試著在`preview`下的`content`處加入如下程式，使`content`在hover時背景為全黑無透明\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>.content:hover {\n    background-color: rgba(0, 0, 0, 1)\n    transition: background-color .25s\n}\n</pre></div>\n</figure>\n\n#### 2.我希望我滑鼠移上去之後過一秒才發生 hover 的效果，應該怎麼辦？\n\n在`:hover`處加上`transition-delay: 1s;`\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>.stream-item:hover {\n  box-shadow: 5px 5px 20px 2.5px #323232;\n  filter: contrast(125%) brightness(150%);\n  transition: box-shadow .25s, filter .5s;\n}\n\n#special:hover {\n  transition-delay: 1s;\n }\n</pre></div>\n</figure>\n\n#### 3.為什麼我們應該在使用 transition 的時候避免 transition: all？\n\nI. performance不佳\n\nII. 使用`transition: all`意義為「所有transition效果共享同樣的延續時間以及速率變換方式」，有時候會因為載入速度不一致而造成UX不佳\n\n> Yes, using `transition: all` could cause major drawbacks in performance. There can be a lot of cases where the browser would look if it needs to make a transition, even if user won't see it, like the color changes, dimension changes etc.\n>\n> The simplest example I can think of is this: [http://dabblet.com/gist/1657661](http://dabblet.com/gist/1657661) — try to change the zoom level or the font's size and you'll see that everything become animated.Of course there couldn't be a lot of such user interactions, but there could be some interface changes that can cause the reflow and repaints in some blocks, that could tell the browser to try and animate those changes.\n>\n> So, in general, it's recommended that you won't use the transition: all and would use the direct transitions instead.\n>\n> There are some other things that can go wrong with the all transitions, like the splash of animation on page load, where it would at first render the initial styles for blocks and then apply the style with an animation. In a lot of cases it wouldn't be the thing that you want :)\n\n### References\n\n[Delay :Hover in CSS3?](http://stackoverflow.com/questions/8566090/delay-hover-in-css3)\n\n[CSS3 Transition](https://www.w3cplus.com/content/css3-transition)\n\n[CSS3 Transitions: Is “transition: all” slower than “transition: x”?\n\n](http://stackoverflow.com/questions/8947441/css3-transitions-is-transition-all-slower-than-transition-x)\n\n### Troubleshooting\n\n*   目前只使用Chrome開發，在使用Safari檢視時transition稍微有些頓\n*   改為`flexbox`的關係，在寬度小於1400的display上會有排版上的bug\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw2/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw2/index.html)","source":"_posts/20170424-1502-huli-course-02.md","raw":"---\ntitle: '學習｜Huli''s Course#2｜CSS transition'\ncatalog: true\ndate: 2017-04-24 15:02:05\nsubtitle: HW2\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - CSS\n    - transition\n    - 前端\n    - 初學\n---\n\n### Properties\n\n*   hover至每一個項目時會有以下的transition\n*   在整個`stream-item`加上`filter: contrast(125%) brightness(150%);`做對比與亮度的增強\n*   在整個`stream-item`加上`box-shadow: 5px 5px 20px 2.5px #323232;`做邊框深灰陰影\n*   在`content`加上hover時背景為全黑無透明\n*   第一項目加入`id=\"special\"`demo移過去一秒後發生hover效果\n*   `transition` 這個屬性加在 `.class` 上跟加在 `.class:hover` 上面是不一樣，欲使移入移出皆有效果，就需要加在`.class`上\n*   加入一些sass語法\n\n### Question Set\n\n#### 1.你能不能試著做出另外一種 hover 的形式？例如說 hover 的時候背景顏色改變之類的\n\n試著在`preview`下的`content`處加入如下程式，使`content`在hover時背景為全黑無透明\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>.content:hover {\n    background-color: rgba(0, 0, 0, 1)\n    transition: background-color .25s\n}\n</pre></div>\n</figure>\n\n#### 2.我希望我滑鼠移上去之後過一秒才發生 hover 的效果，應該怎麼辦？\n\n在`:hover`處加上`transition-delay: 1s;`\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>.stream-item:hover {\n  box-shadow: 5px 5px 20px 2.5px #323232;\n  filter: contrast(125%) brightness(150%);\n  transition: box-shadow .25s, filter .5s;\n}\n\n#special:hover {\n  transition-delay: 1s;\n }\n</pre></div>\n</figure>\n\n#### 3.為什麼我們應該在使用 transition 的時候避免 transition: all？\n\nI. performance不佳\n\nII. 使用`transition: all`意義為「所有transition效果共享同樣的延續時間以及速率變換方式」，有時候會因為載入速度不一致而造成UX不佳\n\n> Yes, using `transition: all` could cause major drawbacks in performance. There can be a lot of cases where the browser would look if it needs to make a transition, even if user won't see it, like the color changes, dimension changes etc.\n>\n> The simplest example I can think of is this: [http://dabblet.com/gist/1657661](http://dabblet.com/gist/1657661) — try to change the zoom level or the font's size and you'll see that everything become animated.Of course there couldn't be a lot of such user interactions, but there could be some interface changes that can cause the reflow and repaints in some blocks, that could tell the browser to try and animate those changes.\n>\n> So, in general, it's recommended that you won't use the transition: all and would use the direct transitions instead.\n>\n> There are some other things that can go wrong with the all transitions, like the splash of animation on page load, where it would at first render the initial styles for blocks and then apply the style with an animation. In a lot of cases it wouldn't be the thing that you want :)\n\n### References\n\n[Delay :Hover in CSS3?](http://stackoverflow.com/questions/8566090/delay-hover-in-css3)\n\n[CSS3 Transition](https://www.w3cplus.com/content/css3-transition)\n\n[CSS3 Transitions: Is “transition: all” slower than “transition: x”?\n\n](http://stackoverflow.com/questions/8947441/css3-transitions-is-transition-all-slower-than-transition-x)\n\n### Troubleshooting\n\n*   目前只使用Chrome開發，在使用Safari檢視時transition稍微有些頓\n*   改為`flexbox`的關係，在寬度小於1400的display上會有排版上的bug\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw2/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw2/index.html)","slug":"20170424-1502-huli-course-02","published":1,"updated":"2017-06-24T15:38:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs4m000a474uzy4fao7i","content":"<h3 id=\"properties\">Properties</h3>\n<ul>\n<li>hover至每一個項目時會有以下的transition</li>\n<li>在整個<code>stream-item</code>加上<code>filter: contrast(125%) brightness(150%);</code>做對比與亮度的增強</li>\n<li>在整個<code>stream-item</code>加上<code>box-shadow: 5px 5px 20px 2.5px #323232;</code>做邊框深灰陰影</li>\n<li>在<code>content</code>加上hover時背景為全黑無透明</li>\n<li>第一項目加入<code>id=&quot;special&quot;</code>demo移過去一秒後發生hover效果</li>\n<li><code>transition</code> 這個屬性加在 <code>.class</code> 上跟加在 <code>.class:hover</code> 上面是不一樣，欲使移入移出皆有效果，就需要加在<code>.class</code>上</li>\n<li>加入一些sass語法</li>\n</ul>\n<h3 id=\"question-set\">Question Set</h3>\n<h4 id=\"1你能不能試著做出另外一種-hover-的形式例如說-hover-的時候背景顏色改變之類的\">1.你能不能試著做出另外一種 hover 的形式？例如說 hover 的時候背景顏色改變之類的</h4>\n<p>試著在<code>preview</code>下的<code>content</code>處加入如下程式，使<code>content</code>在hover時背景為全黑無透明</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>.content:hover {\n    background-color: rgba(0, 0, 0, 1)\n    transition: background-color .25s\n}\n</pre></div>\n</figure>\n<h4 id=\"2我希望我滑鼠移上去之後過一秒才發生-hover-的效果應該怎麼辦\">2.我希望我滑鼠移上去之後過一秒才發生 hover 的效果，應該怎麼辦？</h4>\n<p>在<code>:hover</code>處加上<code>transition-delay: 1s;</code></p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>.stream-item:hover {\n  box-shadow: 5px 5px 20px 2.5px #323232;\n  filter: contrast(125%) brightness(150%);\n  transition: box-shadow .25s, filter .5s;\n}\n<p>#special:hover {<br>\ntransition-delay: 1s;<br>\n}</p>\n</pre></div>\n</figure>\n<h4 id=\"3為什麼我們應該在使用-transition-的時候避免-transition-all\">3.為什麼我們應該在使用 transition 的時候避免 transition: all？</h4>\n<p>I. performance不佳</p>\n<p>II. 使用<code>transition: all</code>意義為「所有transition效果共享同樣的延續時間以及速率變換方式」，有時候會因為載入速度不一致而造成UX不佳</p>\n<blockquote>\n<p>Yes, using <code>transition: all</code> could cause major drawbacks in performance. There can be a lot of cases where the browser would look if it needs to make a transition, even if user won’t see it, like the color changes, dimension changes etc.</p>\n<p>The simplest example I can think of is this: <a href=\"http://dabblet.com/gist/1657661\" target=\"_blank\" rel=\"external\">http://dabblet.com/gist/1657661</a> — try to change the zoom level or the font’s size and you’ll see that everything become animated.Of course there couldn’t be a lot of such user interactions, but there could be some interface changes that can cause the reflow and repaints in some blocks, that could tell the browser to try and animate those changes.</p>\n<p>So, in general, it’s recommended that you won’t use the transition: all and would use the direct transitions instead.</p>\n<p>There are some other things that can go wrong with the all transitions, like the splash of animation on page load, where it would at first render the initial styles for blocks and then apply the style with an animation. In a lot of cases it wouldn’t be the thing that you want :)</p>\n</blockquote>\n<h3 id=\"references\">References</h3>\n<p><a href=\"http://stackoverflow.com/questions/8566090/delay-hover-in-css3\" target=\"_blank\" rel=\"external\">Delay :Hover in CSS3?</a></p>\n<p><a href=\"https://www.w3cplus.com/content/css3-transition\" target=\"_blank\" rel=\"external\">CSS3 Transition</a></p>\n<p>[CSS3 Transitions: Is “transition: all” slower than “transition: x”?</p>\n<p>](<a href=\"http://stackoverflow.com/questions/8947441/css3-transitions-is-transition-all-slower-than-transition-x\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/8947441/css3-transitions-is-transition-all-slower-than-transition-x</a>)</p>\n<h3 id=\"troubleshooting\">Troubleshooting</h3>\n<ul>\n<li>目前只使用Chrome開發，在使用Safari檢視時transition稍微有些頓</li>\n<li>改為<code>flexbox</code>的關係，在寬度小於1400的display上會有排版上的bug</li>\n</ul>\n<h3 id=\"demo\">Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw2/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw2/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>Properties</h3>\n<ul>\n<li>hover至每一個項目時會有以下的transition</li>\n<li>在整個<code>stream-item</code>加上<code>filter: contrast(125%) brightness(150%);</code>做對比與亮度的增強</li>\n<li>在整個<code>stream-item</code>加上<code>box-shadow: 5px 5px 20px 2.5px #323232;</code>做邊框深灰陰影</li>\n<li>在<code>content</code>加上hover時背景為全黑無透明</li>\n<li>第一項目加入<code>id=&quot;special&quot;</code>demo移過去一秒後發生hover效果</li>\n<li><code>transition</code> 這個屬性加在 <code>.class</code> 上跟加在 <code>.class:hover</code> 上面是不一樣，欲使移入移出皆有效果，就需要加在<code>.class</code>上</li>\n<li>加入一些sass語法</li>\n</ul>\n<h3>Question Set</h3>\n<h4>1.你能不能試著做出另外一種 hover 的形式？例如說 hover 的時候背景顏色改變之類的</h4>\n<p>試著在<code>preview</code>下的<code>content</code>處加入如下程式，使<code>content</code>在hover時背景為全黑無透明</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>.content:hover {\n    background-color: rgba(0, 0, 0, 1)\n    transition: background-color .25s\n}\n</pre></div>\n</figure>\n<h4>2.我希望我滑鼠移上去之後過一秒才發生 hover 的效果，應該怎麼辦？</h4>\n<p>在<code>:hover</code>處加上<code>transition-delay: 1s;</code></p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>.stream-item:hover {\n  box-shadow: 5px 5px 20px 2.5px #323232;\n  filter: contrast(125%) brightness(150%);\n  transition: box-shadow .25s, filter .5s;\n}\n<p>#special:hover {<br>\ntransition-delay: 1s;<br>\n}</p>\n</pre></div>\n</figure>\n<h4>3.為什麼我們應該在使用 transition 的時候避免 transition: all？</h4>\n<p>I. performance不佳</p>\n<p>II. 使用<code>transition: all</code>意義為「所有transition效果共享同樣的延續時間以及速率變換方式」，有時候會因為載入速度不一致而造成UX不佳</p>\n<blockquote>\n<p>Yes, using <code>transition: all</code> could cause major drawbacks in performance. There can be a lot of cases where the browser would look if it needs to make a transition, even if user won’t see it, like the color changes, dimension changes etc.</p>\n<p>The simplest example I can think of is this: <a href=\"http://dabblet.com/gist/1657661\" target=\"_blank\" rel=\"external\">http://dabblet.com/gist/1657661</a> — try to change the zoom level or the font’s size and you’ll see that everything become animated.Of course there couldn’t be a lot of such user interactions, but there could be some interface changes that can cause the reflow and repaints in some blocks, that could tell the browser to try and animate those changes.</p>\n<p>So, in general, it’s recommended that you won’t use the transition: all and would use the direct transitions instead.</p>\n<p>There are some other things that can go wrong with the all transitions, like the splash of animation on page load, where it would at first render the initial styles for blocks and then apply the style with an animation. In a lot of cases it wouldn’t be the thing that you want :)</p>\n</blockquote>\n<h3>References</h3>\n<p><a href=\"http://stackoverflow.com/questions/8566090/delay-hover-in-css3\" target=\"_blank\" rel=\"external\">Delay :Hover in CSS3?</a></p>\n<p><a href=\"https://www.w3cplus.com/content/css3-transition\" target=\"_blank\" rel=\"external\">CSS3 Transition</a></p>\n<p>[CSS3 Transitions: Is “transition: all” slower than “transition: x”?</p>\n<p>](<a href=\"http://stackoverflow.com/questions/8947441/css3-transitions-is-transition-all-slower-than-transition-x\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/8947441/css3-transitions-is-transition-all-slower-than-transition-x</a>)</p>\n<h3>Troubleshooting</h3>\n<ul>\n<li>目前只使用Chrome開發，在使用Safari檢視時transition稍微有些頓</li>\n<li>改為<code>flexbox</code>的關係，在寬度小於1400的display上會有排版上的bug</li>\n</ul>\n<h3>Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw2/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw2/index.html</a></p>\n"},{"title":"筆記｜Dez.tw重構日誌#2｜Redux筆記","catalog":true,"date":"2017-04-27T06:57:59.000Z","subtitle":"Redux筆記","header-img":"../../../../img/header_img/bg.png","_content":"\n### Redux核心概念\n\n1.  Redux itself is very simple.\n2.  To change something in the `state`, you need to dispatch an `action`.\n3.  An `action` is a plain JavaScript object.\n4.  Finally, to tie `state` and `actions` together, we write a function called a `reducer`.\n5.  `Reducer` is just a function that takes `state` and `action` as arguments, and returns the next state of the app.\n6.  And we  may write a root reducer to manages the complete state of our app by calling those reducers\n\n### Redux三大原則\n\n1.  單一數據源(Single source of truth)\n\n        *   整個應用的state被儲存在一棵object tree中，並且這個object tree只存在於唯一一個store中\n    *   單一state tree讓開發時調整state(CRUD)更容易，\n\n2.  State是read-only的\n\n        *   唯一能改變state的方法就是發出action\n    *   action是把數據從應用(view、server響應、使用者輸入等等)傳至store的payloads，是store的唯一資訊來源\n    *   payload是承載資料的封包、訊息或程式碼\n    *   這樣確保了view和network請求都不能直接修改state，也就是說它們只能表達想要修改的意圖\n    *   因為所有的修改都被集中化處理，且嚴格按照一個接一個的順序執行，因此不用擔心race condition的出現\n\n3.  使用純函數(Reducer)來執行修改\n\n        *   為了描述action如何改變state tree ，你需要編寫reducers\n    *   Reducer只是一些純函數，它接收先前的state和action，並return新的state\n\n### Redux vs 先前技術\n\n#### Flux\n\n1.  將模型的更新邏輯全部集中於特定層(Flux的store，Redux的reducer)\n2.  Flux 和 Redux 都不允許程序直接修改數據，而是用一個叫作`action`的普通對象來對更改進行描述\n3.  不同於 Flux ，Redux 並沒有 dispatcher 的概念。它依賴純函數來替代事件處理器。純函數構建簡單，也不需額外的實體來管理它們\n4.  Flux 常常被表述為 `(state, action) =&gt; state`。從這個意義上說，Redux 無疑是 Flux 架構的實現，且得益於純函數而更為簡單。\n5.  Another important difference from Flux is that Redux assumes you never mutate your data. You should always return a new object, which is easy with the object spread operator proposal, or with a library like Immutable.\n\n#### Elm\n\n1.  Elm 是一個 Evan Czaplicki 創造並受到 Haskell 影響的 functional programming language。它強制 一個「model view update」架構，而它的 update 有以下的 signature：(action, state) =&gt; state。\n2.  跟 Redux 不一樣，Elm 是一個 language，所以它能夠從許多東西獲得好處，像是：強制的 purity、靜態型別、內建 immutability、和模式匹配 (使用 case 表達式)。即使你沒有計劃使用 Elm，你也應該閱讀一下 Elm 的架構，並玩玩看它。\n\n#### Immutable\n\n1.  Immutable 是一個實作了 persistent data structure 的 JavaScript library。\n2.  Immutable 和大部份類似的 library 跟 Redux 是互補的。請自由的結合他們一起使用！\n3.  Redux 不在意你如何儲存 state—它可以是一個一般物件、一個 Immutable 物件、或任何其他東西。你可能需要一個 (de)serialization 機制以撰寫 universal 應用程式並從伺服器 hydrating 它們的 state，但除此之外，你可以使用任何可以支援 immutability 的資料儲存 library。\n\n### Reference\n\n*   [Redux 繁體中文文件](http://chentsulin.github.io/redux/index.html)\n*   [Redux 官方文件](http://redux.js.org/)","source":"_posts/20170427-1328-02-redux-note.md","raw":"---\ntitle: '筆記｜Dez.tw重構日誌#2｜Redux筆記'\ncatalog: true\ndate: 2017-04-27 14:57:59\nsubtitle: Redux筆記\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - Redux\n    - 前端\n    - 筆記\n---\n\n### Redux核心概念\n\n1.  Redux itself is very simple.\n2.  To change something in the `state`, you need to dispatch an `action`.\n3.  An `action` is a plain JavaScript object.\n4.  Finally, to tie `state` and `actions` together, we write a function called a `reducer`.\n5.  `Reducer` is just a function that takes `state` and `action` as arguments, and returns the next state of the app.\n6.  And we  may write a root reducer to manages the complete state of our app by calling those reducers\n\n### Redux三大原則\n\n1.  單一數據源(Single source of truth)\n\n        *   整個應用的state被儲存在一棵object tree中，並且這個object tree只存在於唯一一個store中\n    *   單一state tree讓開發時調整state(CRUD)更容易，\n\n2.  State是read-only的\n\n        *   唯一能改變state的方法就是發出action\n    *   action是把數據從應用(view、server響應、使用者輸入等等)傳至store的payloads，是store的唯一資訊來源\n    *   payload是承載資料的封包、訊息或程式碼\n    *   這樣確保了view和network請求都不能直接修改state，也就是說它們只能表達想要修改的意圖\n    *   因為所有的修改都被集中化處理，且嚴格按照一個接一個的順序執行，因此不用擔心race condition的出現\n\n3.  使用純函數(Reducer)來執行修改\n\n        *   為了描述action如何改變state tree ，你需要編寫reducers\n    *   Reducer只是一些純函數，它接收先前的state和action，並return新的state\n\n### Redux vs 先前技術\n\n#### Flux\n\n1.  將模型的更新邏輯全部集中於特定層(Flux的store，Redux的reducer)\n2.  Flux 和 Redux 都不允許程序直接修改數據，而是用一個叫作`action`的普通對象來對更改進行描述\n3.  不同於 Flux ，Redux 並沒有 dispatcher 的概念。它依賴純函數來替代事件處理器。純函數構建簡單，也不需額外的實體來管理它們\n4.  Flux 常常被表述為 `(state, action) =&gt; state`。從這個意義上說，Redux 無疑是 Flux 架構的實現，且得益於純函數而更為簡單。\n5.  Another important difference from Flux is that Redux assumes you never mutate your data. You should always return a new object, which is easy with the object spread operator proposal, or with a library like Immutable.\n\n#### Elm\n\n1.  Elm 是一個 Evan Czaplicki 創造並受到 Haskell 影響的 functional programming language。它強制 一個「model view update」架構，而它的 update 有以下的 signature：(action, state) =&gt; state。\n2.  跟 Redux 不一樣，Elm 是一個 language，所以它能夠從許多東西獲得好處，像是：強制的 purity、靜態型別、內建 immutability、和模式匹配 (使用 case 表達式)。即使你沒有計劃使用 Elm，你也應該閱讀一下 Elm 的架構，並玩玩看它。\n\n#### Immutable\n\n1.  Immutable 是一個實作了 persistent data structure 的 JavaScript library。\n2.  Immutable 和大部份類似的 library 跟 Redux 是互補的。請自由的結合他們一起使用！\n3.  Redux 不在意你如何儲存 state—它可以是一個一般物件、一個 Immutable 物件、或任何其他東西。你可能需要一個 (de)serialization 機制以撰寫 universal 應用程式並從伺服器 hydrating 它們的 state，但除此之外，你可以使用任何可以支援 immutability 的資料儲存 library。\n\n### Reference\n\n*   [Redux 繁體中文文件](http://chentsulin.github.io/redux/index.html)\n*   [Redux 官方文件](http://redux.js.org/)","slug":"20170427-1328-02-redux-note","published":1,"updated":"2017-06-24T15:38:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs4o000b474u9tg81y9m","content":"<h3 id=\"redux核心概念\">Redux核心概念</h3>\n<ol>\n<li>Redux itself is very simple.</li>\n<li>To change something in the <code>state</code>, you need to dispatch an <code>action</code>.</li>\n<li>An <code>action</code> is a plain JavaScript object.</li>\n<li>Finally, to tie <code>state</code> and <code>actions</code> together, we write a function called a <code>reducer</code>.</li>\n<li><code>Reducer</code> is just a function that takes <code>state</code> and <code>action</code> as arguments, and returns the next state of the app.</li>\n<li>And we  may write a root reducer to manages the complete state of our app by calling those reducers</li>\n</ol>\n<h3 id=\"redux三大原則\">Redux三大原則</h3>\n<ol>\n<li>\n<p>單一數據源(Single source of truth)</p>\n<pre><code>*   整個應用的state被儲存在一棵object tree中，並且這個object tree只存在於唯一一個store中\n</code></pre>\n<ul>\n<li>單一state tree讓開發時調整state(CRUD)更容易，</li>\n</ul>\n</li>\n<li>\n<p>State是read-only的</p>\n<pre><code>*   唯一能改變state的方法就是發出action\n</code></pre>\n<ul>\n<li>action是把數據從應用(view、server響應、使用者輸入等等)傳至store的payloads，是store的唯一資訊來源</li>\n<li>payload是承載資料的封包、訊息或程式碼</li>\n<li>這樣確保了view和network請求都不能直接修改state，也就是說它們只能表達想要修改的意圖</li>\n<li>因為所有的修改都被集中化處理，且嚴格按照一個接一個的順序執行，因此不用擔心race condition的出現</li>\n</ul>\n</li>\n<li>\n<p>使用純函數(Reducer)來執行修改</p>\n<pre><code>*   為了描述action如何改變state tree ，你需要編寫reducers\n</code></pre>\n<ul>\n<li>Reducer只是一些純函數，它接收先前的state和action，並return新的state</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"redux-vs-先前技術\">Redux vs 先前技術</h3>\n<h4 id=\"flux\">Flux</h4>\n<ol>\n<li>將模型的更新邏輯全部集中於特定層(Flux的store，Redux的reducer)</li>\n<li>Flux 和 Redux 都不允許程序直接修改數據，而是用一個叫作<code>action</code>的普通對象來對更改進行描述</li>\n<li>不同於 Flux ，Redux 並沒有 dispatcher 的概念。它依賴純函數來替代事件處理器。純函數構建簡單，也不需額外的實體來管理它們</li>\n<li>Flux 常常被表述為 <code>(state, action) =&amp;gt; state</code>。從這個意義上說，Redux 無疑是 Flux 架構的實現，且得益於純函數而更為簡單。</li>\n<li>Another important difference from Flux is that Redux assumes you never mutate your data. You should always return a new object, which is easy with the object spread operator proposal, or with a library like Immutable.</li>\n</ol>\n<h4 id=\"elm\">Elm</h4>\n<ol>\n<li>Elm 是一個 Evan Czaplicki 創造並受到 Haskell 影響的 functional programming language。它強制 一個「model view update」架構，而它的 update 有以下的 signature：(action, state) =&gt; state。</li>\n<li>跟 Redux 不一樣，Elm 是一個 language，所以它能夠從許多東西獲得好處，像是：強制的 purity、靜態型別、內建 immutability、和模式匹配 (使用 case 表達式)。即使你沒有計劃使用 Elm，你也應該閱讀一下 Elm 的架構，並玩玩看它。</li>\n</ol>\n<h4 id=\"immutable\">Immutable</h4>\n<ol>\n<li>Immutable 是一個實作了 persistent data structure 的 JavaScript library。</li>\n<li>Immutable 和大部份類似的 library 跟 Redux 是互補的。請自由的結合他們一起使用！</li>\n<li>Redux 不在意你如何儲存 state—它可以是一個一般物件、一個 Immutable 物件、或任何其他東西。你可能需要一個 (de)serialization 機制以撰寫 universal 應用程式並從伺服器 hydrating 它們的 state，但除此之外，你可以使用任何可以支援 immutability 的資料儲存 library。</li>\n</ol>\n<h3 id=\"reference\">Reference</h3>\n<ul>\n<li><a href=\"http://chentsulin.github.io/redux/index.html\" target=\"_blank\" rel=\"external\">Redux 繁體中文文件</a></li>\n<li><a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"external\">Redux 官方文件</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3>Redux核心概念</h3>\n<ol>\n<li>Redux itself is very simple.</li>\n<li>To change something in the <code>state</code>, you need to dispatch an <code>action</code>.</li>\n<li>An <code>action</code> is a plain JavaScript object.</li>\n<li>Finally, to tie <code>state</code> and <code>actions</code> together, we write a function called a <code>reducer</code>.</li>\n<li><code>Reducer</code> is just a function that takes <code>state</code> and <code>action</code> as arguments, and returns the next state of the app.</li>\n<li>And we  may write a root reducer to manages the complete state of our app by calling those reducers</li>\n</ol>\n<h3>Redux三大原則</h3>\n<ol>\n<li>\n<p>單一數據源(Single source of truth)</p>\n<pre><code>*   整個應用的state被儲存在一棵object tree中，並且這個object tree只存在於唯一一個store中\n</code></pre>\n<ul>\n<li>單一state tree讓開發時調整state(CRUD)更容易，</li>\n</ul>\n</li>\n<li>\n<p>State是read-only的</p>\n<pre><code>*   唯一能改變state的方法就是發出action\n</code></pre>\n<ul>\n<li>action是把數據從應用(view、server響應、使用者輸入等等)傳至store的payloads，是store的唯一資訊來源</li>\n<li>payload是承載資料的封包、訊息或程式碼</li>\n<li>這樣確保了view和network請求都不能直接修改state，也就是說它們只能表達想要修改的意圖</li>\n<li>因為所有的修改都被集中化處理，且嚴格按照一個接一個的順序執行，因此不用擔心race condition的出現</li>\n</ul>\n</li>\n<li>\n<p>使用純函數(Reducer)來執行修改</p>\n<pre><code>*   為了描述action如何改變state tree ，你需要編寫reducers\n</code></pre>\n<ul>\n<li>Reducer只是一些純函數，它接收先前的state和action，並return新的state</li>\n</ul>\n</li>\n</ol>\n<h3>Redux vs 先前技術</h3>\n<h4>Flux</h4>\n<ol>\n<li>將模型的更新邏輯全部集中於特定層(Flux的store，Redux的reducer)</li>\n<li>Flux 和 Redux 都不允許程序直接修改數據，而是用一個叫作<code>action</code>的普通對象來對更改進行描述</li>\n<li>不同於 Flux ，Redux 並沒有 dispatcher 的概念。它依賴純函數來替代事件處理器。純函數構建簡單，也不需額外的實體來管理它們</li>\n<li>Flux 常常被表述為 <code>(state, action) =&amp;gt; state</code>。從這個意義上說，Redux 無疑是 Flux 架構的實現，且得益於純函數而更為簡單。</li>\n<li>Another important difference from Flux is that Redux assumes you never mutate your data. You should always return a new object, which is easy with the object spread operator proposal, or with a library like Immutable.</li>\n</ol>\n<h4>Elm</h4>\n<ol>\n<li>Elm 是一個 Evan Czaplicki 創造並受到 Haskell 影響的 functional programming language。它強制 一個「model view update」架構，而它的 update 有以下的 signature：(action, state) =&gt; state。</li>\n<li>跟 Redux 不一樣，Elm 是一個 language，所以它能夠從許多東西獲得好處，像是：強制的 purity、靜態型別、內建 immutability、和模式匹配 (使用 case 表達式)。即使你沒有計劃使用 Elm，你也應該閱讀一下 Elm 的架構，並玩玩看它。</li>\n</ol>\n<h4>Immutable</h4>\n<ol>\n<li>Immutable 是一個實作了 persistent data structure 的 JavaScript library。</li>\n<li>Immutable 和大部份類似的 library 跟 Redux 是互補的。請自由的結合他們一起使用！</li>\n<li>Redux 不在意你如何儲存 state—它可以是一個一般物件、一個 Immutable 物件、或任何其他東西。你可能需要一個 (de)serialization 機制以撰寫 universal 應用程式並從伺服器 hydrating 它們的 state，但除此之外，你可以使用任何可以支援 immutability 的資料儲存 library。</li>\n</ol>\n<h3>Reference</h3>\n<ul>\n<li><a href=\"http://chentsulin.github.io/redux/index.html\" target=\"_blank\" rel=\"external\">Redux 繁體中文文件</a></li>\n<li><a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"external\">Redux 官方文件</a></li>\n</ul>\n"},{"title":"學習｜Huli's Course#3｜CSS 預處理器｜SASS","catalog":true,"date":"2017-05-02T07:01:54.000Z","subtitle":"HW3","header-img":"../../../../img/header_img/bg.png","_content":"\n### 本章Properties\n\n*   使用sass重構css，並使用Prepros編譯成css\n\n### 其他Properties\n\n*   遮罩重構:\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>background-image: linear-gradient( rgba(0, 0, 0, .5), rgba(0, 0, 0, .5) ), url(../img/bg-default.jpg);\n</pre></div>\n</figure>\n\n*   class 名稱重構:\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;div class=\"stream-item\"&gt;\n  &lt;div class=\"preview\"&gt;&lt;/div&gt;\n  &lt;div class=\"content\"&gt;\n      &lt;div class=\"avatar\"&gt;&lt;/div&gt;\n      &lt;div class=\"stream-text\"&gt;\n        &lt;p class=\"title\"&gt;頻道名稱&lt;/p&gt;\n        &lt;p class=\"streamer\"&gt;實況主名字&lt;/p&gt;\n      &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre></div>\n</figure>\n\n*   利用HW1教的flex重構排版\n*   增加空白`stream-item`使每個元素在視窗縮放時對齊\n*   引入「思源黑體」中文網頁字型\n*   修復使用flex排版每一個item間距跑掉的問題，但暫時無法RWD\n\n### Question Set\n\n#### 1.為什麼我們需要 CSS 預處理器？沒有 CSS 預處理器的話會怎樣嗎？\n\n使用CSS預處理器能夠在往後處理更複雜的大型專案時，能有效率地偵錯與開發。\n\n#### 2.在那三套裡面，你為什麼選擇了現在這一套？理由是什麼？\n\n選擇使用sass，雖然有點想偷懶學看起來比較平易近人的Stylus，但因為[這篇](https://github.com/kamranahmedse/developer-roadmap)Roadmap推薦學習sass，實際上為什麼還需要慢慢摸索。\n\n### References\n\n*   [Sass &amp; Susy教學手冊](https://github.com/gonsakon/Learn-Sass-in-90-days)\n*   [Sass教學 (25) - 如何透過Sublime text 3 plugin打造Sass開發環境](http://ithelp.ithome.com.tw/articles/10159247)\n*   [Google Fonts 推出「思源黑體」中文網頁字型，改善網頁文字顯示效果](https://free.com.tw/google-fonts-noto-sans-cjk-webfont/)\n*   [[作業][值得參考]繳交 hw1 #12 by miau715 ](https://github.com/aszx87410/frontend-intermediate-course/issues/12)\n*   [[作業][值得參考]繳交 hw3 #53 by pychiang ](https://github.com/aszx87410/frontend-intermediate-course/issues/53)\n*   [CSS中设置margin:0 auto; 水平居中无效的原因分析](http://www.phpxs.com/post/2862/)\n\n### Troubleshooting\n\n*   `.container`無法用`margin: 0 auto`置中 [Fixed]\n\n> 原因: `.container`需指定`width`為`1000px`，若指定為`72%`會有內容元素無法對齊的問題，要做RWD可能還是需使用media query\n\n*   目前使用Prepros來編譯sass，但似乎有更多有效率地方法如`Compass`或`gulp`等等，還需要再學習摸索。\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw3/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw3/index.html)","source":"_posts/20170502-1501-huli-course-03.md","raw":"---\ntitle: '學習｜Huli''s Course#3｜CSS 預處理器｜SASS'\ncatalog: true\ndate: 2017-05-02 15:01:54\nsubtitle: HW3\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - CSS\n    - SASS\n    - 前端\n    - 初學\n---\n\n### 本章Properties\n\n*   使用sass重構css，並使用Prepros編譯成css\n\n### 其他Properties\n\n*   遮罩重構:\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>background-image: linear-gradient( rgba(0, 0, 0, .5), rgba(0, 0, 0, .5) ), url(../img/bg-default.jpg);\n</pre></div>\n</figure>\n\n*   class 名稱重構:\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;div class=\"stream-item\"&gt;\n  &lt;div class=\"preview\"&gt;&lt;/div&gt;\n  &lt;div class=\"content\"&gt;\n      &lt;div class=\"avatar\"&gt;&lt;/div&gt;\n      &lt;div class=\"stream-text\"&gt;\n        &lt;p class=\"title\"&gt;頻道名稱&lt;/p&gt;\n        &lt;p class=\"streamer\"&gt;實況主名字&lt;/p&gt;\n      &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre></div>\n</figure>\n\n*   利用HW1教的flex重構排版\n*   增加空白`stream-item`使每個元素在視窗縮放時對齊\n*   引入「思源黑體」中文網頁字型\n*   修復使用flex排版每一個item間距跑掉的問題，但暫時無法RWD\n\n### Question Set\n\n#### 1.為什麼我們需要 CSS 預處理器？沒有 CSS 預處理器的話會怎樣嗎？\n\n使用CSS預處理器能夠在往後處理更複雜的大型專案時，能有效率地偵錯與開發。\n\n#### 2.在那三套裡面，你為什麼選擇了現在這一套？理由是什麼？\n\n選擇使用sass，雖然有點想偷懶學看起來比較平易近人的Stylus，但因為[這篇](https://github.com/kamranahmedse/developer-roadmap)Roadmap推薦學習sass，實際上為什麼還需要慢慢摸索。\n\n### References\n\n*   [Sass &amp; Susy教學手冊](https://github.com/gonsakon/Learn-Sass-in-90-days)\n*   [Sass教學 (25) - 如何透過Sublime text 3 plugin打造Sass開發環境](http://ithelp.ithome.com.tw/articles/10159247)\n*   [Google Fonts 推出「思源黑體」中文網頁字型，改善網頁文字顯示效果](https://free.com.tw/google-fonts-noto-sans-cjk-webfont/)\n*   [[作業][值得參考]繳交 hw1 #12 by miau715 ](https://github.com/aszx87410/frontend-intermediate-course/issues/12)\n*   [[作業][值得參考]繳交 hw3 #53 by pychiang ](https://github.com/aszx87410/frontend-intermediate-course/issues/53)\n*   [CSS中设置margin:0 auto; 水平居中无效的原因分析](http://www.phpxs.com/post/2862/)\n\n### Troubleshooting\n\n*   `.container`無法用`margin: 0 auto`置中 [Fixed]\n\n> 原因: `.container`需指定`width`為`1000px`，若指定為`72%`會有內容元素無法對齊的問題，要做RWD可能還是需使用media query\n\n*   目前使用Prepros來編譯sass，但似乎有更多有效率地方法如`Compass`或`gulp`等等，還需要再學習摸索。\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw3/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw3/index.html)","slug":"20170502-1501-huli-course-03","published":1,"updated":"2017-06-24T15:37:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs4q000d474un3huezif","content":"<h3 id=\"本章properties\">本章Properties</h3>\n<ul>\n<li>使用sass重構css，並使用Prepros編譯成css</li>\n</ul>\n<h3 id=\"其他properties\">其他Properties</h3>\n<ul>\n<li>遮罩重構:</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>background-image: linear-gradient( rgba(0, 0, 0, .5), rgba(0, 0, 0, .5) ), url(../img/bg-default.jpg);\n</pre></div>\n</figure>\n<ul>\n<li>class 名稱重構:</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;div class=\"stream-item\"&gt;\n  &lt;div class=\"preview\"&gt;&lt;/div&gt;\n  &lt;div class=\"content\"&gt;\n      &lt;div class=\"avatar\"&gt;&lt;/div&gt;\n      &lt;div class=\"stream-text\"&gt;\n        &lt;p class=\"title\"&gt;頻道名稱&lt;/p&gt;\n        &lt;p class=\"streamer\"&gt;實況主名字&lt;/p&gt;\n      &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre></div>\n</figure>\n<ul>\n<li>利用HW1教的flex重構排版</li>\n<li>增加空白<code>stream-item</code>使每個元素在視窗縮放時對齊</li>\n<li>引入「思源黑體」中文網頁字型</li>\n<li>修復使用flex排版每一個item間距跑掉的問題，但暫時無法RWD</li>\n</ul>\n<h3 id=\"question-set\">Question Set</h3>\n<h4 id=\"1為什麼我們需要-css-預處理器沒有-css-預處理器的話會怎樣嗎\">1.為什麼我們需要 CSS 預處理器？沒有 CSS 預處理器的話會怎樣嗎？</h4>\n<p>使用CSS預處理器能夠在往後處理更複雜的大型專案時，能有效率地偵錯與開發。</p>\n<h4 id=\"2在那三套裡面你為什麼選擇了現在這一套理由是什麼\">2.在那三套裡面，你為什麼選擇了現在這一套？理由是什麼？</h4>\n<p>選擇使用sass，雖然有點想偷懶學看起來比較平易近人的Stylus，但因為<a href=\"https://github.com/kamranahmedse/developer-roadmap\" target=\"_blank\" rel=\"external\">這篇</a>Roadmap推薦學習sass，實際上為什麼還需要慢慢摸索。</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gonsakon/Learn-Sass-in-90-days\" target=\"_blank\" rel=\"external\">Sass &amp; Susy教學手冊</a></li>\n<li><a href=\"http://ithelp.ithome.com.tw/articles/10159247\" target=\"_blank\" rel=\"external\">Sass教學 (25) - 如何透過Sublime text 3 plugin打造Sass開發環境</a></li>\n<li><a href=\"https://free.com.tw/google-fonts-noto-sans-cjk-webfont/\" target=\"_blank\" rel=\"external\">Google Fonts 推出「思源黑體」中文網頁字型，改善網頁文字顯示效果</a></li>\n<li><a href=\"https://github.com/aszx87410/frontend-intermediate-course/issues/12\" target=\"_blank\" rel=\"external\">[作業][值得參考]繳交 hw1 #12 by miau715 </a></li>\n<li><a href=\"https://github.com/aszx87410/frontend-intermediate-course/issues/53\" target=\"_blank\" rel=\"external\">[作業][值得參考]繳交 hw3 #53 by pychiang </a></li>\n<li><a href=\"http://www.phpxs.com/post/2862/\" target=\"_blank\" rel=\"external\">CSS中设置margin:0 auto; 水平居中无效的原因分析</a></li>\n</ul>\n<h3 id=\"troubleshooting\">Troubleshooting</h3>\n<ul>\n<li><code>.container</code>無法用<code>margin: 0 auto</code>置中 [Fixed]</li>\n</ul>\n<blockquote>\n<p>原因: <code>.container</code>需指定<code>width</code>為<code>1000px</code>，若指定為<code>72%</code>會有內容元素無法對齊的問題，要做RWD可能還是需使用media query</p>\n</blockquote>\n<ul>\n<li>目前使用Prepros來編譯sass，但似乎有更多有效率地方法如<code>Compass</code>或<code>gulp</code>等等，還需要再學習摸索。</li>\n</ul>\n<h3 id=\"demo\">Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw3/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw3/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>本章Properties</h3>\n<ul>\n<li>使用sass重構css，並使用Prepros編譯成css</li>\n</ul>\n<h3>其他Properties</h3>\n<ul>\n<li>遮罩重構:</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>background-image: linear-gradient( rgba(0, 0, 0, .5), rgba(0, 0, 0, .5) ), url(../img/bg-default.jpg);\n</pre></div>\n</figure>\n<ul>\n<li>class 名稱重構:</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;div class=\"stream-item\"&gt;\n  &lt;div class=\"preview\"&gt;&lt;/div&gt;\n  &lt;div class=\"content\"&gt;\n      &lt;div class=\"avatar\"&gt;&lt;/div&gt;\n      &lt;div class=\"stream-text\"&gt;\n        &lt;p class=\"title\"&gt;頻道名稱&lt;/p&gt;\n        &lt;p class=\"streamer\"&gt;實況主名字&lt;/p&gt;\n      &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre></div>\n</figure>\n<ul>\n<li>利用HW1教的flex重構排版</li>\n<li>增加空白<code>stream-item</code>使每個元素在視窗縮放時對齊</li>\n<li>引入「思源黑體」中文網頁字型</li>\n<li>修復使用flex排版每一個item間距跑掉的問題，但暫時無法RWD</li>\n</ul>\n<h3>Question Set</h3>\n<h4>1.為什麼我們需要 CSS 預處理器？沒有 CSS 預處理器的話會怎樣嗎？</h4>\n<p>使用CSS預處理器能夠在往後處理更複雜的大型專案時，能有效率地偵錯與開發。</p>\n<h4>2.在那三套裡面，你為什麼選擇了現在這一套？理由是什麼？</h4>\n<p>選擇使用sass，雖然有點想偷懶學看起來比較平易近人的Stylus，但因為<a href=\"https://github.com/kamranahmedse/developer-roadmap\" target=\"_blank\" rel=\"external\">這篇</a>Roadmap推薦學習sass，實際上為什麼還需要慢慢摸索。</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://github.com/gonsakon/Learn-Sass-in-90-days\" target=\"_blank\" rel=\"external\">Sass &amp; Susy教學手冊</a></li>\n<li><a href=\"http://ithelp.ithome.com.tw/articles/10159247\" target=\"_blank\" rel=\"external\">Sass教學 (25) - 如何透過Sublime text 3 plugin打造Sass開發環境</a></li>\n<li><a href=\"https://free.com.tw/google-fonts-noto-sans-cjk-webfont/\" target=\"_blank\" rel=\"external\">Google Fonts 推出「思源黑體」中文網頁字型，改善網頁文字顯示效果</a></li>\n<li><a href=\"https://github.com/aszx87410/frontend-intermediate-course/issues/12\" target=\"_blank\" rel=\"external\">[作業][值得參考]繳交 hw1 #12 by miau715 </a></li>\n<li><a href=\"https://github.com/aszx87410/frontend-intermediate-course/issues/53\" target=\"_blank\" rel=\"external\">[作業][值得參考]繳交 hw3 #53 by pychiang </a></li>\n<li><a href=\"http://www.phpxs.com/post/2862/\" target=\"_blank\" rel=\"external\">CSS中设置margin:0 auto; 水平居中无效的原因分析</a></li>\n</ul>\n<h3>Troubleshooting</h3>\n<ul>\n<li><code>.container</code>無法用<code>margin: 0 auto</code>置中 [Fixed]</li>\n</ul>\n<blockquote>\n<p>原因: <code>.container</code>需指定<code>width</code>為<code>1000px</code>，若指定為<code>72%</code>會有內容元素無法對齊的問題，要做RWD可能還是需使用media query</p>\n</blockquote>\n<ul>\n<li>目前使用Prepros來編譯sass，但似乎有更多有效率地方法如<code>Compass</code>或<code>gulp</code>等等，還需要再學習摸索。</li>\n</ul>\n<h3>Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw3/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw3/index.html</a></p>\n"},{"title":"學習｜Huli's Course#4｜Ajax 與 API 串接","catalog":true,"date":"2017-05-09T07:01:40.000Z","subtitle":"HW4","header-img":"../../../../img/header_img/bg.png","_content":"\n### Properties\n\n*   移除`.container`的`justify-content: space-around`使最下方對齊\n*   串接 [Twitch API](https://dev.twitch.tv/docs/v5/reference/streams/#get-live-streams)\n\n*   使用jQuery的   `$.ajax()`來做asynchronous HTTP (Ajax) request\n*   從影片中學到ES6語法[template strings](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals)可讓jQuery包住的HTML內容，更容易維護\n\n### Question Set\n\n#### 1.HTTP method 有哪幾個？有什麼不一樣？\n\n*   GET: 讀取資源 (safe &amp; idempotent)\n*   PUT: 替換資源 (idempotent)\n*   DELETE: 刪除資源 (idempotent)\n*   POST: 新增資源；也作為萬用動詞，處理其它要求\n*   PATCH: 更新資源部份內容\n*   HEAD: 類似GET，但只回傳HTTP header (safe &amp; idempotent)\n*   其它還有一些較少用到的，可參考[Wikipedia: Hypertext Transfer Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods)\n\nidempotent 的意思是如果相同的操作再執行第二遍第三遍，結果還是跟第一遍的結果一樣 (也就是說不管執行幾次，結果都跟只有執行一次一樣)。\n\n另一個 HTTP Methods 特性是”Safe”，這比較簡單，只有 GET 和 HEAD 是 Safe 操作。Safe 特性會影響是否可以快取(POST/PUT/PATCH/DELETE 一定都不可以快取)。而 Idempotent 特性則是會影響可否 Retry (重試，反正結果一樣)。\n\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>SAFE?</th>\n<th>IDEMPOTENT?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n\nfrom [here](https://ihower.tw/blog/archives/6483)\n\n#### 2.GET 跟 POST 有哪些區別，可以試著舉幾個例子嗎？\n\n##### GET\n\n傳送的值藉由GET請求URL發送，簡單來說GET是把資料放在header進行傳送，而在網址列會看到\"[http://www.xxx.com/test/index.php?test1=value1&amp;test2=value2](http://www.xxx.com/test/index.php?test1=value1&amp;test2=value2)\"。\n\n同時，使用GET方式傳遞的話，並不適合傳送些隱密性較高的資料(例如：Password)，因為在傳送的過程中就會顯示在網址列上\n\n而GET的請求會被Cache紀錄、GET的請求受限於 QueryString 長度限制(依瀏覽器規定)，因此GET的使用時機應為檢視資料時使用。\n\n##### POST\n\n傳送的值藉由POST請求HTTP發送，簡單來說POST是把資料放在訊息主體內進行傳送。\n\n而POST的請求不會被Cache紀錄、POST的請求對資料長度沒有限制，因此POST比GET更安全，所以較適合用來傳送隱密性較高的資料。\n\n範例 - 以Node.js做blog登入為例：\n\n*   GET\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>//handling user log in\nrouter.get(\"/login\", passport.authenticate(\"local\",{\n    ...\n}), function(req, res){});\n</pre></div>\n</figure>\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;form action=\"/login\" method=\"get\"&gt;\n    ...\n&lt;/form&gt;\n</pre></div>\n</figure>\n\n登入後網址列回傳：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>http://localhost:5000/login?username=dez&amp;password=dez\n</pre></div>\n</figure>\n\n*   POST\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>//handling user log in\nrouter.post(\"/login\", passport.authenticate(\"local\",{\n    ...\n}), function(req, res){});\n</pre></div>\n</figure>\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;form action=\"/login\" method=\"post\"&gt;\n    ...\n&lt;/form&gt;\n</pre></div>\n</figure>\n\n登入後網址列回傳：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>http://localhost:5000/posts\n</pre></div>\n</figure>\n\n#### 3.什麼是 RESTful API？\n\nRESTful API是一種設計風格，這種風格使API設計具有整體一致性，易於維護、擴展，並且充份利用HTTP協定的特點。\n\n嚴格來說REST符合以下幾個條件:\n\n*   應用程式的狀態跟功能拆成 resources\n*   每個 resource 使用獨一無二用來當作超連結的通用定位語法(在WWW中即URI)\n*   所有 resources 共用一致的介面在 client 跟 resource 之間轉換狀態，包括:\n\n        *   一組有限的良好定義操作 well-defined operations (在HTTP中即 GET/POST/PUT/DELETE)\n    *   一組有限的內容格式 content types,也許包括 可執行的程式碼 code-on-demand (在WWW中即Javascript)\n\n*   這種通訊協定 protocol (在WWW中即用HTTP) 包含以下特色:\n\n        *   使用者端/伺服器端 Client/Server\n    *   狀態無關 Stateless\n    *   可以快取 Cacheable\n    *   分層的 Layered\n\n符合 REST principles 的系統稱做 RESTful。\n\n每個 resource 擁有自己的識別名詞，而 Clients 從單一 resource 開始瀏覽，透過標準操作走訪 resource ，如 GET 下載，PUT更新，DELETE刪除，POST新增，注意到每個物件有自己的URL，而且可以容易被快取，複製跟書籤化(bookmarked)。\n\n#### 4.JSON 是什麼？\n\nJSON（JavaScript Object Notation）是個以純文字為基底去儲存和傳送簡單結構資料，你可以透過特定的格式去儲存任何資料(字串,數字,陣列,物件)，也可以透過物件或陣列來傳送較複雜的資料。最常被用在 Web 網頁程式從 Server 端傳送資料給 browser，典型範例就是透過 AJAX 方式交換 JSON 資料\n\n範例：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>{\n    \"firstName\": \"Dez\",\n    \"lastName\": \"Chuang\",\n    \"sex\": \"male\",\n    \"age\": 25,\n    \"address\":\n    {\n        \"streetAddress\": \"21 2nd Street\",\n        \"city\": \"New York\",\n        \"state\": \"NY\",\n        \"postalCode\": \"10021\"\n    },\n    \"phoneNumber\":\n    [\n        {\n          \"type\": \"home\",\n          \"number\": \"212 555-1234\"\n        },\n        {\n          \"type\": \"fax\",\n          \"number\": \"646 555-4567\"\n        }\n    ]\n}\n</pre></div>\n</figure>\n\n#### 5.JSONP 是什麼？\n\nJSONP (JSON with Padding)，原理是 `script` 標籤可以跨網域，在 HTML 裡面有幾個標籤不受到跨網域的限制，`script` 是其中一個。\n\n可以在 HTML 裡引入 API URL 到 `script` 裡，然後定義 callback function 的參數，在 JavaScript 檔案裡用 callback function 呼叫出 JSONP 的資料。或是直接在 JavaScript 檔案裡引入 API URL 再利用 callback function 也可以。但是一般不建議使用 JSONP，因為如果引入 `script` 的網站遭駭客入侵，自身的網站也會受到影響。\n\n#### 6.要如何存取跨網域的 API？\n\n1.  JSONP\n2.  CORS (cross-origin resource sharing)\n\n在 Response Header 中 Access-Control-Allow-Origin 可以看到 API 資料是否有開放跨網域存取。\n\n跨網域存取分成：\n\n    a. 簡單請求：只允許 `GET`、`HEAD`、`POST` 這三個方法。\n\nb. 先導請求 (Preflight Request)：先以 HTTP 的 OPTIONS 方法送出 request 到另一個網域，確定 Access-Control-Allow-Origin 沒問題後，才送出真正的 response 到此網域中。所以會發生送出一個 request 但有兩個 response，先導請求是瀏覽器驗證是否有開放跨網域存取的方法。如果想要避免先導請求多產生出來的 response，可以取消字定義的標頭（例如 `setRequestHeader`）就可以解決了。\n\n不過，要是遠端伺服器沒有開放跨網域存取，不管用什麼方法瀏覽器都沒辦法存取資料的。\n\n### References\n\n*   [jQuery.ajax()](http://api.jquery.com/jquery.ajax/)\n*   [簡明RESTful API設計要點](https://tw.twincl.com/programming/*641y)\n*   [什麼是REST跟RESTful?](https://ihower.tw/blog/archives/1542)\n*   [Wikipedia: Hypertext Transfer Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods)\n*   [[鐵人賽Day2] GET/POST 的差異與配合PHP用法](http://ithelp.ithome.com.tw/articles/10155801)\n*   [瞭解JSON格式](http://j796160836.pixnet.net/blog/post/30530326-%E7%9E%AD%E8%A7%A3json%E6%A0%BC%E5%BC%8F)\n*   [你不可不知的 JSON 基本介紹](https://blog.wu-boy.com/2011/04/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84-json-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/)\n*   pychiang大大的筆記 on Slack\n\n### Troubleshooting\n\n*   `preview`與`content`間空白需修復\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;img class='preview' src=\"${data.streams[x].preview.medium}\"&gt;\n解法1: vertiical-align:bottom;\n解法2: display:block;\n</pre></div>\n</figure>\n\n參考[【CSS】圖像產生間隙，空一行，如何解決？](https://www.pkstep.com/archives/2323)\n\n### 後記\n\n*   對於API存取尚不熟悉，對於twitch的client-id花了不少時間才搞定\n*   終於可以把HTML裡一大串的stream item交給js去render了，方便維護\n*   對於非同步概念需加強，Slack各位大大們討論的都增加許多見識，還有很多文件要survey\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw4/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw4/index.html)","source":"_posts/20170509-1501-huli-course-04.md","raw":"---\ntitle: '學習｜Huli''s Course#4｜Ajax 與 API 串接'\ncatalog: true\ndate: 2017-05-09 15:01:40\nsubtitle: HW4\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - Ajax\n    - API\n    - jQuery\n    - 前端\n    - 初學\n---\n\n### Properties\n\n*   移除`.container`的`justify-content: space-around`使最下方對齊\n*   串接 [Twitch API](https://dev.twitch.tv/docs/v5/reference/streams/#get-live-streams)\n\n*   使用jQuery的   `$.ajax()`來做asynchronous HTTP (Ajax) request\n*   從影片中學到ES6語法[template strings](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals)可讓jQuery包住的HTML內容，更容易維護\n\n### Question Set\n\n#### 1.HTTP method 有哪幾個？有什麼不一樣？\n\n*   GET: 讀取資源 (safe &amp; idempotent)\n*   PUT: 替換資源 (idempotent)\n*   DELETE: 刪除資源 (idempotent)\n*   POST: 新增資源；也作為萬用動詞，處理其它要求\n*   PATCH: 更新資源部份內容\n*   HEAD: 類似GET，但只回傳HTTP header (safe &amp; idempotent)\n*   其它還有一些較少用到的，可參考[Wikipedia: Hypertext Transfer Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods)\n\nidempotent 的意思是如果相同的操作再執行第二遍第三遍，結果還是跟第一遍的結果一樣 (也就是說不管執行幾次，結果都跟只有執行一次一樣)。\n\n另一個 HTTP Methods 特性是”Safe”，這比較簡單，只有 GET 和 HEAD 是 Safe 操作。Safe 特性會影響是否可以快取(POST/PUT/PATCH/DELETE 一定都不可以快取)。而 Idempotent 特性則是會影響可否 Retry (重試，反正結果一樣)。\n\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>SAFE?</th>\n<th>IDEMPOTENT?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n\nfrom [here](https://ihower.tw/blog/archives/6483)\n\n#### 2.GET 跟 POST 有哪些區別，可以試著舉幾個例子嗎？\n\n##### GET\n\n傳送的值藉由GET請求URL發送，簡單來說GET是把資料放在header進行傳送，而在網址列會看到\"[http://www.xxx.com/test/index.php?test1=value1&amp;test2=value2](http://www.xxx.com/test/index.php?test1=value1&amp;test2=value2)\"。\n\n同時，使用GET方式傳遞的話，並不適合傳送些隱密性較高的資料(例如：Password)，因為在傳送的過程中就會顯示在網址列上\n\n而GET的請求會被Cache紀錄、GET的請求受限於 QueryString 長度限制(依瀏覽器規定)，因此GET的使用時機應為檢視資料時使用。\n\n##### POST\n\n傳送的值藉由POST請求HTTP發送，簡單來說POST是把資料放在訊息主體內進行傳送。\n\n而POST的請求不會被Cache紀錄、POST的請求對資料長度沒有限制，因此POST比GET更安全，所以較適合用來傳送隱密性較高的資料。\n\n範例 - 以Node.js做blog登入為例：\n\n*   GET\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>//handling user log in\nrouter.get(\"/login\", passport.authenticate(\"local\",{\n    ...\n}), function(req, res){});\n</pre></div>\n</figure>\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;form action=\"/login\" method=\"get\"&gt;\n    ...\n&lt;/form&gt;\n</pre></div>\n</figure>\n\n登入後網址列回傳：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>http://localhost:5000/login?username=dez&amp;password=dez\n</pre></div>\n</figure>\n\n*   POST\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>//handling user log in\nrouter.post(\"/login\", passport.authenticate(\"local\",{\n    ...\n}), function(req, res){});\n</pre></div>\n</figure>\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;form action=\"/login\" method=\"post\"&gt;\n    ...\n&lt;/form&gt;\n</pre></div>\n</figure>\n\n登入後網址列回傳：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>http://localhost:5000/posts\n</pre></div>\n</figure>\n\n#### 3.什麼是 RESTful API？\n\nRESTful API是一種設計風格，這種風格使API設計具有整體一致性，易於維護、擴展，並且充份利用HTTP協定的特點。\n\n嚴格來說REST符合以下幾個條件:\n\n*   應用程式的狀態跟功能拆成 resources\n*   每個 resource 使用獨一無二用來當作超連結的通用定位語法(在WWW中即URI)\n*   所有 resources 共用一致的介面在 client 跟 resource 之間轉換狀態，包括:\n\n        *   一組有限的良好定義操作 well-defined operations (在HTTP中即 GET/POST/PUT/DELETE)\n    *   一組有限的內容格式 content types,也許包括 可執行的程式碼 code-on-demand (在WWW中即Javascript)\n\n*   這種通訊協定 protocol (在WWW中即用HTTP) 包含以下特色:\n\n        *   使用者端/伺服器端 Client/Server\n    *   狀態無關 Stateless\n    *   可以快取 Cacheable\n    *   分層的 Layered\n\n符合 REST principles 的系統稱做 RESTful。\n\n每個 resource 擁有自己的識別名詞，而 Clients 從單一 resource 開始瀏覽，透過標準操作走訪 resource ，如 GET 下載，PUT更新，DELETE刪除，POST新增，注意到每個物件有自己的URL，而且可以容易被快取，複製跟書籤化(bookmarked)。\n\n#### 4.JSON 是什麼？\n\nJSON（JavaScript Object Notation）是個以純文字為基底去儲存和傳送簡單結構資料，你可以透過特定的格式去儲存任何資料(字串,數字,陣列,物件)，也可以透過物件或陣列來傳送較複雜的資料。最常被用在 Web 網頁程式從 Server 端傳送資料給 browser，典型範例就是透過 AJAX 方式交換 JSON 資料\n\n範例：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>{\n    \"firstName\": \"Dez\",\n    \"lastName\": \"Chuang\",\n    \"sex\": \"male\",\n    \"age\": 25,\n    \"address\":\n    {\n        \"streetAddress\": \"21 2nd Street\",\n        \"city\": \"New York\",\n        \"state\": \"NY\",\n        \"postalCode\": \"10021\"\n    },\n    \"phoneNumber\":\n    [\n        {\n          \"type\": \"home\",\n          \"number\": \"212 555-1234\"\n        },\n        {\n          \"type\": \"fax\",\n          \"number\": \"646 555-4567\"\n        }\n    ]\n}\n</pre></div>\n</figure>\n\n#### 5.JSONP 是什麼？\n\nJSONP (JSON with Padding)，原理是 `script` 標籤可以跨網域，在 HTML 裡面有幾個標籤不受到跨網域的限制，`script` 是其中一個。\n\n可以在 HTML 裡引入 API URL 到 `script` 裡，然後定義 callback function 的參數，在 JavaScript 檔案裡用 callback function 呼叫出 JSONP 的資料。或是直接在 JavaScript 檔案裡引入 API URL 再利用 callback function 也可以。但是一般不建議使用 JSONP，因為如果引入 `script` 的網站遭駭客入侵，自身的網站也會受到影響。\n\n#### 6.要如何存取跨網域的 API？\n\n1.  JSONP\n2.  CORS (cross-origin resource sharing)\n\n在 Response Header 中 Access-Control-Allow-Origin 可以看到 API 資料是否有開放跨網域存取。\n\n跨網域存取分成：\n\n    a. 簡單請求：只允許 `GET`、`HEAD`、`POST` 這三個方法。\n\nb. 先導請求 (Preflight Request)：先以 HTTP 的 OPTIONS 方法送出 request 到另一個網域，確定 Access-Control-Allow-Origin 沒問題後，才送出真正的 response 到此網域中。所以會發生送出一個 request 但有兩個 response，先導請求是瀏覽器驗證是否有開放跨網域存取的方法。如果想要避免先導請求多產生出來的 response，可以取消字定義的標頭（例如 `setRequestHeader`）就可以解決了。\n\n不過，要是遠端伺服器沒有開放跨網域存取，不管用什麼方法瀏覽器都沒辦法存取資料的。\n\n### References\n\n*   [jQuery.ajax()](http://api.jquery.com/jquery.ajax/)\n*   [簡明RESTful API設計要點](https://tw.twincl.com/programming/*641y)\n*   [什麼是REST跟RESTful?](https://ihower.tw/blog/archives/1542)\n*   [Wikipedia: Hypertext Transfer Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods)\n*   [[鐵人賽Day2] GET/POST 的差異與配合PHP用法](http://ithelp.ithome.com.tw/articles/10155801)\n*   [瞭解JSON格式](http://j796160836.pixnet.net/blog/post/30530326-%E7%9E%AD%E8%A7%A3json%E6%A0%BC%E5%BC%8F)\n*   [你不可不知的 JSON 基本介紹](https://blog.wu-boy.com/2011/04/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84-json-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/)\n*   pychiang大大的筆記 on Slack\n\n### Troubleshooting\n\n*   `preview`與`content`間空白需修復\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;img class='preview' src=\"${data.streams[x].preview.medium}\"&gt;\n解法1: vertiical-align:bottom;\n解法2: display:block;\n</pre></div>\n</figure>\n\n參考[【CSS】圖像產生間隙，空一行，如何解決？](https://www.pkstep.com/archives/2323)\n\n### 後記\n\n*   對於API存取尚不熟悉，對於twitch的client-id花了不少時間才搞定\n*   終於可以把HTML裡一大串的stream item交給js去render了，方便維護\n*   對於非同步概念需加強，Slack各位大大們討論的都增加許多見識，還有很多文件要survey\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw4/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw4/index.html)","slug":"20170509-1501-huli-course-04","published":1,"updated":"2017-06-24T15:37:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs4t000e474u4wcxqp5v","content":"<h3 id=\"properties\">Properties</h3>\n<ul>\n<li>\n<p>移除<code>.container</code>的<code>justify-content: space-around</code>使最下方對齊</p>\n</li>\n<li>\n<p>串接 <a href=\"https://dev.twitch.tv/docs/v5/reference/streams/#get-live-streams\" target=\"_blank\" rel=\"external\">Twitch API</a></p>\n</li>\n<li>\n<p>使用jQuery的   <code>$.ajax()</code>來做asynchronous HTTP (Ajax) request</p>\n</li>\n<li>\n<p>從影片中學到ES6語法<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" rel=\"external\">template strings</a>可讓jQuery包住的HTML內容，更容易維護</p>\n</li>\n</ul>\n<h3 id=\"question-set\">Question Set</h3>\n<h4 id=\"1http-method-有哪幾個有什麼不一樣\">1.HTTP method 有哪幾個？有什麼不一樣？</h4>\n<ul>\n<li>GET: 讀取資源 (safe &amp; idempotent)</li>\n<li>PUT: 替換資源 (idempotent)</li>\n<li>DELETE: 刪除資源 (idempotent)</li>\n<li>POST: 新增資源；也作為萬用動詞，處理其它要求</li>\n<li>PATCH: 更新資源部份內容</li>\n<li>HEAD: 類似GET，但只回傳HTTP header (safe &amp; idempotent)</li>\n<li>其它還有一些較少用到的，可參考<a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods\" target=\"_blank\" rel=\"external\">Wikipedia: Hypertext Transfer Protocol</a></li>\n</ul>\n<p>idempotent 的意思是如果相同的操作再執行第二遍第三遍，結果還是跟第一遍的結果一樣 (也就是說不管執行幾次，結果都跟只有執行一次一樣)。</p>\n<p>另一個 HTTP Methods 特性是”Safe”，這比較簡單，只有 GET 和 HEAD 是 Safe 操作。Safe 特性會影響是否可以快取(POST/PUT/PATCH/DELETE 一定都不可以快取)。而 Idempotent 特性則是會影響可否 Retry (重試，反正結果一樣)。</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>SAFE?</th>\n<th>IDEMPOTENT?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n<p>from <a href=\"https://ihower.tw/blog/archives/6483\" target=\"_blank\" rel=\"external\">here</a></p>\n<h4 id=\"2get-跟-post-有哪些區別可以試著舉幾個例子嗎\">2.GET 跟 POST 有哪些區別，可以試著舉幾個例子嗎？</h4>\n<h5 id=\"get\">GET</h5>\n<p>傳送的值藉由GET請求URL發送，簡單來說GET是把資料放在header進行傳送，而在網址列會看到&quot;<a href=\"http://www.xxx.com/test/index.php?test1=value1&amp;test2=value2\" target=\"_blank\" rel=\"external\">http://www.xxx.com/test/index.php?test1=value1&amp;test2=value2</a>&quot;。</p>\n<p>同時，使用GET方式傳遞的話，並不適合傳送些隱密性較高的資料(例如：Password)，因為在傳送的過程中就會顯示在網址列上</p>\n<p>而GET的請求會被Cache紀錄、GET的請求受限於 QueryString 長度限制(依瀏覽器規定)，因此GET的使用時機應為檢視資料時使用。</p>\n<h5 id=\"post\">POST</h5>\n<p>傳送的值藉由POST請求HTTP發送，簡單來說POST是把資料放在訊息主體內進行傳送。</p>\n<p>而POST的請求不會被Cache紀錄、POST的請求對資料長度沒有限制，因此POST比GET更安全，所以較適合用來傳送隱密性較高的資料。</p>\n<p>範例 - 以Node.js做blog登入為例：</p>\n<ul>\n<li>GET</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>//handling user log in\nrouter.get(\"/login\", passport.authenticate(\"local\",{\n    ...\n}), function(req, res){});\n</pre></div>\n</figure>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;form action=\"/login\" method=\"get\"&gt;\n    ...\n&lt;/form&gt;\n</pre></div>\n</figure>\n<p>登入後網址列回傳：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>http://localhost:5000/login?username=dez&amp;password=dez\n</pre></div>\n</figure>\n<ul>\n<li>POST</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>//handling user log in\nrouter.post(\"/login\", passport.authenticate(\"local\",{\n    ...\n}), function(req, res){});\n</pre></div>\n</figure>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;form action=\"/login\" method=\"post\"&gt;\n    ...\n&lt;/form&gt;\n</pre></div>\n</figure>\n<p>登入後網址列回傳：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>http://localhost:5000/posts\n</pre></div>\n</figure>\n<h4 id=\"3什麼是-restful-api\">3.什麼是 RESTful API？</h4>\n<p>RESTful API是一種設計風格，這種風格使API設計具有整體一致性，易於維護、擴展，並且充份利用HTTP協定的特點。</p>\n<p>嚴格來說REST符合以下幾個條件:</p>\n<ul>\n<li>\n<p>應用程式的狀態跟功能拆成 resources</p>\n</li>\n<li>\n<p>每個 resource 使用獨一無二用來當作超連結的通用定位語法(在WWW中即URI)</p>\n</li>\n<li>\n<p>所有 resources 共用一致的介面在 client 跟 resource 之間轉換狀態，包括:</p>\n<pre><code>*   一組有限的良好定義操作 well-defined operations (在HTTP中即 GET/POST/PUT/DELETE)\n</code></pre>\n<ul>\n<li>一組有限的內容格式 content types,也許包括 可執行的程式碼 code-on-demand (在WWW中即Javascript)</li>\n</ul>\n</li>\n<li>\n<p>這種通訊協定 protocol (在WWW中即用HTTP) 包含以下特色:</p>\n<pre><code>*   使用者端/伺服器端 Client/Server\n</code></pre>\n<ul>\n<li>狀態無關 Stateless</li>\n<li>可以快取 Cacheable</li>\n<li>分層的 Layered</li>\n</ul>\n</li>\n</ul>\n<p>符合 REST principles 的系統稱做 RESTful。</p>\n<p>每個 resource 擁有自己的識別名詞，而 Clients 從單一 resource 開始瀏覽，透過標準操作走訪 resource ，如 GET 下載，PUT更新，DELETE刪除，POST新增，注意到每個物件有自己的URL，而且可以容易被快取，複製跟書籤化(bookmarked)。</p>\n<h4 id=\"4json-是什麼\">4.JSON 是什麼？</h4>\n<p>JSON（JavaScript Object Notation）是個以純文字為基底去儲存和傳送簡單結構資料，你可以透過特定的格式去儲存任何資料(字串,數字,陣列,物件)，也可以透過物件或陣列來傳送較複雜的資料。最常被用在 Web 網頁程式從 Server 端傳送資料給 browser，典型範例就是透過 AJAX 方式交換 JSON 資料</p>\n<p>範例：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>{\n    \"firstName\": \"Dez\",\n    \"lastName\": \"Chuang\",\n    \"sex\": \"male\",\n    \"age\": 25,\n    \"address\":\n    {\n        \"streetAddress\": \"21 2nd Street\",\n        \"city\": \"New York\",\n        \"state\": \"NY\",\n        \"postalCode\": \"10021\"\n    },\n    \"phoneNumber\":\n    [\n        {\n          \"type\": \"home\",\n          \"number\": \"212 555-1234\"\n        },\n        {\n          \"type\": \"fax\",\n          \"number\": \"646 555-4567\"\n        }\n    ]\n}\n</pre></div>\n</figure>\n<h4 id=\"5jsonp-是什麼\">5.JSONP 是什麼？</h4>\n<p>JSONP (JSON with Padding)，原理是 <code>script</code> 標籤可以跨網域，在 HTML 裡面有幾個標籤不受到跨網域的限制，<code>script</code> 是其中一個。</p>\n<p>可以在 HTML 裡引入 API URL 到 <code>script</code> 裡，然後定義 callback function 的參數，在 JavaScript 檔案裡用 callback function 呼叫出 JSONP 的資料。或是直接在 JavaScript 檔案裡引入 API URL 再利用 callback function 也可以。但是一般不建議使用 JSONP，因為如果引入 <code>script</code> 的網站遭駭客入侵，自身的網站也會受到影響。</p>\n<h4 id=\"6要如何存取跨網域的-api\">6.要如何存取跨網域的 API？</h4>\n<ol>\n<li>JSONP</li>\n<li>CORS (cross-origin resource sharing)</li>\n</ol>\n<p>在 Response Header 中 Access-Control-Allow-Origin 可以看到 API 資料是否有開放跨網域存取。</p>\n<p>跨網域存取分成：</p>\n<pre><code>a. 簡單請求：只允許 `GET`、`HEAD`、`POST` 這三個方法。\n</code></pre>\n<p>b. 先導請求 (Preflight Request)：先以 HTTP 的 OPTIONS 方法送出 request 到另一個網域，確定 Access-Control-Allow-Origin 沒問題後，才送出真正的 response 到此網域中。所以會發生送出一個 request 但有兩個 response，先導請求是瀏覽器驗證是否有開放跨網域存取的方法。如果想要避免先導請求多產生出來的 response，可以取消字定義的標頭（例如 <code>setRequestHeader</code>）就可以解決了。</p>\n<p>不過，要是遠端伺服器沒有開放跨網域存取，不管用什麼方法瀏覽器都沒辦法存取資料的。</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"http://api.jquery.com/jquery.ajax/\" target=\"_blank\" rel=\"external\">jQuery.ajax()</a></li>\n<li><a href=\"https://tw.twincl.com/programming/*641y\" target=\"_blank\" rel=\"external\">簡明RESTful API設計要點</a></li>\n<li><a href=\"https://ihower.tw/blog/archives/1542\" target=\"_blank\" rel=\"external\">什麼是REST跟RESTful?</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods\" target=\"_blank\" rel=\"external\">Wikipedia: Hypertext Transfer Protocol</a></li>\n<li><a href=\"http://ithelp.ithome.com.tw/articles/10155801\" target=\"_blank\" rel=\"external\">[鐵人賽Day2] GET/POST 的差異與配合PHP用法</a></li>\n<li><a href=\"http://j796160836.pixnet.net/blog/post/30530326-%E7%9E%AD%E8%A7%A3json%E6%A0%BC%E5%BC%8F\" target=\"_blank\" rel=\"external\">瞭解JSON格式</a></li>\n<li><a href=\"https://blog.wu-boy.com/2011/04/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84-json-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/\" target=\"_blank\" rel=\"external\">你不可不知的 JSON 基本介紹</a></li>\n<li>pychiang大大的筆記 on Slack</li>\n</ul>\n<h3 id=\"troubleshooting\">Troubleshooting</h3>\n<ul>\n<li><code>preview</code>與<code>content</code>間空白需修復</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;img class='preview' src=\"${data.streams[x].preview.medium}\"&gt;\n解法1: vertiical-align:bottom;\n解法2: display:block;\n</pre></div>\n</figure>\n<p>參考<a href=\"https://www.pkstep.com/archives/2323\" target=\"_blank\" rel=\"external\">【CSS】圖像產生間隙，空一行，如何解決？</a></p>\n<h3 id=\"後記\">後記</h3>\n<ul>\n<li>對於API存取尚不熟悉，對於twitch的client-id花了不少時間才搞定</li>\n<li>終於可以把HTML裡一大串的stream item交給js去render了，方便維護</li>\n<li>對於非同步概念需加強，Slack各位大大們討論的都增加許多見識，還有很多文件要survey</li>\n</ul>\n<h3 id=\"demo\">Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw4/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw4/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>Properties</h3>\n<ul>\n<li>\n<p>移除<code>.container</code>的<code>justify-content: space-around</code>使最下方對齊</p>\n</li>\n<li>\n<p>串接 <a href=\"https://dev.twitch.tv/docs/v5/reference/streams/#get-live-streams\" target=\"_blank\" rel=\"external\">Twitch API</a></p>\n</li>\n<li>\n<p>使用jQuery的   <code>$.ajax()</code>來做asynchronous HTTP (Ajax) request</p>\n</li>\n<li>\n<p>從影片中學到ES6語法<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" rel=\"external\">template strings</a>可讓jQuery包住的HTML內容，更容易維護</p>\n</li>\n</ul>\n<h3>Question Set</h3>\n<h4>1.HTTP method 有哪幾個？有什麼不一樣？</h4>\n<ul>\n<li>GET: 讀取資源 (safe &amp; idempotent)</li>\n<li>PUT: 替換資源 (idempotent)</li>\n<li>DELETE: 刪除資源 (idempotent)</li>\n<li>POST: 新增資源；也作為萬用動詞，處理其它要求</li>\n<li>PATCH: 更新資源部份內容</li>\n<li>HEAD: 類似GET，但只回傳HTTP header (safe &amp; idempotent)</li>\n<li>其它還有一些較少用到的，可參考<a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods\" target=\"_blank\" rel=\"external\">Wikipedia: Hypertext Transfer Protocol</a></li>\n</ul>\n<p>idempotent 的意思是如果相同的操作再執行第二遍第三遍，結果還是跟第一遍的結果一樣 (也就是說不管執行幾次，結果都跟只有執行一次一樣)。</p>\n<p>另一個 HTTP Methods 特性是”Safe”，這比較簡單，只有 GET 和 HEAD 是 Safe 操作。Safe 特性會影響是否可以快取(POST/PUT/PATCH/DELETE 一定都不可以快取)。而 Idempotent 特性則是會影響可否 Retry (重試，反正結果一樣)。</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>SAFE?</th>\n<th>IDEMPOTENT?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>N</td>\n<td>N</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n<p>from <a href=\"https://ihower.tw/blog/archives/6483\" target=\"_blank\" rel=\"external\">here</a></p>\n<h4>2.GET 跟 POST 有哪些區別，可以試著舉幾個例子嗎？</h4>\n<h5>GET</h5>\n<p>傳送的值藉由GET請求URL發送，簡單來說GET是把資料放在header進行傳送，而在網址列會看到&quot;<a href=\"http://www.xxx.com/test/index.php?test1=value1&amp;test2=value2\" target=\"_blank\" rel=\"external\">http://www.xxx.com/test/index.php?test1=value1&amp;test2=value2</a>&quot;。</p>\n<p>同時，使用GET方式傳遞的話，並不適合傳送些隱密性較高的資料(例如：Password)，因為在傳送的過程中就會顯示在網址列上</p>\n<p>而GET的請求會被Cache紀錄、GET的請求受限於 QueryString 長度限制(依瀏覽器規定)，因此GET的使用時機應為檢視資料時使用。</p>\n<h5>POST</h5>\n<p>傳送的值藉由POST請求HTTP發送，簡單來說POST是把資料放在訊息主體內進行傳送。</p>\n<p>而POST的請求不會被Cache紀錄、POST的請求對資料長度沒有限制，因此POST比GET更安全，所以較適合用來傳送隱密性較高的資料。</p>\n<p>範例 - 以Node.js做blog登入為例：</p>\n<ul>\n<li>GET</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>//handling user log in\nrouter.get(\"/login\", passport.authenticate(\"local\",{\n    ...\n}), function(req, res){});\n</pre></div>\n</figure>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;form action=\"/login\" method=\"get\"&gt;\n    ...\n&lt;/form&gt;\n</pre></div>\n</figure>\n<p>登入後網址列回傳：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>http://localhost:5000/login?username=dez&amp;password=dez\n</pre></div>\n</figure>\n<ul>\n<li>POST</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>//handling user log in\nrouter.post(\"/login\", passport.authenticate(\"local\",{\n    ...\n}), function(req, res){});\n</pre></div>\n</figure>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;form action=\"/login\" method=\"post\"&gt;\n    ...\n&lt;/form&gt;\n</pre></div>\n</figure>\n<p>登入後網址列回傳：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>http://localhost:5000/posts\n</pre></div>\n</figure>\n<h4>3.什麼是 RESTful API？</h4>\n<p>RESTful API是一種設計風格，這種風格使API設計具有整體一致性，易於維護、擴展，並且充份利用HTTP協定的特點。</p>\n<p>嚴格來說REST符合以下幾個條件:</p>\n<ul>\n<li>\n<p>應用程式的狀態跟功能拆成 resources</p>\n</li>\n<li>\n<p>每個 resource 使用獨一無二用來當作超連結的通用定位語法(在WWW中即URI)</p>\n</li>\n<li>\n<p>所有 resources 共用一致的介面在 client 跟 resource 之間轉換狀態，包括:</p>\n<pre><code>*   一組有限的良好定義操作 well-defined operations (在HTTP中即 GET/POST/PUT/DELETE)\n</code></pre>\n<ul>\n<li>一組有限的內容格式 content types,也許包括 可執行的程式碼 code-on-demand (在WWW中即Javascript)</li>\n</ul>\n</li>\n<li>\n<p>這種通訊協定 protocol (在WWW中即用HTTP) 包含以下特色:</p>\n<pre><code>*   使用者端/伺服器端 Client/Server\n</code></pre>\n<ul>\n<li>狀態無關 Stateless</li>\n<li>可以快取 Cacheable</li>\n<li>分層的 Layered</li>\n</ul>\n</li>\n</ul>\n<p>符合 REST principles 的系統稱做 RESTful。</p>\n<p>每個 resource 擁有自己的識別名詞，而 Clients 從單一 resource 開始瀏覽，透過標準操作走訪 resource ，如 GET 下載，PUT更新，DELETE刪除，POST新增，注意到每個物件有自己的URL，而且可以容易被快取，複製跟書籤化(bookmarked)。</p>\n<h4>4.JSON 是什麼？</h4>\n<p>JSON（JavaScript Object Notation）是個以純文字為基底去儲存和傳送簡單結構資料，你可以透過特定的格式去儲存任何資料(字串,數字,陣列,物件)，也可以透過物件或陣列來傳送較複雜的資料。最常被用在 Web 網頁程式從 Server 端傳送資料給 browser，典型範例就是透過 AJAX 方式交換 JSON 資料</p>\n<p>範例：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>{\n    \"firstName\": \"Dez\",\n    \"lastName\": \"Chuang\",\n    \"sex\": \"male\",\n    \"age\": 25,\n    \"address\":\n    {\n        \"streetAddress\": \"21 2nd Street\",\n        \"city\": \"New York\",\n        \"state\": \"NY\",\n        \"postalCode\": \"10021\"\n    },\n    \"phoneNumber\":\n    [\n        {\n          \"type\": \"home\",\n          \"number\": \"212 555-1234\"\n        },\n        {\n          \"type\": \"fax\",\n          \"number\": \"646 555-4567\"\n        }\n    ]\n}\n</pre></div>\n</figure>\n<h4>5.JSONP 是什麼？</h4>\n<p>JSONP (JSON with Padding)，原理是 <code>script</code> 標籤可以跨網域，在 HTML 裡面有幾個標籤不受到跨網域的限制，<code>script</code> 是其中一個。</p>\n<p>可以在 HTML 裡引入 API URL 到 <code>script</code> 裡，然後定義 callback function 的參數，在 JavaScript 檔案裡用 callback function 呼叫出 JSONP 的資料。或是直接在 JavaScript 檔案裡引入 API URL 再利用 callback function 也可以。但是一般不建議使用 JSONP，因為如果引入 <code>script</code> 的網站遭駭客入侵，自身的網站也會受到影響。</p>\n<h4>6.要如何存取跨網域的 API？</h4>\n<ol>\n<li>JSONP</li>\n<li>CORS (cross-origin resource sharing)</li>\n</ol>\n<p>在 Response Header 中 Access-Control-Allow-Origin 可以看到 API 資料是否有開放跨網域存取。</p>\n<p>跨網域存取分成：</p>\n<pre><code>a. 簡單請求：只允許 `GET`、`HEAD`、`POST` 這三個方法。\n</code></pre>\n<p>b. 先導請求 (Preflight Request)：先以 HTTP 的 OPTIONS 方法送出 request 到另一個網域，確定 Access-Control-Allow-Origin 沒問題後，才送出真正的 response 到此網域中。所以會發生送出一個 request 但有兩個 response，先導請求是瀏覽器驗證是否有開放跨網域存取的方法。如果想要避免先導請求多產生出來的 response，可以取消字定義的標頭（例如 <code>setRequestHeader</code>）就可以解決了。</p>\n<p>不過，要是遠端伺服器沒有開放跨網域存取，不管用什麼方法瀏覽器都沒辦法存取資料的。</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://api.jquery.com/jquery.ajax/\" target=\"_blank\" rel=\"external\">jQuery.ajax()</a></li>\n<li><a href=\"https://tw.twincl.com/programming/*641y\" target=\"_blank\" rel=\"external\">簡明RESTful API設計要點</a></li>\n<li><a href=\"https://ihower.tw/blog/archives/1542\" target=\"_blank\" rel=\"external\">什麼是REST跟RESTful?</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods\" target=\"_blank\" rel=\"external\">Wikipedia: Hypertext Transfer Protocol</a></li>\n<li><a href=\"http://ithelp.ithome.com.tw/articles/10155801\" target=\"_blank\" rel=\"external\">[鐵人賽Day2] GET/POST 的差異與配合PHP用法</a></li>\n<li><a href=\"http://j796160836.pixnet.net/blog/post/30530326-%E7%9E%AD%E8%A7%A3json%E6%A0%BC%E5%BC%8F\" target=\"_blank\" rel=\"external\">瞭解JSON格式</a></li>\n<li><a href=\"https://blog.wu-boy.com/2011/04/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84-json-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/\" target=\"_blank\" rel=\"external\">你不可不知的 JSON 基本介紹</a></li>\n<li>pychiang大大的筆記 on Slack</li>\n</ul>\n<h3>Troubleshooting</h3>\n<ul>\n<li><code>preview</code>與<code>content</code>間空白需修復</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;img class='preview' src=\"${data.streams[x].preview.medium}\"&gt;\n解法1: vertiical-align:bottom;\n解法2: display:block;\n</pre></div>\n</figure>\n<p>參考<a href=\"https://www.pkstep.com/archives/2323\" target=\"_blank\" rel=\"external\">【CSS】圖像產生間隙，空一行，如何解決？</a></p>\n<h3>後記</h3>\n<ul>\n<li>對於API存取尚不熟悉，對於twitch的client-id花了不少時間才搞定</li>\n<li>終於可以把HTML裡一大串的stream item交給js去render了，方便維護</li>\n<li>對於非同步概念需加強，Slack各位大大們討論的都增加許多見識，還有很多文件要survey</li>\n</ul>\n<h3>Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw4/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw4/index.html</a></p>\n"},{"title":"學習｜Huli's Course#5｜placeholder與infinite scroll","catalog":true,"date":"2017-05-17T07:01:29.000Z","subtitle":"仔細思考後才豁然開朗的學習方式，是真的可以學到蠻多的。","header-img":"../../../../img/header_img/bg.png","_content":"\n### Properties\n\n*   重新編排sass，並使用minify css提升效能\n*   參考Huli大大的placeholder寫法，並採用偽元素`:before`來做佔位圖\n*   Refactor `main.js`，使用Huli作業四架構，將從twitch載入資料的每一步驟function化\n*   參考miau715的timer寫法來控制infinite scroll的request發送\n\n* * *\n\n### Question Set\n\n#### 1.佔位圖也是圖片，也需要下載時間，有沒有什麼方法可以優化這點？\n\n*   使用[base64編碼](https://sofree.cc/base64-images/)，降低連線請求\n\n* * *\n\n### References\n\n*   [[優化]圖片轉成 Base64 編碼字串，降低連線請求](https://sofree.cc/base64-images/)\n*   [How Medium does progressive image loading (provided by yuki大大)](https://jmperezperez.com/medium-image-progressive-loading-placeholder/)\n*   [5\\. 讓網頁變得更完整：加上 placeholder 與 infinite scroll](https://codepen.io/aszx87410/pen/MmBorO)\n*   [[作業][值得參考]繳交 hw5 #81 by yuanyu90221](https://github.com/aszx87410/frontend-intermediate-course/issues/81)\n*   [[作業][值得參考]繳交 hw5 #83 by miau715](https://github.com/aszx87410/frontend-intermediate-course/issues/83)\n*   [CSS3 transform Property](https://www.w3schools.com/cssref/css3_pr_transform.asp)\n\n* * *\n\n### Troubleshooting\n\n*   avatar的placeholder會跑圖，設成`no-repeat center`或調整寬高都無法解\n\n* * *\n\n### 直播筆記\n\n1.  模擬網路速度：可以透過dev-tool的network的no throttling，調整下拉選單來模擬各種網路速度\n2.  placeholder\n\n    *   方法一\n\n                *   放兩張圖片(佔位圖、真圖)在同一個div，同一個位置(使用absolute、relative調整)\n        *   讓真圖蓋掉placeholder，使用relative的position\n        *   將真圖設置透明屬性：opacity=0\n        *   等真圖載入完成使用onload=\"this.style.opacity=1;(利用過場來達到載入效果)\n\n        *   方法二\n\n            *   使用.preview:before將placeholder作為偽元素(記得加content)\n\n3.  使用base64來優化載入圖片的速度，但缺點是圖片會變大約1.5倍，且最大只能到32k，適合拿來優化一些小圖\n\n4.  Infinite scroll\n\n    *   scroll event\n    *   偵測是否捲到底部\n\n`\n\n        if($(window).scrollTop() + $(window).height() &gt; $(document).height() - reservedHeight)\n\n        `\n\n        *   $(document).height() 整個網頁高度\n        *   $(window).height() 目前視窗高度\n        *   $(window).scrollTop() 捲軸捲到哪邊的上緣\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>* 如果是，載入新channel\n    * 設一個isLoading的flag，避免重複發出多次request\n    * 管理offset這個參數，每次都抓新的channel\n</pre></div>\n</figure>\n\n* * *\n\n### 後記\n\n從進入了js的作業後，難度開始提高了一些，也幫助我更理解了以前自學沒學到或是沒深入研究的地方，看到高手如雲的同學們寫的js，才發現自己有一點還不會走(js/jQuery)就去飛(React)的感覺，難怪我Redux看了好幾遍沒看懂。看了幾位同學們hw5的寫法都寫得好漂亮，像是miau715大大利用`timer = window.setTimeout(function()`的方法來控制infinite scroll的想法就很值得學習，便把code的邏輯弄懂後，整合到我的code裡，並參考Huli大大hw4解答的架構把我的一些function切的更細一點。\n\n也發現跟了幾次課程後，與以往自學看線上課程不一樣的收穫是，Huli讓我們先去蒐集資料並實作，其中會卡關會有無法解決的bug，最後才聽完直播講解後，發現是自己想太難了，真正的解法原來就是這麼簡單的道理等等，這樣有仔細思考後才豁然開朗的學習方式，是真的可以學到蠻多的。\n\n* * *\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw5/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw5/index.html)","source":"_posts/20170517-1501-huli-course-05.md","raw":"---\ntitle: '學習｜Huli''s Course#5｜placeholder與infinite scroll'\ncatalog: true\ndate: 2017-05-17 15:01:29\nsubtitle: 仔細思考後才豁然開朗的學習方式，是真的可以學到蠻多的。\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - placeholder\n    - scroll\n    - jQuery\n    - 前端\n    - 初學\n---\n\n### Properties\n\n*   重新編排sass，並使用minify css提升效能\n*   參考Huli大大的placeholder寫法，並採用偽元素`:before`來做佔位圖\n*   Refactor `main.js`，使用Huli作業四架構，將從twitch載入資料的每一步驟function化\n*   參考miau715的timer寫法來控制infinite scroll的request發送\n\n* * *\n\n### Question Set\n\n#### 1.佔位圖也是圖片，也需要下載時間，有沒有什麼方法可以優化這點？\n\n*   使用[base64編碼](https://sofree.cc/base64-images/)，降低連線請求\n\n* * *\n\n### References\n\n*   [[優化]圖片轉成 Base64 編碼字串，降低連線請求](https://sofree.cc/base64-images/)\n*   [How Medium does progressive image loading (provided by yuki大大)](https://jmperezperez.com/medium-image-progressive-loading-placeholder/)\n*   [5\\. 讓網頁變得更完整：加上 placeholder 與 infinite scroll](https://codepen.io/aszx87410/pen/MmBorO)\n*   [[作業][值得參考]繳交 hw5 #81 by yuanyu90221](https://github.com/aszx87410/frontend-intermediate-course/issues/81)\n*   [[作業][值得參考]繳交 hw5 #83 by miau715](https://github.com/aszx87410/frontend-intermediate-course/issues/83)\n*   [CSS3 transform Property](https://www.w3schools.com/cssref/css3_pr_transform.asp)\n\n* * *\n\n### Troubleshooting\n\n*   avatar的placeholder會跑圖，設成`no-repeat center`或調整寬高都無法解\n\n* * *\n\n### 直播筆記\n\n1.  模擬網路速度：可以透過dev-tool的network的no throttling，調整下拉選單來模擬各種網路速度\n2.  placeholder\n\n    *   方法一\n\n                *   放兩張圖片(佔位圖、真圖)在同一個div，同一個位置(使用absolute、relative調整)\n        *   讓真圖蓋掉placeholder，使用relative的position\n        *   將真圖設置透明屬性：opacity=0\n        *   等真圖載入完成使用onload=\"this.style.opacity=1;(利用過場來達到載入效果)\n\n        *   方法二\n\n            *   使用.preview:before將placeholder作為偽元素(記得加content)\n\n3.  使用base64來優化載入圖片的速度，但缺點是圖片會變大約1.5倍，且最大只能到32k，適合拿來優化一些小圖\n\n4.  Infinite scroll\n\n    *   scroll event\n    *   偵測是否捲到底部\n\n`\n\n        if($(window).scrollTop() + $(window).height() &gt; $(document).height() - reservedHeight)\n\n        `\n\n        *   $(document).height() 整個網頁高度\n        *   $(window).height() 目前視窗高度\n        *   $(window).scrollTop() 捲軸捲到哪邊的上緣\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>* 如果是，載入新channel\n    * 設一個isLoading的flag，避免重複發出多次request\n    * 管理offset這個參數，每次都抓新的channel\n</pre></div>\n</figure>\n\n* * *\n\n### 後記\n\n從進入了js的作業後，難度開始提高了一些，也幫助我更理解了以前自學沒學到或是沒深入研究的地方，看到高手如雲的同學們寫的js，才發現自己有一點還不會走(js/jQuery)就去飛(React)的感覺，難怪我Redux看了好幾遍沒看懂。看了幾位同學們hw5的寫法都寫得好漂亮，像是miau715大大利用`timer = window.setTimeout(function()`的方法來控制infinite scroll的想法就很值得學習，便把code的邏輯弄懂後，整合到我的code裡，並參考Huli大大hw4解答的架構把我的一些function切的更細一點。\n\n也發現跟了幾次課程後，與以往自學看線上課程不一樣的收穫是，Huli讓我們先去蒐集資料並實作，其中會卡關會有無法解決的bug，最後才聽完直播講解後，發現是自己想太難了，真正的解法原來就是這麼簡單的道理等等，這樣有仔細思考後才豁然開朗的學習方式，是真的可以學到蠻多的。\n\n* * *\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw5/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw5/index.html)","slug":"20170517-1501-huli-course-05","published":1,"updated":"2017-06-24T15:37:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs4x000g474uowxcvdi1","content":"<h3 id=\"properties\">Properties</h3>\n<ul>\n<li>重新編排sass，並使用minify css提升效能</li>\n<li>參考Huli大大的placeholder寫法，並採用偽元素<code>:before</code>來做佔位圖</li>\n<li>Refactor <code>main.js</code>，使用Huli作業四架構，將從twitch載入資料的每一步驟function化</li>\n<li>參考miau715的timer寫法來控制infinite scroll的request發送</li>\n</ul>\n<hr>\n<h3 id=\"question-set\">Question Set</h3>\n<h4 id=\"1佔位圖也是圖片也需要下載時間有沒有什麼方法可以優化這點\">1.佔位圖也是圖片，也需要下載時間，有沒有什麼方法可以優化這點？</h4>\n<ul>\n<li>使用<a href=\"https://sofree.cc/base64-images/\" target=\"_blank\" rel=\"external\">base64編碼</a>，降低連線請求</li>\n</ul>\n<hr>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://sofree.cc/base64-images/\" target=\"_blank\" rel=\"external\">[優化]圖片轉成 Base64 編碼字串，降低連線請求</a></li>\n<li><a href=\"https://jmperezperez.com/medium-image-progressive-loading-placeholder/\" target=\"_blank\" rel=\"external\">How Medium does progressive image loading (provided by yuki大大)</a></li>\n<li><a href=\"https://codepen.io/aszx87410/pen/MmBorO\" target=\"_blank\" rel=\"external\">5. 讓網頁變得更完整：加上 placeholder 與 infinite scroll</a></li>\n<li><a href=\"https://github.com/aszx87410/frontend-intermediate-course/issues/81\" target=\"_blank\" rel=\"external\">[作業][值得參考]繳交 hw5 #81 by yuanyu90221</a></li>\n<li><a href=\"https://github.com/aszx87410/frontend-intermediate-course/issues/83\" target=\"_blank\" rel=\"external\">[作業][值得參考]繳交 hw5 #83 by miau715</a></li>\n<li><a href=\"https://www.w3schools.com/cssref/css3_pr_transform.asp\" target=\"_blank\" rel=\"external\">CSS3 transform Property</a></li>\n</ul>\n<hr>\n<h3 id=\"troubleshooting\">Troubleshooting</h3>\n<ul>\n<li>avatar的placeholder會跑圖，設成<code>no-repeat center</code>或調整寬高都無法解</li>\n</ul>\n<hr>\n<h3 id=\"直播筆記\">直播筆記</h3>\n<ol>\n<li>\n<p>模擬網路速度：可以透過dev-tool的network的no throttling，調整下拉選單來模擬各種網路速度</p>\n</li>\n<li>\n<p>placeholder</p>\n<ul>\n<li>\n<p>方法一</p>\n<pre><code>    *   放兩張圖片(佔位圖、真圖)在同一個div，同一個位置(使用absolute、relative調整)\n</code></pre>\n<ul>\n<li>\n<p>讓真圖蓋掉placeholder，使用relative的position</p>\n</li>\n<li>\n<p>將真圖設置透明屬性：opacity=0</p>\n</li>\n<li>\n<p>等真圖載入完成使用onload=&quot;this.style.opacity=1;(利用過場來達到載入效果)</p>\n</li>\n<li>\n<p>方法二</p>\n<ul>\n<li>使用.preview:before將placeholder作為偽元素(記得加content)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>使用base64來優化載入圖片的速度，但缺點是圖片會變大約1.5倍，且最大只能到32k，適合拿來優化一些小圖</p>\n</li>\n<li>\n<p>Infinite scroll</p>\n<ul>\n<li>scroll event</li>\n<li>偵測是否捲到底部</li>\n</ul>\n</li>\n</ol>\n<p>`</p>\n<pre><code>    if($(window).scrollTop() + $(window).height() &amp;gt; $(document).height() - reservedHeight)\n\n    `\n\n    *   $(document).height() 整個網頁高度\n    *   $(window).height() 目前視窗高度\n    *   $(window).scrollTop() 捲軸捲到哪邊的上緣\n</code></pre>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>* 如果是，載入新channel\n    * 設一個isLoading的flag，避免重複發出多次request\n    * 管理offset這個參數，每次都抓新的channel\n</pre></div>\n</figure>\n<hr>\n<h3 id=\"後記\">後記</h3>\n<p>從進入了js的作業後，難度開始提高了一些，也幫助我更理解了以前自學沒學到或是沒深入研究的地方，看到高手如雲的同學們寫的js，才發現自己有一點還不會走(js/jQuery)就去飛(React)的感覺，難怪我Redux看了好幾遍沒看懂。看了幾位同學們hw5的寫法都寫得好漂亮，像是miau715大大利用<code>timer = window.setTimeout(function()</code>的方法來控制infinite scroll的想法就很值得學習，便把code的邏輯弄懂後，整合到我的code裡，並參考Huli大大hw4解答的架構把我的一些function切的更細一點。</p>\n<p>也發現跟了幾次課程後，與以往自學看線上課程不一樣的收穫是，Huli讓我們先去蒐集資料並實作，其中會卡關會有無法解決的bug，最後才聽完直播講解後，發現是自己想太難了，真正的解法原來就是這麼簡單的道理等等，這樣有仔細思考後才豁然開朗的學習方式，是真的可以學到蠻多的。</p>\n<hr>\n<h3 id=\"demo\">Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw5/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw5/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>Properties</h3>\n<ul>\n<li>重新編排sass，並使用minify css提升效能</li>\n<li>參考Huli大大的placeholder寫法，並採用偽元素<code>:before</code>來做佔位圖</li>\n<li>Refactor <code>main.js</code>，使用Huli作業四架構，將從twitch載入資料的每一步驟function化</li>\n<li>參考miau715的timer寫法來控制infinite scroll的request發送</li>\n</ul>\n<hr>\n<h3>Question Set</h3>\n<h4>1.佔位圖也是圖片，也需要下載時間，有沒有什麼方法可以優化這點？</h4>\n<ul>\n<li>使用<a href=\"https://sofree.cc/base64-images/\" target=\"_blank\" rel=\"external\">base64編碼</a>，降低連線請求</li>\n</ul>\n<hr>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://sofree.cc/base64-images/\" target=\"_blank\" rel=\"external\">[優化]圖片轉成 Base64 編碼字串，降低連線請求</a></li>\n<li><a href=\"https://jmperezperez.com/medium-image-progressive-loading-placeholder/\" target=\"_blank\" rel=\"external\">How Medium does progressive image loading (provided by yuki大大)</a></li>\n<li><a href=\"https://codepen.io/aszx87410/pen/MmBorO\" target=\"_blank\" rel=\"external\">5. 讓網頁變得更完整：加上 placeholder 與 infinite scroll</a></li>\n<li><a href=\"https://github.com/aszx87410/frontend-intermediate-course/issues/81\" target=\"_blank\" rel=\"external\">[作業][值得參考]繳交 hw5 #81 by yuanyu90221</a></li>\n<li><a href=\"https://github.com/aszx87410/frontend-intermediate-course/issues/83\" target=\"_blank\" rel=\"external\">[作業][值得參考]繳交 hw5 #83 by miau715</a></li>\n<li><a href=\"https://www.w3schools.com/cssref/css3_pr_transform.asp\" target=\"_blank\" rel=\"external\">CSS3 transform Property</a></li>\n</ul>\n<hr>\n<h3>Troubleshooting</h3>\n<ul>\n<li>avatar的placeholder會跑圖，設成<code>no-repeat center</code>或調整寬高都無法解</li>\n</ul>\n<hr>\n<h3>直播筆記</h3>\n<ol>\n<li>\n<p>模擬網路速度：可以透過dev-tool的network的no throttling，調整下拉選單來模擬各種網路速度</p>\n</li>\n<li>\n<p>placeholder</p>\n<ul>\n<li>\n<p>方法一</p>\n<pre><code>    *   放兩張圖片(佔位圖、真圖)在同一個div，同一個位置(使用absolute、relative調整)\n</code></pre>\n<ul>\n<li>\n<p>讓真圖蓋掉placeholder，使用relative的position</p>\n</li>\n<li>\n<p>將真圖設置透明屬性：opacity=0</p>\n</li>\n<li>\n<p>等真圖載入完成使用onload=&quot;this.style.opacity=1;(利用過場來達到載入效果)</p>\n</li>\n<li>\n<p>方法二</p>\n<ul>\n<li>使用.preview:before將placeholder作為偽元素(記得加content)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>使用base64來優化載入圖片的速度，但缺點是圖片會變大約1.5倍，且最大只能到32k，適合拿來優化一些小圖</p>\n</li>\n<li>\n<p>Infinite scroll</p>\n<ul>\n<li>scroll event</li>\n<li>偵測是否捲到底部</li>\n</ul>\n</li>\n</ol>\n<p>`</p>\n<pre><code>    if($(window).scrollTop() + $(window).height() &amp;gt; $(document).height() - reservedHeight)\n\n    `\n\n    *   $(document).height() 整個網頁高度\n    *   $(window).height() 目前視窗高度\n    *   $(window).scrollTop() 捲軸捲到哪邊的上緣\n</code></pre>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>* 如果是，載入新channel\n    * 設一個isLoading的flag，避免重複發出多次request\n    * 管理offset這個參數，每次都抓新的channel\n</pre></div>\n</figure>\n<hr>\n<h3>後記</h3>\n<p>從進入了js的作業後，難度開始提高了一些，也幫助我更理解了以前自學沒學到或是沒深入研究的地方，看到高手如雲的同學們寫的js，才發現自己有一點還不會走(js/jQuery)就去飛(React)的感覺，難怪我Redux看了好幾遍沒看懂。看了幾位同學們hw5的寫法都寫得好漂亮，像是miau715大大利用<code>timer = window.setTimeout(function()</code>的方法來控制infinite scroll的想法就很值得學習，便把code的邏輯弄懂後，整合到我的code裡，並參考Huli大大hw4解答的架構把我的一些function切的更細一點。</p>\n<p>也發現跟了幾次課程後，與以往自學看線上課程不一樣的收穫是，Huli讓我們先去蒐集資料並實作，其中會卡關會有無法解決的bug，最後才聽完直播講解後，發現是自己想太難了，真正的解法原來就是這麼簡單的道理等等，這樣有仔細思考後才豁然開朗的學習方式，是真的可以學到蠻多的。</p>\n<hr>\n<h3>Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw5/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw5/index.html</a></p>\n"},{"title":"學習｜Huli's Course#6｜Vanilla.js","catalog":true,"date":"2017-05-18T07:01:15.000Z","subtitle":"自己實作原生JS，初步做完改寫看起來不太困難，因為基本的程式邏輯在hw5大致上架構都完成了，只是將jQuery的部分依序改成vanilla。","header-img":"../../../../img/header_img/bg.png","_content":"\n### Properties\n\n*   `main.js`改名為`index.js`\n\n*   移除`jquery-3.2.1.min.js`\n\n*   改寫.ajax\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>let xhr = new XMLHttpRequest();\nxhr.open(method, twitchAPI, true);\nxhr.onload = (data) =&gt; {\n    if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 400) {\n        data = JSON.parse(xhr.responseText);\n        callback(null, data);\n    } else {\n        console.log(err);\n    }\n};\nxhr.onerror = (err) =&gt; {\n    console.log(err);\n};\nxhr.send(null);\n</pre></div>\n</figure>\n\n*   改寫appendData\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>-      const $container = $('.container');\n+      const container = document.querySelector('.container');\n       for(const stream of streams) {\n-        $container.append(templateData(stream));\n+        container.insertAdjacentHTML('beforeend', templateData(stream));\n</pre></div>\n</figure>\n\n*   改寫scroll\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>-  $(window).scroll(function() {\n+  window.addEventListener('scroll', function() {\n</pre></div>\n</figure>\n\n*   改寫infinite scroll高度判斷\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>-      if($(window).scrollTop() + $(window).height() &gt; $(document).height() - reservedHeight) {\n+      if(document.body.scrollTop + window.innerHeight &gt; document.body.scrollHeight - reservedHeight) {\n</pre></div>\n</figure>\n\n*   修正hw5時，avatar佔位圖無法正確顯示的issue，加上`background-size: 100% 100%`\n\n* * *\n\n### Question Set\n\n#### 用 vanilla js 有哪些優缺點？\n\nPure Javascript to access the DOM can be faster as you can cut the overhead that jQuery has on this. However it doesn’t always have to be faster as you could write some major mistakes that slow things down again.\n\n<figure>![](http://i.imgur.com/3nDAgQ8.png \"jQuery vs Vanilla\")</figure>\n\n* * *\n\n### References\n\n*   [YOU MIGHT NOT NEED JQUERY](http://youmightnotneedjquery.com/)\n*   [You Don't Need jQuery](https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.zh-CN.md)\n*   [使用XMLHttpRequest](https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest)\n*   [document.querySelector](https://developer.mozilla.org/zh-TW/docs/Web/API/Document/querySelector)\n*   [Element.insertAdjacentHTML()](https://developer.mozilla.org/zh-TW/docs/Web/API/Element/insertAdjacentHTML)\n*   [10.3 How do I find the size of the window?](http://jibbering.com/faq/#getWindowSize)\n*   [What is offsetHeight, clientHeight, scrollHeight?](http://stackoverflow.com/questions/22675126/what-is-offsetheight-clientheight-scrollheight)\n*   [Get the browser viewport dimensions with JavaScript](http://stackoverflow.com/questions/1248081/get-the-browser-viewport-dimensions-with-javascript)\n*   [JavaScript 獲取頁面高度（多種瀏覽器)](https://dotblogs.com.tw/aquarius6913/2011/01/03/20538)\n*   [Which is faster (execution-wise): JavaScript or jQuery?](https://www.quora.com/Which-is-faster-execution-wise-JavaScript-or-jQuery)\n*   [jQuery vs JavaScript Performance Comparison](https://jsperf.com/jquery-vs-javascript-performance-comparison/14)\n\n* * *\n\n### Troubleshooting\n\n*   Chrome, Safari, Edge pass. IE fail.\n\n* * *\n\n### 直播筆記\n\n*   瀏覽器兼容性\n\n        *   此為為何要用jQuery的理由之ㄧ，已幫忙我們處理不同瀏覽器的兼容性\n    *   EX: 此作業的高度\n\n            *   可參考ponpon\n\n*   為什麼要用Vanilla JS\n\n        *   trade-off(權衡/選擇)：考慮優缺點\n    *   缺點\n\n            *   不好維護\n        *   考慮瀏覽器兼容性問題\n        *   團隊合作困難\n\n        *   優點\n\n            *   效率高(考慮到程式規模，規模太小無法發揮作用)\n        *   節省網路流量(節省jQuery lib的空間)\n\n*   什麼時候需要用\n\n        *   考慮需求的場景\n\n            *   網速慢的地區\n        *   規模大的公司如google、FB\n        *   給手機使用的網站\n\n*   appendChild()也可以拿來append HTML tag\n\n* * *\n\n### 後記\n\n自己實作原生JS，初步做完改寫看起來不太困難，因為基本的程式邏輯在hw5大致上架構都完成了，只是將jQuery的部分依序改成vanilla，不過若是考慮跨瀏覽器的問題的話，目前測試使用Chrome、Safari、Edge都可以正常工作，IE 11完全是空白的XD，看來真正的挑戰好像是跨瀏覽器的判斷嗎?\n\n* * *\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw6/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw6/index.html)","source":"_posts/20170518-1502-huli-course-06.md","raw":"---\ntitle: '學習｜Huli''s Course#6｜Vanilla.js'\ncatalog: true\ndate: 2017-05-18 15:01:15\nsubtitle: 自己實作原生JS，初步做完改寫看起來不太困難，因為基本的程式邏輯在hw5大致上架構都完成了，只是將jQuery的部分依序改成vanilla。\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - Vanilla\n    - JavaScript\n    - 前端\n    - 初學\n---\n\n### Properties\n\n*   `main.js`改名為`index.js`\n\n*   移除`jquery-3.2.1.min.js`\n\n*   改寫.ajax\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>let xhr = new XMLHttpRequest();\nxhr.open(method, twitchAPI, true);\nxhr.onload = (data) =&gt; {\n    if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 400) {\n        data = JSON.parse(xhr.responseText);\n        callback(null, data);\n    } else {\n        console.log(err);\n    }\n};\nxhr.onerror = (err) =&gt; {\n    console.log(err);\n};\nxhr.send(null);\n</pre></div>\n</figure>\n\n*   改寫appendData\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>-      const $container = $('.container');\n+      const container = document.querySelector('.container');\n       for(const stream of streams) {\n-        $container.append(templateData(stream));\n+        container.insertAdjacentHTML('beforeend', templateData(stream));\n</pre></div>\n</figure>\n\n*   改寫scroll\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>-  $(window).scroll(function() {\n+  window.addEventListener('scroll', function() {\n</pre></div>\n</figure>\n\n*   改寫infinite scroll高度判斷\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>-      if($(window).scrollTop() + $(window).height() &gt; $(document).height() - reservedHeight) {\n+      if(document.body.scrollTop + window.innerHeight &gt; document.body.scrollHeight - reservedHeight) {\n</pre></div>\n</figure>\n\n*   修正hw5時，avatar佔位圖無法正確顯示的issue，加上`background-size: 100% 100%`\n\n* * *\n\n### Question Set\n\n#### 用 vanilla js 有哪些優缺點？\n\nPure Javascript to access the DOM can be faster as you can cut the overhead that jQuery has on this. However it doesn’t always have to be faster as you could write some major mistakes that slow things down again.\n\n<figure>![](http://i.imgur.com/3nDAgQ8.png \"jQuery vs Vanilla\")</figure>\n\n* * *\n\n### References\n\n*   [YOU MIGHT NOT NEED JQUERY](http://youmightnotneedjquery.com/)\n*   [You Don't Need jQuery](https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.zh-CN.md)\n*   [使用XMLHttpRequest](https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest)\n*   [document.querySelector](https://developer.mozilla.org/zh-TW/docs/Web/API/Document/querySelector)\n*   [Element.insertAdjacentHTML()](https://developer.mozilla.org/zh-TW/docs/Web/API/Element/insertAdjacentHTML)\n*   [10.3 How do I find the size of the window?](http://jibbering.com/faq/#getWindowSize)\n*   [What is offsetHeight, clientHeight, scrollHeight?](http://stackoverflow.com/questions/22675126/what-is-offsetheight-clientheight-scrollheight)\n*   [Get the browser viewport dimensions with JavaScript](http://stackoverflow.com/questions/1248081/get-the-browser-viewport-dimensions-with-javascript)\n*   [JavaScript 獲取頁面高度（多種瀏覽器)](https://dotblogs.com.tw/aquarius6913/2011/01/03/20538)\n*   [Which is faster (execution-wise): JavaScript or jQuery?](https://www.quora.com/Which-is-faster-execution-wise-JavaScript-or-jQuery)\n*   [jQuery vs JavaScript Performance Comparison](https://jsperf.com/jquery-vs-javascript-performance-comparison/14)\n\n* * *\n\n### Troubleshooting\n\n*   Chrome, Safari, Edge pass. IE fail.\n\n* * *\n\n### 直播筆記\n\n*   瀏覽器兼容性\n\n        *   此為為何要用jQuery的理由之ㄧ，已幫忙我們處理不同瀏覽器的兼容性\n    *   EX: 此作業的高度\n\n            *   可參考ponpon\n\n*   為什麼要用Vanilla JS\n\n        *   trade-off(權衡/選擇)：考慮優缺點\n    *   缺點\n\n            *   不好維護\n        *   考慮瀏覽器兼容性問題\n        *   團隊合作困難\n\n        *   優點\n\n            *   效率高(考慮到程式規模，規模太小無法發揮作用)\n        *   節省網路流量(節省jQuery lib的空間)\n\n*   什麼時候需要用\n\n        *   考慮需求的場景\n\n            *   網速慢的地區\n        *   規模大的公司如google、FB\n        *   給手機使用的網站\n\n*   appendChild()也可以拿來append HTML tag\n\n* * *\n\n### 後記\n\n自己實作原生JS，初步做完改寫看起來不太困難，因為基本的程式邏輯在hw5大致上架構都完成了，只是將jQuery的部分依序改成vanilla，不過若是考慮跨瀏覽器的問題的話，目前測試使用Chrome、Safari、Edge都可以正常工作，IE 11完全是空白的XD，看來真正的挑戰好像是跨瀏覽器的判斷嗎?\n\n* * *\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw6/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw6/index.html)","slug":"20170518-1502-huli-course-06","published":1,"updated":"2017-06-24T15:39:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs51000i474ubob0cr6a","content":"<h3 id=\"properties\">Properties</h3>\n<ul>\n<li>\n<p><code>main.js</code>改名為<code>index.js</code></p>\n</li>\n<li>\n<p>移除<code>jquery-3.2.1.min.js</code></p>\n</li>\n<li>\n<p>改寫.ajax</p>\n</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>let xhr = new XMLHttpRequest();\nxhr.open(method, twitchAPI, true);\nxhr.onload = (data) =&gt; {\n    if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 400) {\n        data = JSON.parse(xhr.responseText);\n        callback(null, data);\n    } else {\n        console.log(err);\n    }\n};\nxhr.onerror = (err) =&gt; {\n    console.log(err);\n};\nxhr.send(null);\n</pre></div>\n</figure>\n<ul>\n<li>改寫appendData</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>-      const $container = $('.container');\n+      const container = document.querySelector('.container');\n       for(const stream of streams) {\n-        $container.append(templateData(stream));\n+        container.insertAdjacentHTML('beforeend', templateData(stream));\n</pre></div>\n</figure>\n<ul>\n<li>改寫scroll</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>-  $(window).scroll(function() {\n+  window.addEventListener('scroll', function() {\n</pre></div>\n</figure>\n<ul>\n<li>改寫infinite scroll高度判斷</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>-      if($(window).scrollTop() + $(window).height() &gt; $(document).height() - reservedHeight) {\n+      if(document.body.scrollTop + window.innerHeight &gt; document.body.scrollHeight - reservedHeight) {\n</pre></div>\n</figure>\n<ul>\n<li>修正hw5時，avatar佔位圖無法正確顯示的issue，加上<code>background-size: 100% 100%</code></li>\n</ul>\n<hr>\n<h3 id=\"question-set\">Question Set</h3>\n<h4 id=\"用-vanilla-js-有哪些優缺點\">用 vanilla js 有哪些優缺點？</h4>\n<p>Pure Javascript to access the DOM can be faster as you can cut the overhead that jQuery has on this. However it doesn’t always have to be faster as you could write some major mistakes that slow things down again.</p>\n<figure>![](http://i.imgur.com/3nDAgQ8.png \"jQuery vs Vanilla\")</figure>\n<hr>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"http://youmightnotneedjquery.com/\" target=\"_blank\" rel=\"external\">YOU MIGHT NOT NEED JQUERY</a></li>\n<li><a href=\"https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"external\">You Don’t Need jQuery</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\" target=\"_blank\" rel=\"external\">使用XMLHttpRequest</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Document/querySelector\" target=\"_blank\" rel=\"external\">document.querySelector</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/insertAdjacentHTML\" target=\"_blank\" rel=\"external\">Element.insertAdjacentHTML()</a></li>\n<li><a href=\"http://jibbering.com/faq/#getWindowSize\" target=\"_blank\" rel=\"external\">10.3 How do I find the size of the window?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/22675126/what-is-offsetheight-clientheight-scrollheight\" target=\"_blank\" rel=\"external\">What is offsetHeight, clientHeight, scrollHeight?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1248081/get-the-browser-viewport-dimensions-with-javascript\" target=\"_blank\" rel=\"external\">Get the browser viewport dimensions with JavaScript</a></li>\n<li><a href=\"https://dotblogs.com.tw/aquarius6913/2011/01/03/20538\" target=\"_blank\" rel=\"external\">JavaScript 獲取頁面高度（多種瀏覽器)</a></li>\n<li><a href=\"https://www.quora.com/Which-is-faster-execution-wise-JavaScript-or-jQuery\" target=\"_blank\" rel=\"external\">Which is faster (execution-wise): JavaScript or jQuery?</a></li>\n<li><a href=\"https://jsperf.com/jquery-vs-javascript-performance-comparison/14\" target=\"_blank\" rel=\"external\">jQuery vs JavaScript Performance Comparison</a></li>\n</ul>\n<hr>\n<h3 id=\"troubleshooting\">Troubleshooting</h3>\n<ul>\n<li>Chrome, Safari, Edge pass. IE fail.</li>\n</ul>\n<hr>\n<h3 id=\"直播筆記\">直播筆記</h3>\n<ul>\n<li>\n<p>瀏覽器兼容性</p>\n<pre><code>*   此為為何要用jQuery的理由之ㄧ，已幫忙我們處理不同瀏覽器的兼容性\n</code></pre>\n<ul>\n<li>\n<p>EX: 此作業的高度</p>\n<pre><code>*   可參考ponpon\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>為什麼要用Vanilla JS</p>\n<pre><code>*   trade-off(權衡/選擇)：考慮優缺點\n</code></pre>\n<ul>\n<li>\n<p>缺點</p>\n<pre><code>*   不好維護\n</code></pre>\n<ul>\n<li>\n<p>考慮瀏覽器兼容性問題</p>\n</li>\n<li>\n<p>團隊合作困難</p>\n</li>\n<li>\n<p>優點</p>\n<ul>\n<li>效率高(考慮到程式規模，規模太小無法發揮作用)</li>\n</ul>\n</li>\n<li>\n<p>節省網路流量(節省jQuery lib的空間)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>什麼時候需要用</p>\n<pre><code>*   考慮需求的場景\n\n    *   網速慢的地區\n*   規模大的公司如google、FB\n*   給手機使用的網站\n</code></pre>\n</li>\n<li>\n<p>appendChild()也可以拿來append HTML tag</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"後記\">後記</h3>\n<p>自己實作原生JS，初步做完改寫看起來不太困難，因為基本的程式邏輯在hw5大致上架構都完成了，只是將jQuery的部分依序改成vanilla，不過若是考慮跨瀏覽器的問題的話，目前測試使用Chrome、Safari、Edge都可以正常工作，IE 11完全是空白的XD，看來真正的挑戰好像是跨瀏覽器的判斷嗎?</p>\n<hr>\n<h3 id=\"demo\">Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw6/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw6/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>Properties</h3>\n<ul>\n<li>\n<p><code>main.js</code>改名為<code>index.js</code></p>\n</li>\n<li>\n<p>移除<code>jquery-3.2.1.min.js</code></p>\n</li>\n<li>\n<p>改寫.ajax</p>\n</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>let xhr = new XMLHttpRequest();\nxhr.open(method, twitchAPI, true);\nxhr.onload = (data) =&gt; {\n    if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 400) {\n        data = JSON.parse(xhr.responseText);\n        callback(null, data);\n    } else {\n        console.log(err);\n    }\n};\nxhr.onerror = (err) =&gt; {\n    console.log(err);\n};\nxhr.send(null);\n</pre></div>\n</figure>\n<ul>\n<li>改寫appendData</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>-      const $container = $('.container');\n+      const container = document.querySelector('.container');\n       for(const stream of streams) {\n-        $container.append(templateData(stream));\n+        container.insertAdjacentHTML('beforeend', templateData(stream));\n</pre></div>\n</figure>\n<ul>\n<li>改寫scroll</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>-  $(window).scroll(function() {\n+  window.addEventListener('scroll', function() {\n</pre></div>\n</figure>\n<ul>\n<li>改寫infinite scroll高度判斷</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>-      if($(window).scrollTop() + $(window).height() &gt; $(document).height() - reservedHeight) {\n+      if(document.body.scrollTop + window.innerHeight &gt; document.body.scrollHeight - reservedHeight) {\n</pre></div>\n</figure>\n<ul>\n<li>修正hw5時，avatar佔位圖無法正確顯示的issue，加上<code>background-size: 100% 100%</code></li>\n</ul>\n<hr>\n<h3>Question Set</h3>\n<h4>用 vanilla js 有哪些優缺點？</h4>\n<p>Pure Javascript to access the DOM can be faster as you can cut the overhead that jQuery has on this. However it doesn’t always have to be faster as you could write some major mistakes that slow things down again.</p>\n<figure>![](http://i.imgur.com/3nDAgQ8.png \"jQuery vs Vanilla\")</figure>\n<hr>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://youmightnotneedjquery.com/\" target=\"_blank\" rel=\"external\">YOU MIGHT NOT NEED JQUERY</a></li>\n<li><a href=\"https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"external\">You Don’t Need jQuery</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\" target=\"_blank\" rel=\"external\">使用XMLHttpRequest</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Document/querySelector\" target=\"_blank\" rel=\"external\">document.querySelector</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/insertAdjacentHTML\" target=\"_blank\" rel=\"external\">Element.insertAdjacentHTML()</a></li>\n<li><a href=\"http://jibbering.com/faq/#getWindowSize\" target=\"_blank\" rel=\"external\">10.3 How do I find the size of the window?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/22675126/what-is-offsetheight-clientheight-scrollheight\" target=\"_blank\" rel=\"external\">What is offsetHeight, clientHeight, scrollHeight?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1248081/get-the-browser-viewport-dimensions-with-javascript\" target=\"_blank\" rel=\"external\">Get the browser viewport dimensions with JavaScript</a></li>\n<li><a href=\"https://dotblogs.com.tw/aquarius6913/2011/01/03/20538\" target=\"_blank\" rel=\"external\">JavaScript 獲取頁面高度（多種瀏覽器)</a></li>\n<li><a href=\"https://www.quora.com/Which-is-faster-execution-wise-JavaScript-or-jQuery\" target=\"_blank\" rel=\"external\">Which is faster (execution-wise): JavaScript or jQuery?</a></li>\n<li><a href=\"https://jsperf.com/jquery-vs-javascript-performance-comparison/14\" target=\"_blank\" rel=\"external\">jQuery vs JavaScript Performance Comparison</a></li>\n</ul>\n<hr>\n<h3>Troubleshooting</h3>\n<ul>\n<li>Chrome, Safari, Edge pass. IE fail.</li>\n</ul>\n<hr>\n<h3>直播筆記</h3>\n<ul>\n<li>\n<p>瀏覽器兼容性</p>\n<pre><code>*   此為為何要用jQuery的理由之ㄧ，已幫忙我們處理不同瀏覽器的兼容性\n</code></pre>\n<ul>\n<li>\n<p>EX: 此作業的高度</p>\n<pre><code>*   可參考ponpon\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>為什麼要用Vanilla JS</p>\n<pre><code>*   trade-off(權衡/選擇)：考慮優缺點\n</code></pre>\n<ul>\n<li>\n<p>缺點</p>\n<pre><code>*   不好維護\n</code></pre>\n<ul>\n<li>\n<p>考慮瀏覽器兼容性問題</p>\n</li>\n<li>\n<p>團隊合作困難</p>\n</li>\n<li>\n<p>優點</p>\n<ul>\n<li>效率高(考慮到程式規模，規模太小無法發揮作用)</li>\n</ul>\n</li>\n<li>\n<p>節省網路流量(節省jQuery lib的空間)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>什麼時候需要用</p>\n<pre><code>*   考慮需求的場景\n\n    *   網速慢的地區\n*   規模大的公司如google、FB\n*   給手機使用的網站\n</code></pre>\n</li>\n<li>\n<p>appendChild()也可以拿來append HTML tag</p>\n</li>\n</ul>\n<hr>\n<h3>後記</h3>\n<p>自己實作原生JS，初步做完改寫看起來不太困難，因為基本的程式邏輯在hw5大致上架構都完成了，只是將jQuery的部分依序改成vanilla，不過若是考慮跨瀏覽器的問題的話，目前測試使用Chrome、Safari、Edge都可以正常工作，IE 11完全是空白的XD，看來真正的挑戰好像是跨瀏覽器的判斷嗎?</p>\n<hr>\n<h3>Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw6/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw6/index.html</a></p>\n"},{"title":"學習｜Huli's Course#7｜i18n","catalog":true,"date":"2017-05-25T07:01:01.000Z","subtitle":"最近有幸跟到Huli大大的前端加強班免費課程，如火如荼也終於來到HW7了，一直想把每一堂課學到的觀念與一些心得記錄在網誌上，不過一直到現在才開始動筆，在上禮拜詢問了Huli大大，他也十分歡迎我記錄到網誌上，先從這一次的作業開始，之後再將前面幾份作業的心得慢慢補上。","header-img":"../../../../img/header_img/bg.png","_content":"\n### Properties\n\n*   將實況連結加上去，寫作業時看到喜歡的台還可直接連過去看實況XD\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;a href=\"${data.channel.url}\" target=\"_blank\" class=\"stream-item\"&gt;\n</pre></div>\n</figure>\n\n*   暫時使用以下代碼來做i18n的直播轉換\n\n####\n`changeLang`: button的onclick function\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>   function changeLang(lang){\n      // 1\\. title reload\n      title.textContent = window.I18N[lang].TITLE;\n      // 2\\. button reload\n      removeBtnSelected(lang);\n      // 3\\. stream reload\n      language = lang;\n      offset = 0;\n      refreshTable();\n    }\n</pre></div>\n</figure>\n\n*   title reload: 參考Huli大大hw6講解的`window.I18N[lang].TITLE`\n\n*   button reload: 新增button的背景色，來標示selected button\n*   stream reload: 使用`refreshTable` function實作\n\n####\n`refreshTable`: 將container內容重新渲染，目前使用`$( \".container\" ).empty();`做清空，並重新向api做ajax request。\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>   function refreshTable() {\n      //Walkaround way for refreshing container to implement i18n\n      $( \".container\" ).empty();\n      mainLoad();\n    }\n</pre></div>\n</figure>\n\n####\n`mainLoad`: 為先前的init main function\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>   function mainLoad(){\n      $(document).ready(() =&gt; {\n        // Init 20 items from twitch API\n        appendData();\n        // Infinite scroll\n        infiniteScroll();\n      });\n    }\n</pre></div>\n</figure>\n\n* * *\n\n### Question Set\n\n#### 我們在這範例中用了 window 儲存 I18N 這個全域變數，這樣有什麼壞處嗎？\n\n使用全域變數儲存I18N可能會和其他library有同名衝突。可使用Webpack來幫忙解決。\n\n* * *\n\n### References\n\n*   [Huli - 講解hw7](https://www.youtube.com/watch?v=2avbfs4xESw#t=29m48s)\n*   [The Window Object](https://www.w3schools.com/jsref/obj_window.asp)\n\n* * *\n\n### Troubleshooting\n\n*   有時候會有重複的stream item出現，不知道是不是offset的地方有bug，還是API的問題\n\n> 修正Huli大大抓到的bug，將infiniteScroll函式的timer宣告為global後可解決「切換語言後，infinite scroll重複發出request」的issue\n\n*   多次選取另外一種語言後transition會消失\n\n* * *\n\n### 直播筆記\n\n*   可透過語言檔的key/value來達到i18n的功能\n*   不同檔案可以透過window來傳遞變數\n*   將程式架構切得越好，增加新功能時所需要的effort越小\n*   下週作業有點難，可能要提早開始做\n\n* * *\n\n### 後記\n\n此作業一開始嘗試時，自己找了個`jquery-i18n-properties`來使用，做一個title的callback，但UX的效果不好，點擊後會頓一兩秒才改標題，也可能是我有使用上錯誤，在看完Huli大大hw6的直播後，才發現只要用`window.I18N[lang].TITLE`就可以了，自己沒方向的搜尋常常會想的太難。最難的部分應該是重新渲染的部分，暫時只想到使用清空的方法來做重新渲染，找找有沒有更好的做法。\n\n上次做六角學院百題斬時，最後一部分有很多BOM相關的觀念都不太熟，趁這次也稍微做了些study。隨著功能的增加，模組化的必要性也就顯得越來越重要，看見Huli大大在進階閱讀地方給了許多這方面的連結，之後也試著將index.js切成多隻檔案。原本以為`window 儲存 I18N 這個全域變數`這一題是BOM的問題，但在研究模塊化時突然想到hw8是webpack，然後就發現原來作業簡介早已解答了疑惑，這一切都是安排好的呀！\n\n* * *\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw7/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw7/index.html)","source":"_posts/20170525-1501-huli-course-07.md","raw":"---\ntitle: '學習｜Huli''s Course#7｜i18n'\ncatalog: true\ndate: 2017-05-25 15:01:01\nsubtitle: 最近有幸跟到Huli大大的前端加強班免費課程，如火如荼也終於來到HW7了，一直想把每一堂課學到的觀念與一些心得記錄在網誌上，不過一直到現在才開始動筆，在上禮拜詢問了Huli大大，他也十分歡迎我記錄到網誌上，先從這一次的作業開始，之後再將前面幾份作業的心得慢慢補上。\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - i18n\n    - 前端\n    - 初學\n---\n\n### Properties\n\n*   將實況連結加上去，寫作業時看到喜歡的台還可直接連過去看實況XD\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;a href=\"${data.channel.url}\" target=\"_blank\" class=\"stream-item\"&gt;\n</pre></div>\n</figure>\n\n*   暫時使用以下代碼來做i18n的直播轉換\n\n####\n`changeLang`: button的onclick function\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>   function changeLang(lang){\n      // 1\\. title reload\n      title.textContent = window.I18N[lang].TITLE;\n      // 2\\. button reload\n      removeBtnSelected(lang);\n      // 3\\. stream reload\n      language = lang;\n      offset = 0;\n      refreshTable();\n    }\n</pre></div>\n</figure>\n\n*   title reload: 參考Huli大大hw6講解的`window.I18N[lang].TITLE`\n\n*   button reload: 新增button的背景色，來標示selected button\n*   stream reload: 使用`refreshTable` function實作\n\n####\n`refreshTable`: 將container內容重新渲染，目前使用`$( \".container\" ).empty();`做清空，並重新向api做ajax request。\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>   function refreshTable() {\n      //Walkaround way for refreshing container to implement i18n\n      $( \".container\" ).empty();\n      mainLoad();\n    }\n</pre></div>\n</figure>\n\n####\n`mainLoad`: 為先前的init main function\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>   function mainLoad(){\n      $(document).ready(() =&gt; {\n        // Init 20 items from twitch API\n        appendData();\n        // Infinite scroll\n        infiniteScroll();\n      });\n    }\n</pre></div>\n</figure>\n\n* * *\n\n### Question Set\n\n#### 我們在這範例中用了 window 儲存 I18N 這個全域變數，這樣有什麼壞處嗎？\n\n使用全域變數儲存I18N可能會和其他library有同名衝突。可使用Webpack來幫忙解決。\n\n* * *\n\n### References\n\n*   [Huli - 講解hw7](https://www.youtube.com/watch?v=2avbfs4xESw#t=29m48s)\n*   [The Window Object](https://www.w3schools.com/jsref/obj_window.asp)\n\n* * *\n\n### Troubleshooting\n\n*   有時候會有重複的stream item出現，不知道是不是offset的地方有bug，還是API的問題\n\n> 修正Huli大大抓到的bug，將infiniteScroll函式的timer宣告為global後可解決「切換語言後，infinite scroll重複發出request」的issue\n\n*   多次選取另外一種語言後transition會消失\n\n* * *\n\n### 直播筆記\n\n*   可透過語言檔的key/value來達到i18n的功能\n*   不同檔案可以透過window來傳遞變數\n*   將程式架構切得越好，增加新功能時所需要的effort越小\n*   下週作業有點難，可能要提早開始做\n\n* * *\n\n### 後記\n\n此作業一開始嘗試時，自己找了個`jquery-i18n-properties`來使用，做一個title的callback，但UX的效果不好，點擊後會頓一兩秒才改標題，也可能是我有使用上錯誤，在看完Huli大大hw6的直播後，才發現只要用`window.I18N[lang].TITLE`就可以了，自己沒方向的搜尋常常會想的太難。最難的部分應該是重新渲染的部分，暫時只想到使用清空的方法來做重新渲染，找找有沒有更好的做法。\n\n上次做六角學院百題斬時，最後一部分有很多BOM相關的觀念都不太熟，趁這次也稍微做了些study。隨著功能的增加，模組化的必要性也就顯得越來越重要，看見Huli大大在進階閱讀地方給了許多這方面的連結，之後也試著將index.js切成多隻檔案。原本以為`window 儲存 I18N 這個全域變數`這一題是BOM的問題，但在研究模塊化時突然想到hw8是webpack，然後就發現原來作業簡介早已解答了疑惑，這一切都是安排好的呀！\n\n* * *\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw7/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw7/index.html)","slug":"20170525-1501-huli-course-07","published":1,"updated":"2017-06-24T15:36:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs56000l474u8k2d934k","content":"<h3 id=\"properties\">Properties</h3>\n<ul>\n<li>將實況連結加上去，寫作業時看到喜歡的台還可直接連過去看實況XD</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;a href=\"${data.channel.url}\" target=\"_blank\" class=\"stream-item\"&gt;\n</pre></div>\n</figure>\n<ul>\n<li>暫時使用以下代碼來做i18n的直播轉換</li>\n</ul>\n<h4 id=\"\"></h4>\n<p><code>changeLang</code>: button的onclick function</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>   function changeLang(lang){\n      // 1\\. title reload\n      title.textContent = window.I18N[lang].TITLE;\n      // 2\\. button reload\n      removeBtnSelected(lang);\n      // 3\\. stream reload\n      language = lang;\n      offset = 0;\n      refreshTable();\n    }\n</pre></div>\n</figure>\n<ul>\n<li>\n<p>title reload: 參考Huli大大hw6講解的<code>window.I18N[lang].TITLE</code></p>\n</li>\n<li>\n<p>button reload: 新增button的背景色，來標示selected button</p>\n</li>\n<li>\n<p>stream reload: 使用<code>refreshTable</code> function實作</p>\n</li>\n</ul>\n<h4 id=\"\"></h4>\n<p><code>refreshTable</code>: 將container內容重新渲染，目前使用<code>$( &quot;.container&quot; ).empty();</code>做清空，並重新向api做ajax request。</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>   function refreshTable() {\n      //Walkaround way for refreshing container to implement i18n\n      $( \".container\" ).empty();\n      mainLoad();\n    }\n</pre></div>\n</figure>\n<h4 id=\"\"></h4>\n<p><code>mainLoad</code>: 為先前的init main function</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>   function mainLoad(){\n      $(document).ready(() =&gt; {\n        // Init 20 items from twitch API\n        appendData();\n        // Infinite scroll\n        infiniteScroll();\n      });\n    }\n</pre></div>\n</figure>\n<hr>\n<h3 id=\"question-set\">Question Set</h3>\n<h4 id=\"我們在這範例中用了-window-儲存-i18n-這個全域變數這樣有什麼壞處嗎\">我們在這範例中用了 window 儲存 I18N 這個全域變數，這樣有什麼壞處嗎？</h4>\n<p>使用全域變數儲存I18N可能會和其他library有同名衝突。可使用Webpack來幫忙解決。</p>\n<hr>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=2avbfs4xESw#t=29m48s\" target=\"_blank\" rel=\"external\">Huli - 講解hw7</a></li>\n<li><a href=\"https://www.w3schools.com/jsref/obj_window.asp\" target=\"_blank\" rel=\"external\">The Window Object</a></li>\n</ul>\n<hr>\n<h3 id=\"troubleshooting\">Troubleshooting</h3>\n<ul>\n<li>有時候會有重複的stream item出現，不知道是不是offset的地方有bug，還是API的問題</li>\n</ul>\n<blockquote>\n<p>修正Huli大大抓到的bug，將infiniteScroll函式的timer宣告為global後可解決「切換語言後，infinite scroll重複發出request」的issue</p>\n</blockquote>\n<ul>\n<li>多次選取另外一種語言後transition會消失</li>\n</ul>\n<hr>\n<h3 id=\"直播筆記\">直播筆記</h3>\n<ul>\n<li>可透過語言檔的key/value來達到i18n的功能</li>\n<li>不同檔案可以透過window來傳遞變數</li>\n<li>將程式架構切得越好，增加新功能時所需要的effort越小</li>\n<li>下週作業有點難，可能要提早開始做</li>\n</ul>\n<hr>\n<h3 id=\"後記\">後記</h3>\n<p>此作業一開始嘗試時，自己找了個<code>jquery-i18n-properties</code>來使用，做一個title的callback，但UX的效果不好，點擊後會頓一兩秒才改標題，也可能是我有使用上錯誤，在看完Huli大大hw6的直播後，才發現只要用<code>window.I18N[lang].TITLE</code>就可以了，自己沒方向的搜尋常常會想的太難。最難的部分應該是重新渲染的部分，暫時只想到使用清空的方法來做重新渲染，找找有沒有更好的做法。</p>\n<p>上次做六角學院百題斬時，最後一部分有很多BOM相關的觀念都不太熟，趁這次也稍微做了些study。隨著功能的增加，模組化的必要性也就顯得越來越重要，看見Huli大大在進階閱讀地方給了許多這方面的連結，之後也試著將index.js切成多隻檔案。原本以為<code>window 儲存 I18N 這個全域變數</code>這一題是BOM的問題，但在研究模塊化時突然想到hw8是webpack，然後就發現原來作業簡介早已解答了疑惑，這一切都是安排好的呀！</p>\n<hr>\n<h3 id=\"demo\">Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw7/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw7/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>Properties</h3>\n<ul>\n<li>將實況連結加上去，寫作業時看到喜歡的台還可直接連過去看實況XD</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;a href=\"${data.channel.url}\" target=\"_blank\" class=\"stream-item\"&gt;\n</pre></div>\n</figure>\n<ul>\n<li>暫時使用以下代碼來做i18n的直播轉換</li>\n</ul>\n<h4></h4>\n<p><code>changeLang</code>: button的onclick function</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>   function changeLang(lang){\n      // 1\\. title reload\n      title.textContent = window.I18N[lang].TITLE;\n      // 2\\. button reload\n      removeBtnSelected(lang);\n      // 3\\. stream reload\n      language = lang;\n      offset = 0;\n      refreshTable();\n    }\n</pre></div>\n</figure>\n<ul>\n<li>\n<p>title reload: 參考Huli大大hw6講解的<code>window.I18N[lang].TITLE</code></p>\n</li>\n<li>\n<p>button reload: 新增button的背景色，來標示selected button</p>\n</li>\n<li>\n<p>stream reload: 使用<code>refreshTable</code> function實作</p>\n</li>\n</ul>\n<h4></h4>\n<p><code>refreshTable</code>: 將container內容重新渲染，目前使用<code>$( &quot;.container&quot; ).empty();</code>做清空，並重新向api做ajax request。</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>   function refreshTable() {\n      //Walkaround way for refreshing container to implement i18n\n      $( \".container\" ).empty();\n      mainLoad();\n    }\n</pre></div>\n</figure>\n<h4></h4>\n<p><code>mainLoad</code>: 為先前的init main function</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>   function mainLoad(){\n      $(document).ready(() =&gt; {\n        // Init 20 items from twitch API\n        appendData();\n        // Infinite scroll\n        infiniteScroll();\n      });\n    }\n</pre></div>\n</figure>\n<hr>\n<h3>Question Set</h3>\n<h4>我們在這範例中用了 window 儲存 I18N 這個全域變數，這樣有什麼壞處嗎？</h4>\n<p>使用全域變數儲存I18N可能會和其他library有同名衝突。可使用Webpack來幫忙解決。</p>\n<hr>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=2avbfs4xESw#t=29m48s\" target=\"_blank\" rel=\"external\">Huli - 講解hw7</a></li>\n<li><a href=\"https://www.w3schools.com/jsref/obj_window.asp\" target=\"_blank\" rel=\"external\">The Window Object</a></li>\n</ul>\n<hr>\n<h3>Troubleshooting</h3>\n<ul>\n<li>有時候會有重複的stream item出現，不知道是不是offset的地方有bug，還是API的問題</li>\n</ul>\n<blockquote>\n<p>修正Huli大大抓到的bug，將infiniteScroll函式的timer宣告為global後可解決「切換語言後，infinite scroll重複發出request」的issue</p>\n</blockquote>\n<ul>\n<li>多次選取另外一種語言後transition會消失</li>\n</ul>\n<hr>\n<h3>直播筆記</h3>\n<ul>\n<li>可透過語言檔的key/value來達到i18n的功能</li>\n<li>不同檔案可以透過window來傳遞變數</li>\n<li>將程式架構切得越好，增加新功能時所需要的effort越小</li>\n<li>下週作業有點難，可能要提早開始做</li>\n</ul>\n<hr>\n<h3>後記</h3>\n<p>此作業一開始嘗試時，自己找了個<code>jquery-i18n-properties</code>來使用，做一個title的callback，但UX的效果不好，點擊後會頓一兩秒才改標題，也可能是我有使用上錯誤，在看完Huli大大hw6的直播後，才發現只要用<code>window.I18N[lang].TITLE</code>就可以了，自己沒方向的搜尋常常會想的太難。最難的部分應該是重新渲染的部分，暫時只想到使用清空的方法來做重新渲染，找找有沒有更好的做法。</p>\n<p>上次做六角學院百題斬時，最後一部分有很多BOM相關的觀念都不太熟，趁這次也稍微做了些study。隨著功能的增加，模組化的必要性也就顯得越來越重要，看見Huli大大在進階閱讀地方給了許多這方面的連結，之後也試著將index.js切成多隻檔案。原本以為<code>window 儲存 I18N 這個全域變數</code>這一題是BOM的問題，但在研究模塊化時突然想到hw8是webpack，然後就發現原來作業簡介早已解答了疑惑，這一切都是安排好的呀！</p>\n<hr>\n<h3>Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw7/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw7/index.html</a></p>\n"},{"title":"學習｜Huli's Course#8｜Webpack","catalog":true,"date":"2017-06-04T10:37:54.000Z","subtitle":"之前初學react時，為了deploy也碰了一下webpack，並沒有找到比較好的文件參考，讓我一直對webpack有一種「好像沒那麼熟」的障礙，每次都會下意識避免使用webpack，直到寫完這次作業，終於能看懂`webpack.config.js`的基本設定，有一種又邁進一步的愉悅，才真正從排斥到讚歎這項發明。","header-img":"../../../../img/header_img/bg.png","_content":"\n### Properties\n\n*   本作業最重要的主題，避免使用window變數，參考Huli的[這篇](http://ithelp.ithome.com.tw/articles/10188007)文章來改寫i18n：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>// en.js\nmodule.exports = {\n  \"TITLE\": \"The Streams in English\"\n}\n\n// zh-tw.js\nmodule.exports = {\n  \"TITLE\": \"用中文直播的頻道\"\n}\n\n// i18n.js\nmodule.exports = {\n  \"zh-tw\": require('./i18n/zh-tw.js'),\n  \"en\": require('./i18n/en.js')\n}\n\n// index.js\nconst I18N = require(\"./i18n\");\n</pre></div>\n</figure>\n\n*   由於hw7中的onclick function打包後會有`Uncaught ReferenceError: function is not defined with onclick`的error而讓按鈕功能失效，因次改用以下方法監聽button：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>$('#zhBtn').on('click', function(){\n    changeLang('zh-tw');\n});\n</pre></div>\n</figure>\n\n*   jQuery部分使用`npm install --save jquery`方式安裝，並於index.js中使用`const $ = require(\"jquery\");`引入。\n\n*   參考[這篇](http://www.jianshu.com/p/42e11515c10f)所配置的devtool為`eval-source-map`，優點是增加打包速度與bundle.js的可讀性，缺點是bundle.js從275k增大為787k，是一個適合開發用但產品階段一定不要用的選項。\n\n*   將index.sass也import到index.js裡，html裡只剩下bundle.js\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>module: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loader: 'style!css'\n      },\n      {\n        test: /\\.sass$/,\n        loader: 'style-loader!css-loader!sass-loader'\n      },\n      {\n        test: /\\.(png|jpg|woff|woff2|eot|ttf|svg)$/,\n        loader: 'file-loader?name=assets/img/[name].[ext]'\n      }\n    ]\n}\n</pre></div>\n</figure>\n\n* * *\n\n### 可嘗試的修改\n\n*   base64\n*   sass\n*   webpack 可以把 CSS 也當作 library 那樣引入，你可以試試看\n*   webpack 提供了很猛的 Hot Module Replacement (HMR)，試試看吧！\n*   react\n\n* * *\n\n### References\n\n*   [我也想要模組化開發：Webpack](http://ithelp.ithome.com.tw/articles/10188007)\n*   [入门Webpack，看这篇就够了](http://www.jianshu.com/p/42e11515c10f)\n*   [jQuery.click() vs onClick](https://stackoverflow.com/questions/12627443/jquery-click-vs-onclick/12627478#12627478)\n*   [Uncaught ReferenceError: function is not defined with onclick](https://stackoverflow.com/questions/17378199/uncaught-referenceerror-function-is-not-defined-with-onclick)\n*   [CSS与SASS在webpack中的使用](http://www.jianshu.com/p/a552aef2d1a1)\n\n* * *\n\n### 直播筆記\n\n*   exports 多個東西範例：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>module.exports{\n    add: add,\n    square: square\n}\n\nvar obj = require('./module.js');\nconsole.log(obj.add(10, 20) + \" \" + obj.square(3));\n</pre></div>\n</figure>\n\n*   HTML裡的onclick=\"changeLang(\"lang-tw\")\"函式失效是因為被宣告成global的function，打包成bundle.js後會看不到，所以需要修改成如下方式：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>$('.change_tw').click(() =&gt; {\n    changeLang('zh-tw');\n});\n</pre></div>\n</figure>\n\n*   可使用`npm init -y`快速設定package.json，內容會留空\n\n*   babel\n\n    有些瀏覽器可能無法識別ES6的語法，故需要babel幫忙轉譯成ES5，可在webpack中設定babel-loader。\n\n*   package.json預設會去找node_modules下的東西\n\n*   可使用uglify plugin減少檔案大小與增進原始碼的安全性\n\n* * *\n\n### 後記\n\n跟著[這篇](http://www.jianshu.com/p/42e11515c10f)從頭練起webpack，有一種豁然開朗的感覺，還真的看完這一篇基本的就學的差不多了。\n\n真正開始著手應用webpack打包程式碼時，發現自己原本的js檔將核心功能全部集中在同一隻檔案，重構跑馬燈瞬間閃過，從HW4到HW7的每一個功能要把它們分別重新安排架構，「哇！好像是個大工程啊」內心OS如是道。這時又有一個念頭閃過：「不如趁這機會直接重構成react好了，好像很潮。」稍微權衡了一下effort，還是先摸摸鼻子從基本的原始方法開始改起。\n\n這次只有先針對i18n分出i18n.js並把全部的js檔包成bundle.js，index.js目前擠了很多功能，看起來還是很亂，有嘗試將一些function也切出去，但很容易弄到最後一團亂，有點感覺到一開始架構沒寫好(汗)，也很想既然都用了webpack了，有機會把他改成react也是很不錯的選擇。\n\n之前初學react時，為了deploy也碰了一下webpack，並沒有找到比較好的文件參考，讓我一直對webpack有一種「好像沒那麼熟」的障礙，每次都會下意識避免使用webpack，直到寫完這次作業，終於能看懂`webpack.config.js`的基本設定，有一種又邁進一步的愉悅，才真正從排斥到讚歎這項發明，很多文件都說明react生態圈的產生，是為了應付現代越來越複雜的web app，做小型專案時都因殺雞用牛刀而覺得的刀很笨重很難使，真的要打BOSS時才發現原來是一把「+8神器」啊！\n\n[Jun. 11, 2017更新] 在Front-End Developers Taiwan看到kinanson大大分享的一篇很詳細的[Webpack2教學](https://dotblogs.com.tw/kinanson/2017/06/11/124206#6)，筆記在此，之後有需要回來研究。\n\n* * *\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw8/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw8/index.html)","source":"_posts/20170604-1837-huli-course-08.md","raw":"---\ntitle: '學習｜Huli''s Course#8｜Webpack'\ncatalog: true\ndate: 2017-06-04 18:37:54\nsubtitle: 之前初學react時，為了deploy也碰了一下webpack，並沒有找到比較好的文件參考，讓我一直對webpack有一種「好像沒那麼熟」的障礙，每次都會下意識避免使用webpack，直到寫完這次作業，終於能看懂`webpack.config.js`的基本設定，有一種又邁進一步的愉悅，才真正從排斥到讚歎這項發明。\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - Webpack\n    - 前端\n    - 初學\n---\n\n### Properties\n\n*   本作業最重要的主題，避免使用window變數，參考Huli的[這篇](http://ithelp.ithome.com.tw/articles/10188007)文章來改寫i18n：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>// en.js\nmodule.exports = {\n  \"TITLE\": \"The Streams in English\"\n}\n\n// zh-tw.js\nmodule.exports = {\n  \"TITLE\": \"用中文直播的頻道\"\n}\n\n// i18n.js\nmodule.exports = {\n  \"zh-tw\": require('./i18n/zh-tw.js'),\n  \"en\": require('./i18n/en.js')\n}\n\n// index.js\nconst I18N = require(\"./i18n\");\n</pre></div>\n</figure>\n\n*   由於hw7中的onclick function打包後會有`Uncaught ReferenceError: function is not defined with onclick`的error而讓按鈕功能失效，因次改用以下方法監聽button：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>$('#zhBtn').on('click', function(){\n    changeLang('zh-tw');\n});\n</pre></div>\n</figure>\n\n*   jQuery部分使用`npm install --save jquery`方式安裝，並於index.js中使用`const $ = require(\"jquery\");`引入。\n\n*   參考[這篇](http://www.jianshu.com/p/42e11515c10f)所配置的devtool為`eval-source-map`，優點是增加打包速度與bundle.js的可讀性，缺點是bundle.js從275k增大為787k，是一個適合開發用但產品階段一定不要用的選項。\n\n*   將index.sass也import到index.js裡，html裡只剩下bundle.js\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>module: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loader: 'style!css'\n      },\n      {\n        test: /\\.sass$/,\n        loader: 'style-loader!css-loader!sass-loader'\n      },\n      {\n        test: /\\.(png|jpg|woff|woff2|eot|ttf|svg)$/,\n        loader: 'file-loader?name=assets/img/[name].[ext]'\n      }\n    ]\n}\n</pre></div>\n</figure>\n\n* * *\n\n### 可嘗試的修改\n\n*   base64\n*   sass\n*   webpack 可以把 CSS 也當作 library 那樣引入，你可以試試看\n*   webpack 提供了很猛的 Hot Module Replacement (HMR)，試試看吧！\n*   react\n\n* * *\n\n### References\n\n*   [我也想要模組化開發：Webpack](http://ithelp.ithome.com.tw/articles/10188007)\n*   [入门Webpack，看这篇就够了](http://www.jianshu.com/p/42e11515c10f)\n*   [jQuery.click() vs onClick](https://stackoverflow.com/questions/12627443/jquery-click-vs-onclick/12627478#12627478)\n*   [Uncaught ReferenceError: function is not defined with onclick](https://stackoverflow.com/questions/17378199/uncaught-referenceerror-function-is-not-defined-with-onclick)\n*   [CSS与SASS在webpack中的使用](http://www.jianshu.com/p/a552aef2d1a1)\n\n* * *\n\n### 直播筆記\n\n*   exports 多個東西範例：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>module.exports{\n    add: add,\n    square: square\n}\n\nvar obj = require('./module.js');\nconsole.log(obj.add(10, 20) + \" \" + obj.square(3));\n</pre></div>\n</figure>\n\n*   HTML裡的onclick=\"changeLang(\"lang-tw\")\"函式失效是因為被宣告成global的function，打包成bundle.js後會看不到，所以需要修改成如下方式：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>$('.change_tw').click(() =&gt; {\n    changeLang('zh-tw');\n});\n</pre></div>\n</figure>\n\n*   可使用`npm init -y`快速設定package.json，內容會留空\n\n*   babel\n\n    有些瀏覽器可能無法識別ES6的語法，故需要babel幫忙轉譯成ES5，可在webpack中設定babel-loader。\n\n*   package.json預設會去找node_modules下的東西\n\n*   可使用uglify plugin減少檔案大小與增進原始碼的安全性\n\n* * *\n\n### 後記\n\n跟著[這篇](http://www.jianshu.com/p/42e11515c10f)從頭練起webpack，有一種豁然開朗的感覺，還真的看完這一篇基本的就學的差不多了。\n\n真正開始著手應用webpack打包程式碼時，發現自己原本的js檔將核心功能全部集中在同一隻檔案，重構跑馬燈瞬間閃過，從HW4到HW7的每一個功能要把它們分別重新安排架構，「哇！好像是個大工程啊」內心OS如是道。這時又有一個念頭閃過：「不如趁這機會直接重構成react好了，好像很潮。」稍微權衡了一下effort，還是先摸摸鼻子從基本的原始方法開始改起。\n\n這次只有先針對i18n分出i18n.js並把全部的js檔包成bundle.js，index.js目前擠了很多功能，看起來還是很亂，有嘗試將一些function也切出去，但很容易弄到最後一團亂，有點感覺到一開始架構沒寫好(汗)，也很想既然都用了webpack了，有機會把他改成react也是很不錯的選擇。\n\n之前初學react時，為了deploy也碰了一下webpack，並沒有找到比較好的文件參考，讓我一直對webpack有一種「好像沒那麼熟」的障礙，每次都會下意識避免使用webpack，直到寫完這次作業，終於能看懂`webpack.config.js`的基本設定，有一種又邁進一步的愉悅，才真正從排斥到讚歎這項發明，很多文件都說明react生態圈的產生，是為了應付現代越來越複雜的web app，做小型專案時都因殺雞用牛刀而覺得的刀很笨重很難使，真的要打BOSS時才發現原來是一把「+8神器」啊！\n\n[Jun. 11, 2017更新] 在Front-End Developers Taiwan看到kinanson大大分享的一篇很詳細的[Webpack2教學](https://dotblogs.com.tw/kinanson/2017/06/11/124206#6)，筆記在此，之後有需要回來研究。\n\n* * *\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw8/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw8/index.html)","slug":"20170604-1837-huli-course-08","published":1,"updated":"2017-06-24T15:36:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs58000n474uf4yty1h1","content":"<h3 id=\"properties\">Properties</h3>\n<ul>\n<li>本作業最重要的主題，避免使用window變數，參考Huli的<a href=\"http://ithelp.ithome.com.tw/articles/10188007\" target=\"_blank\" rel=\"external\">這篇</a>文章來改寫i18n：</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>// en.js\nmodule.exports = {\n  \"TITLE\": \"The Streams in English\"\n}\n<p>// zh-tw.js<br>\nmodule.exports = {<br>\n“TITLE”: “用中文直播的頻道”<br>\n}</p>\n<p>// i18n.js<br>\nmodule.exports = {<br>\n“zh-tw”: require(’./i18n/zh-tw.js’),<br>\n“en”: require(’./i18n/en.js’)<br>\n}</p>\n<p>// index.js<br>\nconst I18N = require(&quot;./i18n&quot;);</p>\n</pre></div>\n</figure>\n<ul>\n<li>由於hw7中的onclick function打包後會有<code>Uncaught ReferenceError: function is not defined with onclick</code>的error而讓按鈕功能失效，因次改用以下方法監聽button：</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>$('#zhBtn').on('click', function(){\n    changeLang('zh-tw');\n});\n</pre></div>\n</figure>\n<ul>\n<li>\n<p>jQuery部分使用<code>npm install --save jquery</code>方式安裝，並於index.js中使用<code>const $ = require(&quot;jquery&quot;);</code>引入。</p>\n</li>\n<li>\n<p>參考<a href=\"http://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"external\">這篇</a>所配置的devtool為<code>eval-source-map</code>，優點是增加打包速度與bundle.js的可讀性，缺點是bundle.js從275k增大為787k，是一個適合開發用但產品階段一定不要用的選項。</p>\n</li>\n<li>\n<p>將index.sass也import到index.js裡，html裡只剩下bundle.js</p>\n</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>module: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loader: 'style!css'\n      },\n      {\n        test: /\\.sass$/,\n        loader: 'style-loader!css-loader!sass-loader'\n      },\n      {\n        test: /\\.(png|jpg|woff|woff2|eot|ttf|svg)$/,\n        loader: 'file-loader?name=assets/img/[name].[ext]'\n      }\n    ]\n}\n</pre></div>\n</figure>\n<hr>\n<h3 id=\"可嘗試的修改\">可嘗試的修改</h3>\n<ul>\n<li>base64</li>\n<li>sass</li>\n<li>webpack 可以把 CSS 也當作 library 那樣引入，你可以試試看</li>\n<li>webpack 提供了很猛的 Hot Module Replacement (HMR)，試試看吧！</li>\n<li>react</li>\n</ul>\n<hr>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"http://ithelp.ithome.com.tw/articles/10188007\" target=\"_blank\" rel=\"external\">我也想要模組化開發：Webpack</a></li>\n<li><a href=\"http://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"external\">入门Webpack，看这篇就够了</a></li>\n<li><a href=\"https://stackoverflow.com/questions/12627443/jquery-click-vs-onclick/12627478#12627478\" target=\"_blank\" rel=\"external\">jQuery.click() vs onClick</a></li>\n<li><a href=\"https://stackoverflow.com/questions/17378199/uncaught-referenceerror-function-is-not-defined-with-onclick\" target=\"_blank\" rel=\"external\">Uncaught ReferenceError: function is not defined with onclick</a></li>\n<li><a href=\"http://www.jianshu.com/p/a552aef2d1a1\" target=\"_blank\" rel=\"external\">CSS与SASS在webpack中的使用</a></li>\n</ul>\n<hr>\n<h3 id=\"直播筆記\">直播筆記</h3>\n<ul>\n<li>exports 多個東西範例：</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>module.exports{\n    add: add,\n    square: square\n}\n<p>var obj = require(’./module.js’);<br>\nconsole.log(obj.add(10, 20) + &quot; &quot; + obj.square(3));</p>\n</pre></div>\n</figure>\n<ul>\n<li>HTML裡的onclick=&quot;changeLang(“lang-tw”)&quot;函式失效是因為被宣告成global的function，打包成bundle.js後會看不到，所以需要修改成如下方式：</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>$('.change_tw').click(() =&gt; {\n    changeLang('zh-tw');\n});\n</pre></div>\n</figure>\n<ul>\n<li>\n<p>可使用<code>npm init -y</code>快速設定package.json，內容會留空</p>\n</li>\n<li>\n<p>babel</p>\n<p>有些瀏覽器可能無法識別ES6的語法，故需要babel幫忙轉譯成ES5，可在webpack中設定babel-loader。</p>\n</li>\n<li>\n<p>package.json預設會去找node_modules下的東西</p>\n</li>\n<li>\n<p>可使用uglify plugin減少檔案大小與增進原始碼的安全性</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"後記\">後記</h3>\n<p>跟著<a href=\"http://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"external\">這篇</a>從頭練起webpack，有一種豁然開朗的感覺，還真的看完這一篇基本的就學的差不多了。</p>\n<p>真正開始著手應用webpack打包程式碼時，發現自己原本的js檔將核心功能全部集中在同一隻檔案，重構跑馬燈瞬間閃過，從HW4到HW7的每一個功能要把它們分別重新安排架構，「哇！好像是個大工程啊」內心OS如是道。這時又有一個念頭閃過：「不如趁這機會直接重構成react好了，好像很潮。」稍微權衡了一下effort，還是先摸摸鼻子從基本的原始方法開始改起。</p>\n<p>這次只有先針對i18n分出i18n.js並把全部的js檔包成bundle.js，index.js目前擠了很多功能，看起來還是很亂，有嘗試將一些function也切出去，但很容易弄到最後一團亂，有點感覺到一開始架構沒寫好(汗)，也很想既然都用了webpack了，有機會把他改成react也是很不錯的選擇。</p>\n<p>之前初學react時，為了deploy也碰了一下webpack，並沒有找到比較好的文件參考，讓我一直對webpack有一種「好像沒那麼熟」的障礙，每次都會下意識避免使用webpack，直到寫完這次作業，終於能看懂<code>webpack.config.js</code>的基本設定，有一種又邁進一步的愉悅，才真正從排斥到讚歎這項發明，很多文件都說明react生態圈的產生，是為了應付現代越來越複雜的web app，做小型專案時都因殺雞用牛刀而覺得的刀很笨重很難使，真的要打BOSS時才發現原來是一把「+8神器」啊！</p>\n<p>[Jun. 11, 2017更新] 在Front-End Developers Taiwan看到kinanson大大分享的一篇很詳細的<a href=\"https://dotblogs.com.tw/kinanson/2017/06/11/124206#6\" target=\"_blank\" rel=\"external\">Webpack2教學</a>，筆記在此，之後有需要回來研究。</p>\n<hr>\n<h3 id=\"demo\">Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw8/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw8/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>Properties</h3>\n<ul>\n<li>本作業最重要的主題，避免使用window變數，參考Huli的<a href=\"http://ithelp.ithome.com.tw/articles/10188007\" target=\"_blank\" rel=\"external\">這篇</a>文章來改寫i18n：</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>// en.js\nmodule.exports = {\n  \"TITLE\": \"The Streams in English\"\n}\n<p>// zh-tw.js<br>\nmodule.exports = {<br>\n“TITLE”: “用中文直播的頻道”<br>\n}</p>\n<p>// i18n.js<br>\nmodule.exports = {<br>\n“zh-tw”: require(’./i18n/zh-tw.js’),<br>\n“en”: require(’./i18n/en.js’)<br>\n}</p>\n<p>// index.js<br>\nconst I18N = require(&quot;./i18n&quot;);</p>\n</pre></div>\n</figure>\n<ul>\n<li>由於hw7中的onclick function打包後會有<code>Uncaught ReferenceError: function is not defined with onclick</code>的error而讓按鈕功能失效，因次改用以下方法監聽button：</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>$('#zhBtn').on('click', function(){\n    changeLang('zh-tw');\n});\n</pre></div>\n</figure>\n<ul>\n<li>\n<p>jQuery部分使用<code>npm install --save jquery</code>方式安裝，並於index.js中使用<code>const $ = require(&quot;jquery&quot;);</code>引入。</p>\n</li>\n<li>\n<p>參考<a href=\"http://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"external\">這篇</a>所配置的devtool為<code>eval-source-map</code>，優點是增加打包速度與bundle.js的可讀性，缺點是bundle.js從275k增大為787k，是一個適合開發用但產品階段一定不要用的選項。</p>\n</li>\n<li>\n<p>將index.sass也import到index.js裡，html裡只剩下bundle.js</p>\n</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>module: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loader: 'style!css'\n      },\n      {\n        test: /\\.sass$/,\n        loader: 'style-loader!css-loader!sass-loader'\n      },\n      {\n        test: /\\.(png|jpg|woff|woff2|eot|ttf|svg)$/,\n        loader: 'file-loader?name=assets/img/[name].[ext]'\n      }\n    ]\n}\n</pre></div>\n</figure>\n<hr>\n<h3>可嘗試的修改</h3>\n<ul>\n<li>base64</li>\n<li>sass</li>\n<li>webpack 可以把 CSS 也當作 library 那樣引入，你可以試試看</li>\n<li>webpack 提供了很猛的 Hot Module Replacement (HMR)，試試看吧！</li>\n<li>react</li>\n</ul>\n<hr>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://ithelp.ithome.com.tw/articles/10188007\" target=\"_blank\" rel=\"external\">我也想要模組化開發：Webpack</a></li>\n<li><a href=\"http://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"external\">入门Webpack，看这篇就够了</a></li>\n<li><a href=\"https://stackoverflow.com/questions/12627443/jquery-click-vs-onclick/12627478#12627478\" target=\"_blank\" rel=\"external\">jQuery.click() vs onClick</a></li>\n<li><a href=\"https://stackoverflow.com/questions/17378199/uncaught-referenceerror-function-is-not-defined-with-onclick\" target=\"_blank\" rel=\"external\">Uncaught ReferenceError: function is not defined with onclick</a></li>\n<li><a href=\"http://www.jianshu.com/p/a552aef2d1a1\" target=\"_blank\" rel=\"external\">CSS与SASS在webpack中的使用</a></li>\n</ul>\n<hr>\n<h3>直播筆記</h3>\n<ul>\n<li>exports 多個東西範例：</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>module.exports{\n    add: add,\n    square: square\n}\n<p>var obj = require(’./module.js’);<br>\nconsole.log(obj.add(10, 20) + &quot; &quot; + obj.square(3));</p>\n</pre></div>\n</figure>\n<ul>\n<li>HTML裡的onclick=&quot;changeLang(“lang-tw”)&quot;函式失效是因為被宣告成global的function，打包成bundle.js後會看不到，所以需要修改成如下方式：</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>$('.change_tw').click(() =&gt; {\n    changeLang('zh-tw');\n});\n</pre></div>\n</figure>\n<ul>\n<li>\n<p>可使用<code>npm init -y</code>快速設定package.json，內容會留空</p>\n</li>\n<li>\n<p>babel</p>\n<p>有些瀏覽器可能無法識別ES6的語法，故需要babel幫忙轉譯成ES5，可在webpack中設定babel-loader。</p>\n</li>\n<li>\n<p>package.json預設會去找node_modules下的東西</p>\n</li>\n<li>\n<p>可使用uglify plugin減少檔案大小與增進原始碼的安全性</p>\n</li>\n</ul>\n<hr>\n<h3>後記</h3>\n<p>跟著<a href=\"http://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"external\">這篇</a>從頭練起webpack，有一種豁然開朗的感覺，還真的看完這一篇基本的就學的差不多了。</p>\n<p>真正開始著手應用webpack打包程式碼時，發現自己原本的js檔將核心功能全部集中在同一隻檔案，重構跑馬燈瞬間閃過，從HW4到HW7的每一個功能要把它們分別重新安排架構，「哇！好像是個大工程啊」內心OS如是道。這時又有一個念頭閃過：「不如趁這機會直接重構成react好了，好像很潮。」稍微權衡了一下effort，還是先摸摸鼻子從基本的原始方法開始改起。</p>\n<p>這次只有先針對i18n分出i18n.js並把全部的js檔包成bundle.js，index.js目前擠了很多功能，看起來還是很亂，有嘗試將一些function也切出去，但很容易弄到最後一團亂，有點感覺到一開始架構沒寫好(汗)，也很想既然都用了webpack了，有機會把他改成react也是很不錯的選擇。</p>\n<p>之前初學react時，為了deploy也碰了一下webpack，並沒有找到比較好的文件參考，讓我一直對webpack有一種「好像沒那麼熟」的障礙，每次都會下意識避免使用webpack，直到寫完這次作業，終於能看懂<code>webpack.config.js</code>的基本設定，有一種又邁進一步的愉悅，才真正從排斥到讚歎這項發明，很多文件都說明react生態圈的產生，是為了應付現代越來越複雜的web app，做小型專案時都因殺雞用牛刀而覺得的刀很笨重很難使，真的要打BOSS時才發現原來是一把「+8神器」啊！</p>\n<p>[Jun. 11, 2017更新] 在Front-End Developers Taiwan看到kinanson大大分享的一篇很詳細的<a href=\"https://dotblogs.com.tw/kinanson/2017/06/11/124206#6\" target=\"_blank\" rel=\"external\">Webpack2教學</a>，筆記在此，之後有需要回來研究。</p>\n<hr>\n<h3>Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw8/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw8/index.html</a></p>\n"},{"title":"筆記｜前端面試考題｜事件冒泡","catalog":true,"date":"2017-06-09T13:16:09.000Z","subtitle":"昨天開始了第一次的前端面試，整體而言準備不夠周全，後來查了一些資料發現有一些還是前端面試經典題(汗)。慢慢補上一些沒回答得很好的題目，並找出可能的解法，有錯歡迎來信或留言指正。","header-img":"../../../../img/header_img/bg.png","_content":"\n### [JS] 事件冒泡\n\n#### 今天要對一個id操作要怎麼寫？要對這個id加事件怎麼做？要強制把動作停下來，有什麼方法？\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;body&gt;\n  &lt;a id=\"child\" href=\"http://www.google.com/\"&gt;\n    子元素\n  &lt;/a&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    var child = document.getElementById(\"child\");\n    child.addEventListener(\"click\",function(e){\n      e.preventDefault(); //終止預設行為\n      console.log(\"click-child\");\n    },false);\n  &lt;/script&gt;\n&lt;/body&gt;\n</pre></div>\n</figure>\n\n答案應該是**`e.preventDefault()`**，因為沒用過沒回答出來，看了[這篇](https://dotblogs.com.tw/harry/2016/09/10/131956)講得很詳細：\n\n「event.preventDefault()就是終止預設行為(Stop Event Flow)；以『超連結』為例，瀏覽器看到頁面上有超連結，只要偵測到超連結被點擊到，隨即會幫我做『導向連結』的動作，『導向連結』即是超連結的預設行為。」\n\n#### 今天有a與b，都有click事件，a在b的內部，那點擊a後行為是先a再b，那今天我不想先a後b，我有什麼方法可以把兩者分開？\n\n這是個自學中沒遇過的問題，所以被問到的當下只能回答「沒使用過」，面試結束後自己寫小程式測試，但還是不太理解題意，在Slack群組稍微問了一下得到回覆：\n\n*   「兩個DOM元素彼此包起來之後，onClick事件其實好像蠻常看到的，像是圖+文字合成一個區塊。」\n*   「之前摸公司的專案也有遇過類似的問題，上層選單點了，下層的物件也被觸發了XDDD」\n*   「如果要處理在 html 裡面兩個互為父子的元素，關鍵字：js 事件冒泡」\n\n才發現這是在前端工作很常碰到的問題，這題完全精闢地區分了前端經驗的多寡，感謝各位大大的提示。\n\n後來針對事件冒泡看了一些文件，[這篇](http://www.cnblogs.com/bfgis/p/5460191.html)講的蠻清楚的。所以題意應該如下：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;body&gt;\n    &lt;a id=\"parent\"&gt;\n        父元素\n        &lt;a id=\"child\"&gt;\n            子元素\n        &lt;/a&gt;\n    &lt;/a&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var parent = document.getElementById(\"parent\");\n        var child = document.getElementById(\"child\");\n\n        parent.addEventListener(\"click\",function(e){\n            console.log(\"click-parent\");\n        },false);\n\n        child.addEventListener(\"click\",function(e){\n            e.stopPropagation();\n            console.log(\"click-child\");\n        },false);\n    &lt;/script&gt;\n&lt;/body&gt;\n</pre></div>\n</figure>\n\n答案即是在子元素加上**`e.stopPropagation()`**如下：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>child.addEventListener(\"click\",function(e){\n    e.stopPropagation();\n    console.log(\"click-child\");\n},false);\n</pre></div>\n</figure>\n\n#### Reference\n\n*   [[jQuery] event.preventDefault() 與 event.stopPropagation() 的差異](https://dotblogs.com.tw/harry/2016/09/10/131956)\n*   [JavaScript 详说事件机制之冒泡、捕获、传播、委托](http://www.cnblogs.com/bfgis/p/5460191.html)","source":"_posts/20170609-1529-interview-js-event-bubble.md","raw":"---\ntitle: 筆記｜前端面試考題｜事件冒泡\ncatalog: true\ndate: 2017-06-09 21:16:09\nsubtitle: 昨天開始了第一次的前端面試，整體而言準備不夠周全，後來查了一些資料發現有一些還是前端面試經典題(汗)。慢慢補上一些沒回答得很好的題目，並找出可能的解法，有錯歡迎來信或留言指正。\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - JavaScript\n    - stopPropagation\n    - 前端\n    - 筆記\n---\n\n### [JS] 事件冒泡\n\n#### 今天要對一個id操作要怎麼寫？要對這個id加事件怎麼做？要強制把動作停下來，有什麼方法？\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;body&gt;\n  &lt;a id=\"child\" href=\"http://www.google.com/\"&gt;\n    子元素\n  &lt;/a&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    var child = document.getElementById(\"child\");\n    child.addEventListener(\"click\",function(e){\n      e.preventDefault(); //終止預設行為\n      console.log(\"click-child\");\n    },false);\n  &lt;/script&gt;\n&lt;/body&gt;\n</pre></div>\n</figure>\n\n答案應該是**`e.preventDefault()`**，因為沒用過沒回答出來，看了[這篇](https://dotblogs.com.tw/harry/2016/09/10/131956)講得很詳細：\n\n「event.preventDefault()就是終止預設行為(Stop Event Flow)；以『超連結』為例，瀏覽器看到頁面上有超連結，只要偵測到超連結被點擊到，隨即會幫我做『導向連結』的動作，『導向連結』即是超連結的預設行為。」\n\n#### 今天有a與b，都有click事件，a在b的內部，那點擊a後行為是先a再b，那今天我不想先a後b，我有什麼方法可以把兩者分開？\n\n這是個自學中沒遇過的問題，所以被問到的當下只能回答「沒使用過」，面試結束後自己寫小程式測試，但還是不太理解題意，在Slack群組稍微問了一下得到回覆：\n\n*   「兩個DOM元素彼此包起來之後，onClick事件其實好像蠻常看到的，像是圖+文字合成一個區塊。」\n*   「之前摸公司的專案也有遇過類似的問題，上層選單點了，下層的物件也被觸發了XDDD」\n*   「如果要處理在 html 裡面兩個互為父子的元素，關鍵字：js 事件冒泡」\n\n才發現這是在前端工作很常碰到的問題，這題完全精闢地區分了前端經驗的多寡，感謝各位大大的提示。\n\n後來針對事件冒泡看了一些文件，[這篇](http://www.cnblogs.com/bfgis/p/5460191.html)講的蠻清楚的。所以題意應該如下：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;body&gt;\n    &lt;a id=\"parent\"&gt;\n        父元素\n        &lt;a id=\"child\"&gt;\n            子元素\n        &lt;/a&gt;\n    &lt;/a&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var parent = document.getElementById(\"parent\");\n        var child = document.getElementById(\"child\");\n\n        parent.addEventListener(\"click\",function(e){\n            console.log(\"click-parent\");\n        },false);\n\n        child.addEventListener(\"click\",function(e){\n            e.stopPropagation();\n            console.log(\"click-child\");\n        },false);\n    &lt;/script&gt;\n&lt;/body&gt;\n</pre></div>\n</figure>\n\n答案即是在子元素加上**`e.stopPropagation()`**如下：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>child.addEventListener(\"click\",function(e){\n    e.stopPropagation();\n    console.log(\"click-child\");\n},false);\n</pre></div>\n</figure>\n\n#### Reference\n\n*   [[jQuery] event.preventDefault() 與 event.stopPropagation() 的差異](https://dotblogs.com.tw/harry/2016/09/10/131956)\n*   [JavaScript 详说事件机制之冒泡、捕获、传播、委托](http://www.cnblogs.com/bfgis/p/5460191.html)","slug":"20170609-1529-interview-js-event-bubble","published":1,"updated":"2017-06-24T15:40:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs5a000o474u8vgygxzv","content":"<h3 id=\"js-事件冒泡\">[JS] 事件冒泡</h3>\n<h4 id=\"今天要對一個id操作要怎麼寫要對這個id加事件怎麼做要強制把動作停下來有什麼方法\">今天要對一個id操作要怎麼寫？要對這個id加事件怎麼做？要強制把動作停下來，有什麼方法？</h4>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;body&gt;\n  &lt;a id=\"child\" href=\"http://www.google.com/\"&gt;\n    子元素\n  &lt;/a&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    var child = document.getElementById(\"child\");\n    child.addEventListener(\"click\",function(e){\n      e.preventDefault(); //終止預設行為\n      console.log(\"click-child\");\n    },false);\n  &lt;/script&gt;\n&lt;/body&gt;\n</pre></div>\n</figure>\n<p>答案應該是**<code>e.preventDefault()</code>**，因為沒用過沒回答出來，看了<a href=\"https://dotblogs.com.tw/harry/2016/09/10/131956\" target=\"_blank\" rel=\"external\">這篇</a>講得很詳細：</p>\n<p>「event.preventDefault()就是終止預設行為(Stop Event Flow)；以『超連結』為例，瀏覽器看到頁面上有超連結，只要偵測到超連結被點擊到，隨即會幫我做『導向連結』的動作，『導向連結』即是超連結的預設行為。」</p>\n<h4 id=\"今天有a與b都有click事件a在b的內部那點擊a後行為是先a再b那今天我不想先a後b我有什麼方法可以把兩者分開\">今天有a與b，都有click事件，a在b的內部，那點擊a後行為是先a再b，那今天我不想先a後b，我有什麼方法可以把兩者分開？</h4>\n<p>這是個自學中沒遇過的問題，所以被問到的當下只能回答「沒使用過」，面試結束後自己寫小程式測試，但還是不太理解題意，在Slack群組稍微問了一下得到回覆：</p>\n<ul>\n<li>「兩個DOM元素彼此包起來之後，onClick事件其實好像蠻常看到的，像是圖+文字合成一個區塊。」</li>\n<li>「之前摸公司的專案也有遇過類似的問題，上層選單點了，下層的物件也被觸發了XDDD」</li>\n<li>「如果要處理在 html 裡面兩個互為父子的元素，關鍵字：js 事件冒泡」</li>\n</ul>\n<p>才發現這是在前端工作很常碰到的問題，這題完全精闢地區分了前端經驗的多寡，感謝各位大大的提示。</p>\n<p>後來針對事件冒泡看了一些文件，<a href=\"http://www.cnblogs.com/bfgis/p/5460191.html\" target=\"_blank\" rel=\"external\">這篇</a>講的蠻清楚的。所以題意應該如下：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;body&gt;\n    &lt;a id=\"parent\"&gt;\n        父元素\n        &lt;a id=\"child\"&gt;\n            子元素\n        &lt;/a&gt;\n    &lt;/a&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var parent = document.getElementById(\"parent\");\n        var child = document.getElementById(\"child\");\n<pre><code>    parent.addEventListener(&quot;click&quot;,function(e){\n        console.log(&quot;click-parent&quot;);\n    },false);\n\n    child.addEventListener(&quot;click&quot;,function(e){\n        e.stopPropagation();\n        console.log(&quot;click-child&quot;);\n    },false);\n&amp;lt;/script&amp;gt;\n</code></pre>\n<p>&lt;/body&gt;</p>\n</pre></div>\n</figure>\n<p>答案即是在子元素加上**<code>e.stopPropagation()</code>**如下：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>child.addEventListener(\"click\",function(e){\n    e.stopPropagation();\n    console.log(\"click-child\");\n},false);\n</pre></div>\n</figure>\n<h4 id=\"reference\">Reference</h4>\n<ul>\n<li><a href=\"https://dotblogs.com.tw/harry/2016/09/10/131956\" target=\"_blank\" rel=\"external\">[jQuery] event.preventDefault() 與 event.stopPropagation() 的差異</a></li>\n<li><a href=\"http://www.cnblogs.com/bfgis/p/5460191.html\" target=\"_blank\" rel=\"external\">JavaScript 详说事件机制之冒泡、捕获、传播、委托</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3>[JS] 事件冒泡</h3>\n<h4>今天要對一個id操作要怎麼寫？要對這個id加事件怎麼做？要強制把動作停下來，有什麼方法？</h4>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;body&gt;\n  &lt;a id=\"child\" href=\"http://www.google.com/\"&gt;\n    子元素\n  &lt;/a&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    var child = document.getElementById(\"child\");\n    child.addEventListener(\"click\",function(e){\n      e.preventDefault(); //終止預設行為\n      console.log(\"click-child\");\n    },false);\n  &lt;/script&gt;\n&lt;/body&gt;\n</pre></div>\n</figure>\n<p>答案應該是**<code>e.preventDefault()</code>**，因為沒用過沒回答出來，看了<a href=\"https://dotblogs.com.tw/harry/2016/09/10/131956\" target=\"_blank\" rel=\"external\">這篇</a>講得很詳細：</p>\n<p>「event.preventDefault()就是終止預設行為(Stop Event Flow)；以『超連結』為例，瀏覽器看到頁面上有超連結，只要偵測到超連結被點擊到，隨即會幫我做『導向連結』的動作，『導向連結』即是超連結的預設行為。」</p>\n<h4>今天有a與b，都有click事件，a在b的內部，那點擊a後行為是先a再b，那今天我不想先a後b，我有什麼方法可以把兩者分開？</h4>\n<p>這是個自學中沒遇過的問題，所以被問到的當下只能回答「沒使用過」，面試結束後自己寫小程式測試，但還是不太理解題意，在Slack群組稍微問了一下得到回覆：</p>\n<ul>\n<li>「兩個DOM元素彼此包起來之後，onClick事件其實好像蠻常看到的，像是圖+文字合成一個區塊。」</li>\n<li>「之前摸公司的專案也有遇過類似的問題，上層選單點了，下層的物件也被觸發了XDDD」</li>\n<li>「如果要處理在 html 裡面兩個互為父子的元素，關鍵字：js 事件冒泡」</li>\n</ul>\n<p>才發現這是在前端工作很常碰到的問題，這題完全精闢地區分了前端經驗的多寡，感謝各位大大的提示。</p>\n<p>後來針對事件冒泡看了一些文件，<a href=\"http://www.cnblogs.com/bfgis/p/5460191.html\" target=\"_blank\" rel=\"external\">這篇</a>講的蠻清楚的。所以題意應該如下：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>&lt;body&gt;\n    &lt;a id=\"parent\"&gt;\n        父元素\n        &lt;a id=\"child\"&gt;\n            子元素\n        &lt;/a&gt;\n    &lt;/a&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var parent = document.getElementById(\"parent\");\n        var child = document.getElementById(\"child\");\n<pre><code>    parent.addEventListener(&quot;click&quot;,function(e){\n        console.log(&quot;click-parent&quot;);\n    },false);\n\n    child.addEventListener(&quot;click&quot;,function(e){\n        e.stopPropagation();\n        console.log(&quot;click-child&quot;);\n    },false);\n&amp;lt;/script&amp;gt;\n</code></pre>\n<p>&lt;/body&gt;</p>\n</pre></div>\n</figure>\n<p>答案即是在子元素加上**<code>e.stopPropagation()</code>**如下：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>child.addEventListener(\"click\",function(e){\n    e.stopPropagation();\n    console.log(\"click-child\");\n},false);\n</pre></div>\n</figure>\n<h4>Reference</h4>\n<ul>\n<li><a href=\"https://dotblogs.com.tw/harry/2016/09/10/131956\" target=\"_blank\" rel=\"external\">[jQuery] event.preventDefault() 與 event.stopPropagation() 的差異</a></li>\n<li><a href=\"http://www.cnblogs.com/bfgis/p/5460191.html\" target=\"_blank\" rel=\"external\">JavaScript 详说事件机制之冒泡、捕获、传播、委托</a></li>\n</ul>\n"},{"title":"學習｜Huli's Course#9｜Gulp","catalog":true,"date":"2017-06-10T22:47:17.000Z","subtitle":"在針對複雜的大型專案的初期架構上，能夠透過Webpack、Gulp這些工具來增加開發效率與維護性，又能優化網站效能，這或許也是前端工程師的價值之一吧。","header-img":"../../../../img/header_img/bg.png","_content":"\n### Usage\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>npm init\nnpm run build\n</pre></div>\n</figure>\n\n### Properties\n\n*   webpack負責工作(沿用hw8)：\n\n        *   將index.sass也import到index.js裡\n    *   打包所有js成bundle.js\n\n*   gulp(hw9新增)：\n\n        *   用`gulp-inline`來uglify bundle.js並inline到html裡\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>var gulp         = require('gulp'),\n    gulpSequence = require('gulp-sequence'),\n    inline       = require('gulp-inline'),\n    uglify       = require('gulp-uglify');\n\n// Inline uglify bunfle.js into html\ngulp.task('inline-js', function() {\n  return gulp.src('./dist/index.html')\n    .pipe(inline({\n      base: 'dist/',\n      js: function() {\n        return uglify({\n          mangle: false\n        });\n      }\n    }))\n    .pipe(gulp.dest('./'));\n});\n\n// Let tasks above run sequentially\ngulp.task('default', gulpSequence('inline-js'));\n\n</pre></div>\n</figure>\n\n*   package.json設定script如下：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>\"scripts\": {\n    \"webpack\": \"webpack\",\n    \"gulp\": \"gulp\",\n    \"build\": \"webpack &amp;&amp; gulp\"\n}\n</pre></div>\n</figure>\n\n*   在webpack增加babel loader轉譯ES6。\n\n*   index.html原始檔暫時就擺在dist裡，應該是可以新增一個src/放assets/與html，但就暫時先這樣吧。輸出的inline index.html放在根目錄。\n\n* * *\n\n### 筆記\n\n*   gulp只有五个方法： task，run，watch，src，和dest，在项目根目录新建一个js文件并命名为gulpfile.js\n\n*   在使用gulp进行项目构建的时候，我们一开始的策略是将所有js打包为一个文件，所有css打包为一个文件。然后每个页面都将只加载一个js和一个css,也就是我们通常所说的「all in one」打包模式。这样做的目的就是减少http请求。\n\n*   yuanyu90221：「如果最後gulp+webpack何在一起的話，是會把webpack的動作放在 gulp task內嗎？」\n\n    huli：「不合在一起的做法就是新增一個指令，例如說 build，裡面跑：webpack &amp;&amp; gulp，合在一起就是只要跑 gulp 就好，一定是webpack跑完才跑gulp。」\n\n*   concatenation, minification, uglification差異([參考](https://stackoverflow.com/questions/19694448/grunt-whats-the-difference-between-concat-and-uglify-and-minify))\n\n    1.  concatenation只是打包所有被指定的檔案成一個大檔案\n    2.  minification移除不必要的空白與其他多餘的token\n    3.  uglification將code變形為不易讀的格式，例如將parameter轉為更短的變數名等，減少檔案大小，通常是商業用途，增進原始碼的安全性。\n\n* * *\n\n### 直播筆記\n\n*   單獨執行`gulp`指令時，會去認`gulp.task('default', function(){...});`，如果沒有default會噴錯誤訊息。\n*   執行`gulp doSth`指令時，可以執行`gulp.task('doSth', function(){...});`的內容。\n*   原始碼可整理放在`src/`資料夾，編譯後檔案可放在`dist/`資料夾。\n*   可使用`gulp-webpack`來將webpack內容整合到gulp中。([參考](https://www.npmjs.com/package/gulp-webpack))\n\n* * *\n\n### 後記\n\n在著手開始這項作業的初期，馬上碰到了一個問題：「要怎麼結合webpack與gulp？」\n\n稍微讀了一些文件後，發現gulp可以做到很多在webpack中做的事，像是minify、uglify、concat等等，根據[此文](http://www.jianshu.com/p/b1022d224817)所述「Gulp和Webpack基本都能满足前端自动化构建工具的任务，但是还是看出两个工具的侧重点是不通的，Gulp侧重整个过程的控制，Webpack在模块打包方面有特别出众。所以，Gulp + Webpack 组合使用可能更方便」。甚至還有兩者的整合([連結](http://www.jianshu.com/p/9724c47b406c))，瀏覽了一下子發現蠻複雜的，先筆記下連結。\n\n權衡一下effort後，決定保留在hw8利用webpack的實作，只利用gulp做uglify與inline的新工作，雖然這樣的working flow好像不太好看，但目的是練習使用gulp。\n\n就像[這篇](https://github.com/fwon/blog/issues/17)所講的：「对于pc端应用来说，性能往往不是最突出的问题，因为pc端的网速，浏览器性能都有比较好，所以很长一段时间我们要考虑的是开发效率的问题而不是性能问题，得在前端框架的选型上下功夫。至于加载文件的大小或文件个数，都难以形成性能瓶颈。... ... 不過如果我们在项目搭建的时候就能考虑得多一点，把基本能做的先做了。所花的成本绝对比以后去重构代码的成本要低很多，而且我们能够同时保证开发效率和网站性能，何乐而不为呢。」\n\n在針對複雜的大型專案的初期架構上，能夠透過這些工具來增加開發效率與維護性，又能優化網站效能，這或許也是前端工程師的價值之一吧，那入猴斗(日語)。\n\n* * *\n\n### References\n\n*   [可以幫我自動化嗎，拜託：Gulp](http://ithelp.ithome.com.tw/articles/10185976)\n*   [前端构建工具gulp入门教程](https://segmentfault.com/a/1190000000372547)\n*   [gulp + webpack 构建多页面前端项目](https://github.com/fwon/blog/issues/17)\n*   [gulp &amp; webpack整合，鱼与熊掌我都要！](http://www.jianshu.com/p/9724c47b406c)\n*   [grunt - what's the difference between concat and uglify and minify](https://stackoverflow.com/questions/19694448/grunt-whats-the-difference-between-concat-and-uglify-and-minify)\n*   [Gulp和Webpack对比](http://www.jianshu.com/p/b1022d224817)\n*   [gulp-inline/npm](https://www.npmjs.com/package/gulp-inline)\n\n* * *\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw9/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw9/index.html)","source":"_posts/20170611-1450-huli-course-09.md","raw":"---\ntitle: '學習｜Huli''s Course#9｜Gulp'\ncatalog: true\ndate: 2017-06-11 06:47:17\nsubtitle: 在針對複雜的大型專案的初期架構上，能夠透過Webpack、Gulp這些工具來增加開發效率與維護性，又能優化網站效能，這或許也是前端工程師的價值之一吧。\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - Gulp\n    - 前端\n    - 初學\n---\n\n### Usage\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>npm init\nnpm run build\n</pre></div>\n</figure>\n\n### Properties\n\n*   webpack負責工作(沿用hw8)：\n\n        *   將index.sass也import到index.js裡\n    *   打包所有js成bundle.js\n\n*   gulp(hw9新增)：\n\n        *   用`gulp-inline`來uglify bundle.js並inline到html裡\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>var gulp         = require('gulp'),\n    gulpSequence = require('gulp-sequence'),\n    inline       = require('gulp-inline'),\n    uglify       = require('gulp-uglify');\n\n// Inline uglify bunfle.js into html\ngulp.task('inline-js', function() {\n  return gulp.src('./dist/index.html')\n    .pipe(inline({\n      base: 'dist/',\n      js: function() {\n        return uglify({\n          mangle: false\n        });\n      }\n    }))\n    .pipe(gulp.dest('./'));\n});\n\n// Let tasks above run sequentially\ngulp.task('default', gulpSequence('inline-js'));\n\n</pre></div>\n</figure>\n\n*   package.json設定script如下：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>\"scripts\": {\n    \"webpack\": \"webpack\",\n    \"gulp\": \"gulp\",\n    \"build\": \"webpack &amp;&amp; gulp\"\n}\n</pre></div>\n</figure>\n\n*   在webpack增加babel loader轉譯ES6。\n\n*   index.html原始檔暫時就擺在dist裡，應該是可以新增一個src/放assets/與html，但就暫時先這樣吧。輸出的inline index.html放在根目錄。\n\n* * *\n\n### 筆記\n\n*   gulp只有五个方法： task，run，watch，src，和dest，在项目根目录新建一个js文件并命名为gulpfile.js\n\n*   在使用gulp进行项目构建的时候，我们一开始的策略是将所有js打包为一个文件，所有css打包为一个文件。然后每个页面都将只加载一个js和一个css,也就是我们通常所说的「all in one」打包模式。这样做的目的就是减少http请求。\n\n*   yuanyu90221：「如果最後gulp+webpack何在一起的話，是會把webpack的動作放在 gulp task內嗎？」\n\n    huli：「不合在一起的做法就是新增一個指令，例如說 build，裡面跑：webpack &amp;&amp; gulp，合在一起就是只要跑 gulp 就好，一定是webpack跑完才跑gulp。」\n\n*   concatenation, minification, uglification差異([參考](https://stackoverflow.com/questions/19694448/grunt-whats-the-difference-between-concat-and-uglify-and-minify))\n\n    1.  concatenation只是打包所有被指定的檔案成一個大檔案\n    2.  minification移除不必要的空白與其他多餘的token\n    3.  uglification將code變形為不易讀的格式，例如將parameter轉為更短的變數名等，減少檔案大小，通常是商業用途，增進原始碼的安全性。\n\n* * *\n\n### 直播筆記\n\n*   單獨執行`gulp`指令時，會去認`gulp.task('default', function(){...});`，如果沒有default會噴錯誤訊息。\n*   執行`gulp doSth`指令時，可以執行`gulp.task('doSth', function(){...});`的內容。\n*   原始碼可整理放在`src/`資料夾，編譯後檔案可放在`dist/`資料夾。\n*   可使用`gulp-webpack`來將webpack內容整合到gulp中。([參考](https://www.npmjs.com/package/gulp-webpack))\n\n* * *\n\n### 後記\n\n在著手開始這項作業的初期，馬上碰到了一個問題：「要怎麼結合webpack與gulp？」\n\n稍微讀了一些文件後，發現gulp可以做到很多在webpack中做的事，像是minify、uglify、concat等等，根據[此文](http://www.jianshu.com/p/b1022d224817)所述「Gulp和Webpack基本都能满足前端自动化构建工具的任务，但是还是看出两个工具的侧重点是不通的，Gulp侧重整个过程的控制，Webpack在模块打包方面有特别出众。所以，Gulp + Webpack 组合使用可能更方便」。甚至還有兩者的整合([連結](http://www.jianshu.com/p/9724c47b406c))，瀏覽了一下子發現蠻複雜的，先筆記下連結。\n\n權衡一下effort後，決定保留在hw8利用webpack的實作，只利用gulp做uglify與inline的新工作，雖然這樣的working flow好像不太好看，但目的是練習使用gulp。\n\n就像[這篇](https://github.com/fwon/blog/issues/17)所講的：「对于pc端应用来说，性能往往不是最突出的问题，因为pc端的网速，浏览器性能都有比较好，所以很长一段时间我们要考虑的是开发效率的问题而不是性能问题，得在前端框架的选型上下功夫。至于加载文件的大小或文件个数，都难以形成性能瓶颈。... ... 不過如果我们在项目搭建的时候就能考虑得多一点，把基本能做的先做了。所花的成本绝对比以后去重构代码的成本要低很多，而且我们能够同时保证开发效率和网站性能，何乐而不为呢。」\n\n在針對複雜的大型專案的初期架構上，能夠透過這些工具來增加開發效率與維護性，又能優化網站效能，這或許也是前端工程師的價值之一吧，那入猴斗(日語)。\n\n* * *\n\n### References\n\n*   [可以幫我自動化嗎，拜託：Gulp](http://ithelp.ithome.com.tw/articles/10185976)\n*   [前端构建工具gulp入门教程](https://segmentfault.com/a/1190000000372547)\n*   [gulp + webpack 构建多页面前端项目](https://github.com/fwon/blog/issues/17)\n*   [gulp &amp; webpack整合，鱼与熊掌我都要！](http://www.jianshu.com/p/9724c47b406c)\n*   [grunt - what's the difference between concat and uglify and minify](https://stackoverflow.com/questions/19694448/grunt-whats-the-difference-between-concat-and-uglify-and-minify)\n*   [Gulp和Webpack对比](http://www.jianshu.com/p/b1022d224817)\n*   [gulp-inline/npm](https://www.npmjs.com/package/gulp-inline)\n\n* * *\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw9/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw9/index.html)","slug":"20170611-1450-huli-course-09","published":1,"updated":"2017-06-24T15:36:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs5c000q474uucsqv90r","content":"<h3 id=\"usage\">Usage</h3>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>npm init\nnpm run build\n</pre></div>\n</figure>\n<h3 id=\"properties\">Properties</h3>\n<ul>\n<li>\n<p>webpack負責工作(沿用hw8)：</p>\n<pre><code>*   將index.sass也import到index.js裡\n</code></pre>\n<ul>\n<li>打包所有js成bundle.js</li>\n</ul>\n</li>\n<li>\n<p>gulp(hw9新增)：</p>\n<pre><code>*   用`gulp-inline`來uglify bundle.js並inline到html裡\n</code></pre>\n</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>var gulp         = require('gulp'),\n    gulpSequence = require('gulp-sequence'),\n    inline       = require('gulp-inline'),\n    uglify       = require('gulp-uglify');\n<p>// Inline uglify bunfle.js into html<br>\ngulp.task(‘inline-js’, function() {<br>\nreturn gulp.src(’./dist/index.html’)<br>\n.pipe(inline({<br>\nbase: ‘dist/’,<br>\njs: function() {<br>\nreturn uglify({<br>\nmangle: false<br>\n});<br>\n}<br>\n}))<br>\n.pipe(gulp.dest(’./’));<br>\n});</p>\n<p>// Let tasks above run sequentially<br>\ngulp.task(‘default’, gulpSequence(‘inline-js’));</p>\n</pre></div>\n</figure>\n<ul>\n<li>package.json設定script如下：</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>\"scripts\": {\n    \"webpack\": \"webpack\",\n    \"gulp\": \"gulp\",\n    \"build\": \"webpack &amp;&amp; gulp\"\n}\n</pre></div>\n</figure>\n<ul>\n<li>\n<p>在webpack增加babel loader轉譯ES6。</p>\n</li>\n<li>\n<p>index.html原始檔暫時就擺在dist裡，應該是可以新增一個src/放assets/與html，但就暫時先這樣吧。輸出的inline index.html放在根目錄。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"筆記\">筆記</h3>\n<ul>\n<li>\n<p>gulp只有五个方法： task，run，watch，src，和dest，在项目根目录新建一个js文件并命名为gulpfile.js</p>\n</li>\n<li>\n<p>在使用gulp进行项目构建的时候，我们一开始的策略是将所有js打包为一个文件，所有css打包为一个文件。然后每个页面都将只加载一个js和一个css,也就是我们通常所说的「all in one」打包模式。这样做的目的就是减少http请求。</p>\n</li>\n<li>\n<p>yuanyu90221：「如果最後gulp+webpack何在一起的話，是會把webpack的動作放在 gulp task內嗎？」</p>\n<p>huli：「不合在一起的做法就是新增一個指令，例如說 build，裡面跑：webpack &amp;&amp; gulp，合在一起就是只要跑 gulp 就好，一定是webpack跑完才跑gulp。」</p>\n</li>\n<li>\n<p>concatenation, minification, uglification差異(<a href=\"https://stackoverflow.com/questions/19694448/grunt-whats-the-difference-between-concat-and-uglify-and-minify\" target=\"_blank\" rel=\"external\">參考</a>)</p>\n<ol>\n<li>concatenation只是打包所有被指定的檔案成一個大檔案</li>\n<li>minification移除不必要的空白與其他多餘的token</li>\n<li>uglification將code變形為不易讀的格式，例如將parameter轉為更短的變數名等，減少檔案大小，通常是商業用途，增進原始碼的安全性。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3 id=\"直播筆記\">直播筆記</h3>\n<ul>\n<li>單獨執行<code>gulp</code>指令時，會去認<code>gulp.task('default', function(){...});</code>，如果沒有default會噴錯誤訊息。</li>\n<li>執行<code>gulp doSth</code>指令時，可以執行<code>gulp.task('doSth', function(){...});</code>的內容。</li>\n<li>原始碼可整理放在<code>src/</code>資料夾，編譯後檔案可放在<code>dist/</code>資料夾。</li>\n<li>可使用<code>gulp-webpack</code>來將webpack內容整合到gulp中。(<a href=\"https://www.npmjs.com/package/gulp-webpack\" target=\"_blank\" rel=\"external\">參考</a>)</li>\n</ul>\n<hr>\n<h3 id=\"後記\">後記</h3>\n<p>在著手開始這項作業的初期，馬上碰到了一個問題：「要怎麼結合webpack與gulp？」</p>\n<p>稍微讀了一些文件後，發現gulp可以做到很多在webpack中做的事，像是minify、uglify、concat等等，根據<a href=\"http://www.jianshu.com/p/b1022d224817\" target=\"_blank\" rel=\"external\">此文</a>所述「Gulp和Webpack基本都能满足前端自动化构建工具的任务，但是还是看出两个工具的侧重点是不通的，Gulp侧重整个过程的控制，Webpack在模块打包方面有特别出众。所以，Gulp + Webpack 组合使用可能更方便」。甚至還有兩者的整合(<a href=\"http://www.jianshu.com/p/9724c47b406c\" target=\"_blank\" rel=\"external\">連結</a>)，瀏覽了一下子發現蠻複雜的，先筆記下連結。</p>\n<p>權衡一下effort後，決定保留在hw8利用webpack的實作，只利用gulp做uglify與inline的新工作，雖然這樣的working flow好像不太好看，但目的是練習使用gulp。</p>\n<p>就像<a href=\"https://github.com/fwon/blog/issues/17\" target=\"_blank\" rel=\"external\">這篇</a>所講的：「对于pc端应用来说，性能往往不是最突出的问题，因为pc端的网速，浏览器性能都有比较好，所以很长一段时间我们要考虑的是开发效率的问题而不是性能问题，得在前端框架的选型上下功夫。至于加载文件的大小或文件个数，都难以形成性能瓶颈。… … 不過如果我们在项目搭建的时候就能考虑得多一点，把基本能做的先做了。所花的成本绝对比以后去重构代码的成本要低很多，而且我们能够同时保证开发效率和网站性能，何乐而不为呢。」</p>\n<p>在針對複雜的大型專案的初期架構上，能夠透過這些工具來增加開發效率與維護性，又能優化網站效能，這或許也是前端工程師的價值之一吧，那入猴斗(日語)。</p>\n<hr>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"http://ithelp.ithome.com.tw/articles/10185976\" target=\"_blank\" rel=\"external\">可以幫我自動化嗎，拜託：Gulp</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000000372547\" target=\"_blank\" rel=\"external\">前端构建工具gulp入门教程</a></li>\n<li><a href=\"https://github.com/fwon/blog/issues/17\" target=\"_blank\" rel=\"external\">gulp + webpack 构建多页面前端项目</a></li>\n<li><a href=\"http://www.jianshu.com/p/9724c47b406c\" target=\"_blank\" rel=\"external\">gulp &amp; webpack整合，鱼与熊掌我都要！</a></li>\n<li><a href=\"https://stackoverflow.com/questions/19694448/grunt-whats-the-difference-between-concat-and-uglify-and-minify\" target=\"_blank\" rel=\"external\">grunt - what’s the difference between concat and uglify and minify</a></li>\n<li><a href=\"http://www.jianshu.com/p/b1022d224817\" target=\"_blank\" rel=\"external\">Gulp和Webpack对比</a></li>\n<li><a href=\"https://www.npmjs.com/package/gulp-inline\" target=\"_blank\" rel=\"external\">gulp-inline/npm</a></li>\n</ul>\n<hr>\n<h3 id=\"demo\">Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw9/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw9/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>Usage</h3>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>npm init\nnpm run build\n</pre></div>\n</figure>\n<h3>Properties</h3>\n<ul>\n<li>\n<p>webpack負責工作(沿用hw8)：</p>\n<pre><code>*   將index.sass也import到index.js裡\n</code></pre>\n<ul>\n<li>打包所有js成bundle.js</li>\n</ul>\n</li>\n<li>\n<p>gulp(hw9新增)：</p>\n<pre><code>*   用`gulp-inline`來uglify bundle.js並inline到html裡\n</code></pre>\n</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>var gulp         = require('gulp'),\n    gulpSequence = require('gulp-sequence'),\n    inline       = require('gulp-inline'),\n    uglify       = require('gulp-uglify');\n<p>// Inline uglify bunfle.js into html<br>\ngulp.task(‘inline-js’, function() {<br>\nreturn gulp.src(’./dist/index.html’)<br>\n.pipe(inline({<br>\nbase: ‘dist/’,<br>\njs: function() {<br>\nreturn uglify({<br>\nmangle: false<br>\n});<br>\n}<br>\n}))<br>\n.pipe(gulp.dest(’./’));<br>\n});</p>\n<p>// Let tasks above run sequentially<br>\ngulp.task(‘default’, gulpSequence(‘inline-js’));</p>\n</pre></div>\n</figure>\n<ul>\n<li>package.json設定script如下：</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>\"scripts\": {\n    \"webpack\": \"webpack\",\n    \"gulp\": \"gulp\",\n    \"build\": \"webpack &amp;&amp; gulp\"\n}\n</pre></div>\n</figure>\n<ul>\n<li>\n<p>在webpack增加babel loader轉譯ES6。</p>\n</li>\n<li>\n<p>index.html原始檔暫時就擺在dist裡，應該是可以新增一個src/放assets/與html，但就暫時先這樣吧。輸出的inline index.html放在根目錄。</p>\n</li>\n</ul>\n<hr>\n<h3>筆記</h3>\n<ul>\n<li>\n<p>gulp只有五个方法： task，run，watch，src，和dest，在项目根目录新建一个js文件并命名为gulpfile.js</p>\n</li>\n<li>\n<p>在使用gulp进行项目构建的时候，我们一开始的策略是将所有js打包为一个文件，所有css打包为一个文件。然后每个页面都将只加载一个js和一个css,也就是我们通常所说的「all in one」打包模式。这样做的目的就是减少http请求。</p>\n</li>\n<li>\n<p>yuanyu90221：「如果最後gulp+webpack何在一起的話，是會把webpack的動作放在 gulp task內嗎？」</p>\n<p>huli：「不合在一起的做法就是新增一個指令，例如說 build，裡面跑：webpack &amp;&amp; gulp，合在一起就是只要跑 gulp 就好，一定是webpack跑完才跑gulp。」</p>\n</li>\n<li>\n<p>concatenation, minification, uglification差異(<a href=\"https://stackoverflow.com/questions/19694448/grunt-whats-the-difference-between-concat-and-uglify-and-minify\" target=\"_blank\" rel=\"external\">參考</a>)</p>\n<ol>\n<li>concatenation只是打包所有被指定的檔案成一個大檔案</li>\n<li>minification移除不必要的空白與其他多餘的token</li>\n<li>uglification將code變形為不易讀的格式，例如將parameter轉為更短的變數名等，減少檔案大小，通常是商業用途，增進原始碼的安全性。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3>直播筆記</h3>\n<ul>\n<li>單獨執行<code>gulp</code>指令時，會去認<code>gulp.task('default', function(){...});</code>，如果沒有default會噴錯誤訊息。</li>\n<li>執行<code>gulp doSth</code>指令時，可以執行<code>gulp.task('doSth', function(){...});</code>的內容。</li>\n<li>原始碼可整理放在<code>src/</code>資料夾，編譯後檔案可放在<code>dist/</code>資料夾。</li>\n<li>可使用<code>gulp-webpack</code>來將webpack內容整合到gulp中。(<a href=\"https://www.npmjs.com/package/gulp-webpack\" target=\"_blank\" rel=\"external\">參考</a>)</li>\n</ul>\n<hr>\n<h3>後記</h3>\n<p>在著手開始這項作業的初期，馬上碰到了一個問題：「要怎麼結合webpack與gulp？」</p>\n<p>稍微讀了一些文件後，發現gulp可以做到很多在webpack中做的事，像是minify、uglify、concat等等，根據<a href=\"http://www.jianshu.com/p/b1022d224817\" target=\"_blank\" rel=\"external\">此文</a>所述「Gulp和Webpack基本都能满足前端自动化构建工具的任务，但是还是看出两个工具的侧重点是不通的，Gulp侧重整个过程的控制，Webpack在模块打包方面有特别出众。所以，Gulp + Webpack 组合使用可能更方便」。甚至還有兩者的整合(<a href=\"http://www.jianshu.com/p/9724c47b406c\" target=\"_blank\" rel=\"external\">連結</a>)，瀏覽了一下子發現蠻複雜的，先筆記下連結。</p>\n<p>權衡一下effort後，決定保留在hw8利用webpack的實作，只利用gulp做uglify與inline的新工作，雖然這樣的working flow好像不太好看，但目的是練習使用gulp。</p>\n<p>就像<a href=\"https://github.com/fwon/blog/issues/17\" target=\"_blank\" rel=\"external\">這篇</a>所講的：「对于pc端应用来说，性能往往不是最突出的问题，因为pc端的网速，浏览器性能都有比较好，所以很长一段时间我们要考虑的是开发效率的问题而不是性能问题，得在前端框架的选型上下功夫。至于加载文件的大小或文件个数，都难以形成性能瓶颈。… … 不過如果我们在项目搭建的时候就能考虑得多一点，把基本能做的先做了。所花的成本绝对比以后去重构代码的成本要低很多，而且我们能够同时保证开发效率和网站性能，何乐而不为呢。」</p>\n<p>在針對複雜的大型專案的初期架構上，能夠透過這些工具來增加開發效率與維護性，又能優化網站效能，這或許也是前端工程師的價值之一吧，那入猴斗(日語)。</p>\n<hr>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://ithelp.ithome.com.tw/articles/10185976\" target=\"_blank\" rel=\"external\">可以幫我自動化嗎，拜託：Gulp</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000000372547\" target=\"_blank\" rel=\"external\">前端构建工具gulp入门教程</a></li>\n<li><a href=\"https://github.com/fwon/blog/issues/17\" target=\"_blank\" rel=\"external\">gulp + webpack 构建多页面前端项目</a></li>\n<li><a href=\"http://www.jianshu.com/p/9724c47b406c\" target=\"_blank\" rel=\"external\">gulp &amp; webpack整合，鱼与熊掌我都要！</a></li>\n<li><a href=\"https://stackoverflow.com/questions/19694448/grunt-whats-the-difference-between-concat-and-uglify-and-minify\" target=\"_blank\" rel=\"external\">grunt - what’s the difference between concat and uglify and minify</a></li>\n<li><a href=\"http://www.jianshu.com/p/b1022d224817\" target=\"_blank\" rel=\"external\">Gulp和Webpack对比</a></li>\n<li><a href=\"https://www.npmjs.com/package/gulp-inline\" target=\"_blank\" rel=\"external\">gulp-inline/npm</a></li>\n</ul>\n<hr>\n<h3>Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw9/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw9/index.html</a></p>\n"},{"title":"筆記｜Javascript基本觀念｜Closure與Free variable","catalog":true,"date":"2017-06-11T06:54:59.000Z","subtitle":"Closure與Free variable觀念重點摘要與理解。","header-img":"../../../../img/header_img/bg.png","_content":"\n直接看例子：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        return x + y;\n    }\n    return f;\n}\n\nvar foo = doSome();\nconsole.log(foo(20));  // 30\nconsole.log(foo(30));  // 40\n</pre></div>\n</figure>\n\n上面的f即為Closure(閉包)，x稱為free variable(閒置變數)。閒置變數x是指相對於f而言，是既非區域變數也非參數的變數，而擁有閒置變數的運算式則稱為Closure。\n\n對於f而言，x是外部函式變數，而f將變數x關入自己的範圍，x在doSome執行完畢後，原本應該結束自己的生命週期，但f建立了closure並傳回，使得x能繼續存活。\n\n而如果f並沒有捕捉任何變數，例如下面例子：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        return y + 10;\n    }\n    return f;\n}\n</pre></div>\n</figure>\n\n則f就只是單純的(一級)函式而已。\n\n其他關於closure的例子：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        x = x + y;\n        return x;\n    }\n    return f;\n}\n\nvar foo = doSome();\nconsole.log(foo(20));  // 30\nconsole.log(foo(30));  // 60\n</pre></div>\n</figure>\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        x = x + y;\n        return x;\n    }\n    return f;\n}\n\nvar foo1 = doSome();\nvar foo2 = doSome();\nconsole.log(foo1(20));  // 30\nconsole.log(foo2(20));  // 30\n\n</pre></div>\n</figure>\n\n### Reference\n\n*   [JavaScript 語言核心（12）Closure 與一級函式](http://www.codedata.com.tw/javascript/essential-javascript-12-closure-first-class-function/)","source":"_posts/20170611-1454-js-closure.md","raw":"---\ntitle: 筆記｜Javascript基本觀念｜Closure與Free variable\ncatalog: true\ndate: 2017-06-11 14:54:59\nsubtitle: Closure與Free variable觀念重點摘要與理解。\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - 前端\n    - JavaScript\n    - 筆記\n---\n\n直接看例子：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        return x + y;\n    }\n    return f;\n}\n\nvar foo = doSome();\nconsole.log(foo(20));  // 30\nconsole.log(foo(30));  // 40\n</pre></div>\n</figure>\n\n上面的f即為Closure(閉包)，x稱為free variable(閒置變數)。閒置變數x是指相對於f而言，是既非區域變數也非參數的變數，而擁有閒置變數的運算式則稱為Closure。\n\n對於f而言，x是外部函式變數，而f將變數x關入自己的範圍，x在doSome執行完畢後，原本應該結束自己的生命週期，但f建立了closure並傳回，使得x能繼續存活。\n\n而如果f並沒有捕捉任何變數，例如下面例子：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        return y + 10;\n    }\n    return f;\n}\n</pre></div>\n</figure>\n\n則f就只是單純的(一級)函式而已。\n\n其他關於closure的例子：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        x = x + y;\n        return x;\n    }\n    return f;\n}\n\nvar foo = doSome();\nconsole.log(foo(20));  // 30\nconsole.log(foo(30));  // 60\n</pre></div>\n</figure>\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        x = x + y;\n        return x;\n    }\n    return f;\n}\n\nvar foo1 = doSome();\nvar foo2 = doSome();\nconsole.log(foo1(20));  // 30\nconsole.log(foo2(20));  // 30\n\n</pre></div>\n</figure>\n\n### Reference\n\n*   [JavaScript 語言核心（12）Closure 與一級函式](http://www.codedata.com.tw/javascript/essential-javascript-12-closure-first-class-function/)","slug":"20170611-1454-js-closure","published":1,"updated":"2017-06-24T15:35:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs5d000r474ul40ku4x1","content":"<p>直接看例子：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        return x + y;\n    }\n    return f;\n}\n<p>var foo = doSome();<br>\nconsole.log(foo(20));  // 30<br>\nconsole.log(foo(30));  // 40</p>\n</pre></div>\n</figure>\n<p>上面的f即為Closure(閉包)，x稱為free variable(閒置變數)。閒置變數x是指相對於f而言，是既非區域變數也非參數的變數，而擁有閒置變數的運算式則稱為Closure。</p>\n<p>對於f而言，x是外部函式變數，而f將變數x關入自己的範圍，x在doSome執行完畢後，原本應該結束自己的生命週期，但f建立了closure並傳回，使得x能繼續存活。</p>\n<p>而如果f並沒有捕捉任何變數，例如下面例子：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        return y + 10;\n    }\n    return f;\n}\n</pre></div>\n</figure>\n<p>則f就只是單純的(一級)函式而已。</p>\n<p>其他關於closure的例子：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        x = x + y;\n        return x;\n    }\n    return f;\n}\n<p>var foo = doSome();<br>\nconsole.log(foo(20));  // 30<br>\nconsole.log(foo(30));  // 60</p>\n</pre></div>\n</figure>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        x = x + y;\n        return x;\n    }\n    return f;\n}\n<p>var foo1 = doSome();<br>\nvar foo2 = doSome();<br>\nconsole.log(foo1(20));  // 30<br>\nconsole.log(foo2(20));  // 30</p>\n</pre></div>\n</figure>\n<h3 id=\"reference\">Reference</h3>\n<ul>\n<li><a href=\"http://www.codedata.com.tw/javascript/essential-javascript-12-closure-first-class-function/\" target=\"_blank\" rel=\"external\">JavaScript 語言核心（12）Closure 與一級函式</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>直接看例子：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        return x + y;\n    }\n    return f;\n}\n<p>var foo = doSome();<br>\nconsole.log(foo(20));  // 30<br>\nconsole.log(foo(30));  // 40</p>\n</pre></div>\n</figure>\n<p>上面的f即為Closure(閉包)，x稱為free variable(閒置變數)。閒置變數x是指相對於f而言，是既非區域變數也非參數的變數，而擁有閒置變數的運算式則稱為Closure。</p>\n<p>對於f而言，x是外部函式變數，而f將變數x關入自己的範圍，x在doSome執行完畢後，原本應該結束自己的生命週期，但f建立了closure並傳回，使得x能繼續存活。</p>\n<p>而如果f並沒有捕捉任何變數，例如下面例子：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        return y + 10;\n    }\n    return f;\n}\n</pre></div>\n</figure>\n<p>則f就只是單純的(一級)函式而已。</p>\n<p>其他關於closure的例子：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        x = x + y;\n        return x;\n    }\n    return f;\n}\n<p>var foo = doSome();<br>\nconsole.log(foo(20));  // 30<br>\nconsole.log(foo(30));  // 60</p>\n</pre></div>\n</figure>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function doSome() {\n    var x = 10;\n    function f(y) {\n        x = x + y;\n        return x;\n    }\n    return f;\n}\n<p>var foo1 = doSome();<br>\nvar foo2 = doSome();<br>\nconsole.log(foo1(20));  // 30<br>\nconsole.log(foo2(20));  // 30</p>\n</pre></div>\n</figure>\n<h3>Reference</h3>\n<ul>\n<li><a href=\"http://www.codedata.com.tw/javascript/essential-javascript-12-closure-first-class-function/\" target=\"_blank\" rel=\"external\">JavaScript 語言核心（12）Closure 與一級函式</a></li>\n</ul>\n"},{"title":"筆記｜前端面試考題｜確認JSON是否有值","catalog":true,"date":"2017-06-12T13:16:12.000Z","subtitle":"如果JSON有個資料是a.b.c，那在js中要怎麼寫來確定a.b.c存在？","header-img":"../../../../img/header_img/bg.png","_content":"\n被問到這題時，直覺地回答是`if(a.b.c == null)`，面試官好像很驚訝地問：「你的js寫多久了？」，看這反應是答得不對，不確定答案也是跟沒刷leetcode與平常自己實作並沒什麼做error判斷，於是來研究一下JS的一些基本觀念。\n\n#### JSON值\n\n*   JSON值可以是object, array, number, string, true, false, or null。而undefined並非合法JSON值，即使undefined在Javascript中合法。\n\n#### == 與 === 差別\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>1 == '1';  //true, == 會對被判別的變數做轉換型別的動作\n1 === '1'; //false\n</pre></div>\n</figure>\n\n#### undefied 與 null 差別\n\n*   null表示\"沒有對象\"，即該處不應該有值\n*   undefined表示\"缺少值\"，就是此處應該有一個值，但是還沒有定義。\n*   undefined 不是一個有效的 JSON，而 null 是有效的。\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>null == undefined // true\nnull === undefined // false\n</pre></div>\n</figure>\n\n#### 解答\n\n一開始以為是因為undefied與null的關係，不過既然JSON中並沒有undefied，那跟這就沒關係，也去看了一下twitch API，裡面的確只有null值，但還是筆記一下。綜合上述，要檢查JSON中是否有值，應該是`if(a.b.c === null)`就可以判斷。\n\n#### Reference\n\n*   [[Javascript] 等於的運用 - ==和 ===的不同之處](https://dotblogs.com.tw/alantsai/2013/06/27/106134)\n*   [JSON undefined value type](https://stackoverflow.com/questions/13796751/json-undefined-value-type)\n*   [undefined与null的区别](http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html)\n*   [undefined 和 null 的差別](http://www.jstips.co/zh_tw/javascript/differences-between-undefined-and-null/)","source":"_posts/20170612-1220-interview-json.md","raw":"---\ntitle: 筆記｜前端面試考題｜確認JSON是否有值\ncatalog: true\ndate: 2017-06-12 21:16:12\nsubtitle: 如果JSON有個資料是a.b.c，那在js中要怎麼寫來確定a.b.c存在？\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - JSON\n    - 前端\n    - 面試\n    - 筆記\n---\n\n被問到這題時，直覺地回答是`if(a.b.c == null)`，面試官好像很驚訝地問：「你的js寫多久了？」，看這反應是答得不對，不確定答案也是跟沒刷leetcode與平常自己實作並沒什麼做error判斷，於是來研究一下JS的一些基本觀念。\n\n#### JSON值\n\n*   JSON值可以是object, array, number, string, true, false, or null。而undefined並非合法JSON值，即使undefined在Javascript中合法。\n\n#### == 與 === 差別\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>1 == '1';  //true, == 會對被判別的變數做轉換型別的動作\n1 === '1'; //false\n</pre></div>\n</figure>\n\n#### undefied 與 null 差別\n\n*   null表示\"沒有對象\"，即該處不應該有值\n*   undefined表示\"缺少值\"，就是此處應該有一個值，但是還沒有定義。\n*   undefined 不是一個有效的 JSON，而 null 是有效的。\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>null == undefined // true\nnull === undefined // false\n</pre></div>\n</figure>\n\n#### 解答\n\n一開始以為是因為undefied與null的關係，不過既然JSON中並沒有undefied，那跟這就沒關係，也去看了一下twitch API，裡面的確只有null值，但還是筆記一下。綜合上述，要檢查JSON中是否有值，應該是`if(a.b.c === null)`就可以判斷。\n\n#### Reference\n\n*   [[Javascript] 等於的運用 - ==和 ===的不同之處](https://dotblogs.com.tw/alantsai/2013/06/27/106134)\n*   [JSON undefined value type](https://stackoverflow.com/questions/13796751/json-undefined-value-type)\n*   [undefined与null的区别](http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html)\n*   [undefined 和 null 的差別](http://www.jstips.co/zh_tw/javascript/differences-between-undefined-and-null/)","slug":"20170612-1220-interview-json","published":1,"updated":"2017-06-24T15:34:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs5f000t474unupmby6m","content":"<p>被問到這題時，直覺地回答是<code>if(a.b.c == null)</code>，面試官好像很驚訝地問：「你的js寫多久了？」，看這反應是答得不對，不確定答案也是跟沒刷leetcode與平常自己實作並沒什麼做error判斷，於是來研究一下JS的一些基本觀念。</p>\n<h4 id=\"json值\">JSON值</h4>\n<ul>\n<li>JSON值可以是object, array, number, string, true, false, or null。而undefined並非合法JSON值，即使undefined在Javascript中合法。</li>\n</ul>\n<h4 id=\"與-差別\">== 與 === 差別</h4>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>1 == '1';  //true, == 會對被判別的變數做轉換型別的動作\n1 === '1'; //false\n</pre></div>\n</figure>\n<h4 id=\"undefied-與-null-差別\">undefied 與 null 差別</h4>\n<ul>\n<li>null表示&quot;沒有對象&quot;，即該處不應該有值</li>\n<li>undefined表示&quot;缺少值&quot;，就是此處應該有一個值，但是還沒有定義。</li>\n<li>undefined 不是一個有效的 JSON，而 null 是有效的。</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>null == undefined // true\nnull === undefined // false\n</pre></div>\n</figure>\n<h4 id=\"解答\">解答</h4>\n<p>一開始以為是因為undefied與null的關係，不過既然JSON中並沒有undefied，那跟這就沒關係，也去看了一下twitch API，裡面的確只有null值，但還是筆記一下。綜合上述，要檢查JSON中是否有值，應該是<code>if(a.b.c === null)</code>就可以判斷。</p>\n<h4 id=\"reference\">Reference</h4>\n<ul>\n<li><a href=\"https://dotblogs.com.tw/alantsai/2013/06/27/106134\" target=\"_blank\" rel=\"external\">[Javascript] 等於的運用 - ==和 ===的不同之處</a></li>\n<li><a href=\"https://stackoverflow.com/questions/13796751/json-undefined-value-type\" target=\"_blank\" rel=\"external\">JSON undefined value type</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\" target=\"_blank\" rel=\"external\">undefined与null的区别</a></li>\n<li><a href=\"http://www.jstips.co/zh_tw/javascript/differences-between-undefined-and-null/\" target=\"_blank\" rel=\"external\">undefined 和 null 的差別</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>被問到這題時，直覺地回答是<code>if(a.b.c == null)</code>，面試官好像很驚訝地問：「你的js寫多久了？」，看這反應是答得不對，不確定答案也是跟沒刷leetcode與平常自己實作並沒什麼做error判斷，於是來研究一下JS的一些基本觀念。</p>\n<h4>JSON值</h4>\n<ul>\n<li>JSON值可以是object, array, number, string, true, false, or null。而undefined並非合法JSON值，即使undefined在Javascript中合法。</li>\n</ul>\n<h4>== 與 === 差別</h4>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>1 == '1';  //true, == 會對被判別的變數做轉換型別的動作\n1 === '1'; //false\n</pre></div>\n</figure>\n<h4>undefied 與 null 差別</h4>\n<ul>\n<li>null表示&quot;沒有對象&quot;，即該處不應該有值</li>\n<li>undefined表示&quot;缺少值&quot;，就是此處應該有一個值，但是還沒有定義。</li>\n<li>undefined 不是一個有效的 JSON，而 null 是有效的。</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>null == undefined // true\nnull === undefined // false\n</pre></div>\n</figure>\n<h4>解答</h4>\n<p>一開始以為是因為undefied與null的關係，不過既然JSON中並沒有undefied，那跟這就沒關係，也去看了一下twitch API，裡面的確只有null值，但還是筆記一下。綜合上述，要檢查JSON中是否有值，應該是<code>if(a.b.c === null)</code>就可以判斷。</p>\n<h4>Reference</h4>\n<ul>\n<li><a href=\"https://dotblogs.com.tw/alantsai/2013/06/27/106134\" target=\"_blank\" rel=\"external\">[Javascript] 等於的運用 - ==和 ===的不同之處</a></li>\n<li><a href=\"https://stackoverflow.com/questions/13796751/json-undefined-value-type\" target=\"_blank\" rel=\"external\">JSON undefined value type</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\" target=\"_blank\" rel=\"external\">undefined与null的区别</a></li>\n<li><a href=\"http://www.jstips.co/zh_tw/javascript/differences-between-undefined-and-null/\" target=\"_blank\" rel=\"external\">undefined 和 null 的差別</a></li>\n</ul>\n"},{"title":"學習｜Huli's Course#10｜ESLint與Standard","catalog":true,"date":"2017-06-17T07:11:27.000Z","subtitle":"了解ESLint或Standard這類的標準之後，又更能知道提高程式碼品質的方法。","header-img":"../../../../img/header_img/bg.png","_content":"\n### Properties\n\n*   `npm install -g eslint`，global安裝eslint。\n\n*   在hw10根目錄下指令：`eslint --init`，可以根據自己的coding rule設定，完成後會產生`.eslintrc.json`。\n\n    ![](http://i.imgur.com/lWgDkKh.png)\n\n*   rule設定\n\n    *   空格每2格一個單位\n    *   使用單引號刮著字串\n    *   有分號\n\n*   下指令`eslint .`即可掃描當前目錄底下所有檔案的coding style是否符合rule，可以看到大部分是空白或引號沒統一，也有一些分號問題：\n\n    ![](http://i.imgur.com/4Ya7cum.png)\n\n*   遇到bundle.js或設定檔也被報錯的問題，在eslint中是透過增加一個`.eslintignore`的檔案來忽略要掃描的檔案，類似`.gitignore`的使用方法。\n\n*   最後有遇到如下的問題：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>assets/js/index.js\n41:7  error  Unexpected console statement  no-console\n45:5  error  Unexpected console statement  no-console\n77:7  error  Unexpected console statement  no-console\n</pre></div>\n</figure>\n\n透過在rules裡新增`\"no-console\": \"off\"`解決([參考](https://stackoverflow.com/questions/34215526/eslint-how-to-disable-unexpected-console-statement-in-node-js))\n\n* * *\n\n### 筆記\n\n進階可讀[這篇](https://denny.qollie.com/2016/07/11/eslint-fxcking-setup/)來更理解ESLint的運作原理。\n\n* * *\n\n### 直播筆記\n\n* * *\n\n### 後記\n\n原本看了一下yuanyu90221大大跟pychiang大大的做法也想套用semistandard，但想想既然都看到做法了，那就來試一下ESLint好了，瀏覽了學習資源的[這篇](https://denny.qollie.com/2016/07/11/eslint-fxcking-setup/)後，不愧是天眼通作者，可以研究的這麼深入，了解到Linter的制定對於團隊程式碼的品質有很大的幫助。\n\n關於團隊程式碼的管理，前幾天面試被震撼教育了一番。對方考了一題「寫一個function能將傳入的數字加逗號回傳」，面試官頻繁地提示到要寫出「對團隊有貢獻的程式碼」，天真如我以為只是加@params或註解這樣，寫法就參考[網路解法](https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript)，`/\\B(?=(\\d{3})+(?!\\d))/g`這串正規表達式有看沒有懂，果然提交之後就變炮灰了，別說`\\B`網路上的解釋很難理解，連後面的`?=`或`?!`其實也不懂，就被示以一個很簡單的道理：「一段連你也無法解釋的程式碼，對團隊而言品質是不夠的。」就是有發現自己盲點的感覺。\n\nAnyway扯遠了，所以了解ESLint或Standard這類的標準之後，又更能知道提高程式碼品質的方法。終於也完成十份作業，太感人，也非常謝謝Huli老師的免費教學，之後另外寫一篇心得文吧。\n\n* * *\n\n### References\n\n*   [http://eslint.org/](http://eslint.org/)\n\n* * *\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw10/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw10/index.html)","source":"_posts/20170617-1511-huli-course-10.md","raw":"---\ntitle: '學習｜Huli''s Course#10｜ESLint與Standard'\ncatalog: true\ndate: 2017-06-17 15:11:27\nsubtitle: 了解ESLint或Standard這類的標準之後，又更能知道提高程式碼品質的方法。\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - ESLint\n    - 初學\n---\n\n### Properties\n\n*   `npm install -g eslint`，global安裝eslint。\n\n*   在hw10根目錄下指令：`eslint --init`，可以根據自己的coding rule設定，完成後會產生`.eslintrc.json`。\n\n    ![](http://i.imgur.com/lWgDkKh.png)\n\n*   rule設定\n\n    *   空格每2格一個單位\n    *   使用單引號刮著字串\n    *   有分號\n\n*   下指令`eslint .`即可掃描當前目錄底下所有檔案的coding style是否符合rule，可以看到大部分是空白或引號沒統一，也有一些分號問題：\n\n    ![](http://i.imgur.com/4Ya7cum.png)\n\n*   遇到bundle.js或設定檔也被報錯的問題，在eslint中是透過增加一個`.eslintignore`的檔案來忽略要掃描的檔案，類似`.gitignore`的使用方法。\n\n*   最後有遇到如下的問題：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>assets/js/index.js\n41:7  error  Unexpected console statement  no-console\n45:5  error  Unexpected console statement  no-console\n77:7  error  Unexpected console statement  no-console\n</pre></div>\n</figure>\n\n透過在rules裡新增`\"no-console\": \"off\"`解決([參考](https://stackoverflow.com/questions/34215526/eslint-how-to-disable-unexpected-console-statement-in-node-js))\n\n* * *\n\n### 筆記\n\n進階可讀[這篇](https://denny.qollie.com/2016/07/11/eslint-fxcking-setup/)來更理解ESLint的運作原理。\n\n* * *\n\n### 直播筆記\n\n* * *\n\n### 後記\n\n原本看了一下yuanyu90221大大跟pychiang大大的做法也想套用semistandard，但想想既然都看到做法了，那就來試一下ESLint好了，瀏覽了學習資源的[這篇](https://denny.qollie.com/2016/07/11/eslint-fxcking-setup/)後，不愧是天眼通作者，可以研究的這麼深入，了解到Linter的制定對於團隊程式碼的品質有很大的幫助。\n\n關於團隊程式碼的管理，前幾天面試被震撼教育了一番。對方考了一題「寫一個function能將傳入的數字加逗號回傳」，面試官頻繁地提示到要寫出「對團隊有貢獻的程式碼」，天真如我以為只是加@params或註解這樣，寫法就參考[網路解法](https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript)，`/\\B(?=(\\d{3})+(?!\\d))/g`這串正規表達式有看沒有懂，果然提交之後就變炮灰了，別說`\\B`網路上的解釋很難理解，連後面的`?=`或`?!`其實也不懂，就被示以一個很簡單的道理：「一段連你也無法解釋的程式碼，對團隊而言品質是不夠的。」就是有發現自己盲點的感覺。\n\nAnyway扯遠了，所以了解ESLint或Standard這類的標準之後，又更能知道提高程式碼品質的方法。終於也完成十份作業，太感人，也非常謝謝Huli老師的免費教學，之後另外寫一篇心得文吧。\n\n* * *\n\n### References\n\n*   [http://eslint.org/](http://eslint.org/)\n\n* * *\n\n### Demo\n\n[https://dezchuang.github.io/frontend-intermediate-course/answers/hw10/index.html](https://dezchuang.github.io/frontend-intermediate-course/answers/hw10/index.html)","slug":"20170617-1511-huli-course-10","published":1,"updated":"2017-06-24T15:34:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs5i000u474ucnforc61","content":"<h3 id=\"properties\">Properties</h3>\n<ul>\n<li>\n<p><code>npm install -g eslint</code>，global安裝eslint。</p>\n</li>\n<li>\n<p>在hw10根目錄下指令：<code>eslint --init</code>，可以根據自己的coding rule設定，完成後會產生<code>.eslintrc.json</code>。</p>\n<p><img src=\"http://i.imgur.com/lWgDkKh.png\" alt=\"\"></p>\n</li>\n<li>\n<p>rule設定</p>\n<ul>\n<li>空格每2格一個單位</li>\n<li>使用單引號刮著字串</li>\n<li>有分號</li>\n</ul>\n</li>\n<li>\n<p>下指令<code>eslint .</code>即可掃描當前目錄底下所有檔案的coding style是否符合rule，可以看到大部分是空白或引號沒統一，也有一些分號問題：</p>\n<p><img src=\"http://i.imgur.com/4Ya7cum.png\" alt=\"\"></p>\n</li>\n<li>\n<p>遇到bundle.js或設定檔也被報錯的問題，在eslint中是透過增加一個<code>.eslintignore</code>的檔案來忽略要掃描的檔案，類似<code>.gitignore</code>的使用方法。</p>\n</li>\n<li>\n<p>最後有遇到如下的問題：</p>\n</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>assets/js/index.js\n41:7  error  Unexpected console statement  no-console\n45:5  error  Unexpected console statement  no-console\n77:7  error  Unexpected console statement  no-console\n</pre></div>\n</figure>\n<p>透過在rules裡新增<code>&quot;no-console&quot;: &quot;off&quot;</code>解決(<a href=\"https://stackoverflow.com/questions/34215526/eslint-how-to-disable-unexpected-console-statement-in-node-js\" target=\"_blank\" rel=\"external\">參考</a>)</p>\n<hr>\n<h3 id=\"筆記\">筆記</h3>\n<p>進階可讀<a href=\"https://denny.qollie.com/2016/07/11/eslint-fxcking-setup/\" target=\"_blank\" rel=\"external\">這篇</a>來更理解ESLint的運作原理。</p>\n<hr>\n<h3 id=\"直播筆記\">直播筆記</h3>\n<hr>\n<h3 id=\"後記\">後記</h3>\n<p>原本看了一下yuanyu90221大大跟pychiang大大的做法也想套用semistandard，但想想既然都看到做法了，那就來試一下ESLint好了，瀏覽了學習資源的<a href=\"https://denny.qollie.com/2016/07/11/eslint-fxcking-setup/\" target=\"_blank\" rel=\"external\">這篇</a>後，不愧是天眼通作者，可以研究的這麼深入，了解到Linter的制定對於團隊程式碼的品質有很大的幫助。</p>\n<p>關於團隊程式碼的管理，前幾天面試被震撼教育了一番。對方考了一題「寫一個function能將傳入的數字加逗號回傳」，面試官頻繁地提示到要寫出「對團隊有貢獻的程式碼」，天真如我以為只是加@params或註解這樣，寫法就參考<a href=\"https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\" target=\"_blank\" rel=\"external\">網路解法</a>，<code>/\\B(?=(\\d{3})+(?!\\d))/g</code>這串正規表達式有看沒有懂，果然提交之後就變炮灰了，別說<code>\\B</code>網路上的解釋很難理解，連後面的<code>?=</code>或<code>?!</code>其實也不懂，就被示以一個很簡單的道理：「一段連你也無法解釋的程式碼，對團隊而言品質是不夠的。」就是有發現自己盲點的感覺。</p>\n<p>Anyway扯遠了，所以了解ESLint或Standard這類的標準之後，又更能知道提高程式碼品質的方法。終於也完成十份作業，太感人，也非常謝謝Huli老師的免費教學，之後另外寫一篇心得文吧。</p>\n<hr>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"http://eslint.org/\" target=\"_blank\" rel=\"external\">http://eslint.org/</a></li>\n</ul>\n<hr>\n<h3 id=\"demo\">Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw10/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw10/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3>Properties</h3>\n<ul>\n<li>\n<p><code>npm install -g eslint</code>，global安裝eslint。</p>\n</li>\n<li>\n<p>在hw10根目錄下指令：<code>eslint --init</code>，可以根據自己的coding rule設定，完成後會產生<code>.eslintrc.json</code>。</p>\n<p><img src=\"http://i.imgur.com/lWgDkKh.png\" alt=\"\"></p>\n</li>\n<li>\n<p>rule設定</p>\n<ul>\n<li>空格每2格一個單位</li>\n<li>使用單引號刮著字串</li>\n<li>有分號</li>\n</ul>\n</li>\n<li>\n<p>下指令<code>eslint .</code>即可掃描當前目錄底下所有檔案的coding style是否符合rule，可以看到大部分是空白或引號沒統一，也有一些分號問題：</p>\n<p><img src=\"http://i.imgur.com/4Ya7cum.png\" alt=\"\"></p>\n</li>\n<li>\n<p>遇到bundle.js或設定檔也被報錯的問題，在eslint中是透過增加一個<code>.eslintignore</code>的檔案來忽略要掃描的檔案，類似<code>.gitignore</code>的使用方法。</p>\n</li>\n<li>\n<p>最後有遇到如下的問題：</p>\n</li>\n</ul>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>assets/js/index.js\n41:7  error  Unexpected console statement  no-console\n45:5  error  Unexpected console statement  no-console\n77:7  error  Unexpected console statement  no-console\n</pre></div>\n</figure>\n<p>透過在rules裡新增<code>&quot;no-console&quot;: &quot;off&quot;</code>解決(<a href=\"https://stackoverflow.com/questions/34215526/eslint-how-to-disable-unexpected-console-statement-in-node-js\" target=\"_blank\" rel=\"external\">參考</a>)</p>\n<hr>\n<h3>筆記</h3>\n<p>進階可讀<a href=\"https://denny.qollie.com/2016/07/11/eslint-fxcking-setup/\" target=\"_blank\" rel=\"external\">這篇</a>來更理解ESLint的運作原理。</p>\n<hr>\n<h3>直播筆記</h3>\n<hr>\n<h3>後記</h3>\n<p>原本看了一下yuanyu90221大大跟pychiang大大的做法也想套用semistandard，但想想既然都看到做法了，那就來試一下ESLint好了，瀏覽了學習資源的<a href=\"https://denny.qollie.com/2016/07/11/eslint-fxcking-setup/\" target=\"_blank\" rel=\"external\">這篇</a>後，不愧是天眼通作者，可以研究的這麼深入，了解到Linter的制定對於團隊程式碼的品質有很大的幫助。</p>\n<p>關於團隊程式碼的管理，前幾天面試被震撼教育了一番。對方考了一題「寫一個function能將傳入的數字加逗號回傳」，面試官頻繁地提示到要寫出「對團隊有貢獻的程式碼」，天真如我以為只是加@params或註解這樣，寫法就參考<a href=\"https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\" target=\"_blank\" rel=\"external\">網路解法</a>，<code>/\\B(?=(\\d{3})+(?!\\d))/g</code>這串正規表達式有看沒有懂，果然提交之後就變炮灰了，別說<code>\\B</code>網路上的解釋很難理解，連後面的<code>?=</code>或<code>?!</code>其實也不懂，就被示以一個很簡單的道理：「一段連你也無法解釋的程式碼，對團隊而言品質是不夠的。」就是有發現自己盲點的感覺。</p>\n<p>Anyway扯遠了，所以了解ESLint或Standard這類的標準之後，又更能知道提高程式碼品質的方法。終於也完成十份作業，太感人，也非常謝謝Huli老師的免費教學，之後另外寫一篇心得文吧。</p>\n<hr>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://eslint.org/\" target=\"_blank\" rel=\"external\">http://eslint.org/</a></li>\n</ul>\n<hr>\n<h3>Demo</h3>\n<p><a href=\"https://dezchuang.github.io/frontend-intermediate-course/answers/hw10/index.html\">https://dezchuang.github.io/frontend-intermediate-course/answers/hw10/index.html</a></p>\n"},{"title":"筆記｜前端面試考題｜寫出自己能解釋的程式碼","catalog":true,"date":"2017-06-17T07:48:15.000Z","subtitle":"「不要提交連你都無法解釋的code給團隊，今天假如你花十分鐘寫完，團隊需要花一小時理解這段code，那這段code就是品質非常不好的。」","header-img":"../../../../img/header_img/bg.png","_content":"\n### 題目\n\n請用Javascript寫一個`function commaNumber(n)`能傳入一數字n(正負整數、浮點數)，輸出一字串整數部分每三位加一個逗號(不能使用toLocaleString)，如下範例。\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>console.log(commaNumber(123)); //'123'\nconsole.log(commaNumber(123456)); // '123,456'\nconsole.log(commaNumber(123456789)); // '123,456,789'\nconsole.log(commaNumber(-987654321.78965)); // '-987,654,321.78965'\n</pre></div>\n</figure>\n\n### 解題\n\n面試官有一直提示到：「寫多久都可以，但你要讓這段code能以團隊為導向的品質。」一開始天真地以為是要多加一些像`@param`和註解之類的讓程式碼可讀性高一些，至於function演算法感覺不難，所以參考了[網路做法](https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript)就交出了我的版本：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>/**\n * Add comma to input number per three digits\n * @param {Number}\n * @returns {String}\n *\n * Reference\n * https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n */\nfunction commaNumber(n) {\n    var parts = n.toString().split(\".\");\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return parts.join(\".\");\n}\n</pre></div>\n</figure>\n\n原本有稍微看了一下RegExp的部分在做什麼，但`\\B`的解釋沒看很懂，就想說先交再說好了，然後我就被問成炮灰了X)。首先這段程式碼重點就在`/\\B(?=(\\d{3})+(?!\\d))/g`這一串正規表達式的解釋，可是我無法解釋`\\B`與`\\b`的差別，更別說後面`?=`與`?!`的意思了。\n\n面試官又給我兩個方向，一是選擇研究後搞懂這段code，另一個是重新寫一個你能解釋的版本，然後我就不知死活的選了前者X(。看了十幾分鐘還是看不懂，不得不說正規表達式真的不熟，直覺不選後者是稍微想了一下只想到暴力解如下：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function commaNumber(n) {\n    var parts = [];\n    var num = [];\n    var negative = false;\n    if(n &lt; 0) {\n        negative = true;\n    }\n    parts = n.toString().replace(\"-\",\"\").split(\".\");\n    num = parts[0].split(\"\");\n    for(var i = num.length - 4; i &gt; 0; i -= 3) {\n        num[i] += \",\";\n    }\n    parts[0] = num.join(\"\");\n    parts = parts.join(\".\");\n    if(negative) {\n        parts =  \"-\" + parts;\n    }\n    return parts;\n}\n</pre></div>\n</figure>\n\n可能是覺得不夠優美，不過假如我無法解釋`/\\B(?=(\\d{3})+(?!\\d))/g`的話，那就對於團隊程式碼的品質而言，後者反而是比較好的。\n\n### 後記\n\n沒想到這麼簡單的題目，因為沒注意到細節就直直帶著壞習慣往陷阱裡跳了，真的是魔鬼藏在細節中。被震撼教育了一番後也發現自己的盲點：「常常為了求快，並沒有仔細去理解參考文件的內容。」跟一個非常基本的觀念：「不要提交連你都無法解釋的code給團隊，今天假如你花十分鐘寫完，團隊需要花一小時理解這段code，那這段code就是品質非常不好的。」\n\n不經一事不長一智，從簡單的一個題目能發現盲點與觀念也算是很有收穫，另外就是正規表達式也需要加強。","source":"_posts/20170617-1548-interview-coding.md","raw":"---\ntitle: 筆記｜前端面試考題｜寫出自己能解釋的程式碼\ncatalog: true\ndate: 2017-06-17 15:48:15\nsubtitle: 「不要提交連你都無法解釋的code給團隊，今天假如你花十分鐘寫完，團隊需要花一小時理解這段code，那這段code就是品質非常不好的。」\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - 前端\n    - 面試\n    - 筆記\n---\n\n### 題目\n\n請用Javascript寫一個`function commaNumber(n)`能傳入一數字n(正負整數、浮點數)，輸出一字串整數部分每三位加一個逗號(不能使用toLocaleString)，如下範例。\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>console.log(commaNumber(123)); //'123'\nconsole.log(commaNumber(123456)); // '123,456'\nconsole.log(commaNumber(123456789)); // '123,456,789'\nconsole.log(commaNumber(-987654321.78965)); // '-987,654,321.78965'\n</pre></div>\n</figure>\n\n### 解題\n\n面試官有一直提示到：「寫多久都可以，但你要讓這段code能以團隊為導向的品質。」一開始天真地以為是要多加一些像`@param`和註解之類的讓程式碼可讀性高一些，至於function演算法感覺不難，所以參考了[網路做法](https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript)就交出了我的版本：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>/**\n * Add comma to input number per three digits\n * @param {Number}\n * @returns {String}\n *\n * Reference\n * https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n */\nfunction commaNumber(n) {\n    var parts = n.toString().split(\".\");\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return parts.join(\".\");\n}\n</pre></div>\n</figure>\n\n原本有稍微看了一下RegExp的部分在做什麼，但`\\B`的解釋沒看很懂，就想說先交再說好了，然後我就被問成炮灰了X)。首先這段程式碼重點就在`/\\B(?=(\\d{3})+(?!\\d))/g`這一串正規表達式的解釋，可是我無法解釋`\\B`與`\\b`的差別，更別說後面`?=`與`?!`的意思了。\n\n面試官又給我兩個方向，一是選擇研究後搞懂這段code，另一個是重新寫一個你能解釋的版本，然後我就不知死活的選了前者X(。看了十幾分鐘還是看不懂，不得不說正規表達式真的不熟，直覺不選後者是稍微想了一下只想到暴力解如下：\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function commaNumber(n) {\n    var parts = [];\n    var num = [];\n    var negative = false;\n    if(n &lt; 0) {\n        negative = true;\n    }\n    parts = n.toString().replace(\"-\",\"\").split(\".\");\n    num = parts[0].split(\"\");\n    for(var i = num.length - 4; i &gt; 0; i -= 3) {\n        num[i] += \",\";\n    }\n    parts[0] = num.join(\"\");\n    parts = parts.join(\".\");\n    if(negative) {\n        parts =  \"-\" + parts;\n    }\n    return parts;\n}\n</pre></div>\n</figure>\n\n可能是覺得不夠優美，不過假如我無法解釋`/\\B(?=(\\d{3})+(?!\\d))/g`的話，那就對於團隊程式碼的品質而言，後者反而是比較好的。\n\n### 後記\n\n沒想到這麼簡單的題目，因為沒注意到細節就直直帶著壞習慣往陷阱裡跳了，真的是魔鬼藏在細節中。被震撼教育了一番後也發現自己的盲點：「常常為了求快，並沒有仔細去理解參考文件的內容。」跟一個非常基本的觀念：「不要提交連你都無法解釋的code給團隊，今天假如你花十分鐘寫完，團隊需要花一小時理解這段code，那這段code就是品質非常不好的。」\n\n不經一事不長一智，從簡單的一個題目能發現盲點與觀念也算是很有收穫，另外就是正規表達式也需要加強。","slug":"20170617-1548-interview-coding","published":1,"updated":"2017-06-24T15:34:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs5k000w474ukhnkqc0x","content":"<h3 id=\"題目\">題目</h3>\n<p>請用Javascript寫一個<code>function commaNumber(n)</code>能傳入一數字n(正負整數、浮點數)，輸出一字串整數部分每三位加一個逗號(不能使用toLocaleString)，如下範例。</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>console.log(commaNumber(123)); //'123'\nconsole.log(commaNumber(123456)); // '123,456'\nconsole.log(commaNumber(123456789)); // '123,456,789'\nconsole.log(commaNumber(-987654321.78965)); // '-987,654,321.78965'\n</pre></div>\n</figure>\n<h3 id=\"解題\">解題</h3>\n<p>面試官有一直提示到：「寫多久都可以，但你要讓這段code能以團隊為導向的品質。」一開始天真地以為是要多加一些像<code>@param</code>和註解之類的讓程式碼可讀性高一些，至於function演算法感覺不難，所以參考了<a href=\"https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\" target=\"_blank\" rel=\"external\">網路做法</a>就交出了我的版本：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>/**\n * Add comma to input number per three digits\n * @param {Number}\n * @returns {String}\n *\n * Reference\n * https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n */\nfunction commaNumber(n) {\n    var parts = n.toString().split(\".\");\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return parts.join(\".\");\n}\n</pre></div>\n</figure>\n<p>原本有稍微看了一下RegExp的部分在做什麼，但<code>\\B</code>的解釋沒看很懂，就想說先交再說好了，然後我就被問成炮灰了X)。首先這段程式碼重點就在<code>/\\B(?=(\\d{3})+(?!\\d))/g</code>這一串正規表達式的解釋，可是我無法解釋<code>\\B</code>與<code>\\b</code>的差別，更別說後面<code>?=</code>與<code>?!</code>的意思了。</p>\n<p>面試官又給我兩個方向，一是選擇研究後搞懂這段code，另一個是重新寫一個你能解釋的版本，然後我就不知死活的選了前者X(。看了十幾分鐘還是看不懂，不得不說正規表達式真的不熟，直覺不選後者是稍微想了一下只想到暴力解如下：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function commaNumber(n) {\n    var parts = [];\n    var num = [];\n    var negative = false;\n    if(n &lt; 0) {\n        negative = true;\n    }\n    parts = n.toString().replace(\"-\",\"\").split(\".\");\n    num = parts[0].split(\"\");\n    for(var i = num.length - 4; i &gt; 0; i -= 3) {\n        num[i] += \",\";\n    }\n    parts[0] = num.join(\"\");\n    parts = parts.join(\".\");\n    if(negative) {\n        parts =  \"-\" + parts;\n    }\n    return parts;\n}\n</pre></div>\n</figure>\n<p>可能是覺得不夠優美，不過假如我無法解釋<code>/\\B(?=(\\d{3})+(?!\\d))/g</code>的話，那就對於團隊程式碼的品質而言，後者反而是比較好的。</p>\n<h3 id=\"後記\">後記</h3>\n<p>沒想到這麼簡單的題目，因為沒注意到細節就直直帶著壞習慣往陷阱裡跳了，真的是魔鬼藏在細節中。被震撼教育了一番後也發現自己的盲點：「常常為了求快，並沒有仔細去理解參考文件的內容。」跟一個非常基本的觀念：「不要提交連你都無法解釋的code給團隊，今天假如你花十分鐘寫完，團隊需要花一小時理解這段code，那這段code就是品質非常不好的。」</p>\n<p>不經一事不長一智，從簡單的一個題目能發現盲點與觀念也算是很有收穫，另外就是正規表達式也需要加強。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3>題目</h3>\n<p>請用Javascript寫一個<code>function commaNumber(n)</code>能傳入一數字n(正負整數、浮點數)，輸出一字串整數部分每三位加一個逗號(不能使用toLocaleString)，如下範例。</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>console.log(commaNumber(123)); //'123'\nconsole.log(commaNumber(123456)); // '123,456'\nconsole.log(commaNumber(123456789)); // '123,456,789'\nconsole.log(commaNumber(-987654321.78965)); // '-987,654,321.78965'\n</pre></div>\n</figure>\n<h3>解題</h3>\n<p>面試官有一直提示到：「寫多久都可以，但你要讓這段code能以團隊為導向的品質。」一開始天真地以為是要多加一些像<code>@param</code>和註解之類的讓程式碼可讀性高一些，至於function演算法感覺不難，所以參考了<a href=\"https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\" target=\"_blank\" rel=\"external\">網路做法</a>就交出了我的版本：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>/**\n * Add comma to input number per three digits\n * @param {Number}\n * @returns {String}\n *\n * Reference\n * https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n */\nfunction commaNumber(n) {\n    var parts = n.toString().split(\".\");\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return parts.join(\".\");\n}\n</pre></div>\n</figure>\n<p>原本有稍微看了一下RegExp的部分在做什麼，但<code>\\B</code>的解釋沒看很懂，就想說先交再說好了，然後我就被問成炮灰了X)。首先這段程式碼重點就在<code>/\\B(?=(\\d{3})+(?!\\d))/g</code>這一串正規表達式的解釋，可是我無法解釋<code>\\B</code>與<code>\\b</code>的差別，更別說後面<code>?=</code>與<code>?!</code>的意思了。</p>\n<p>面試官又給我兩個方向，一是選擇研究後搞懂這段code，另一個是重新寫一個你能解釋的版本，然後我就不知死活的選了前者X(。看了十幾分鐘還是看不懂，不得不說正規表達式真的不熟，直覺不選後者是稍微想了一下只想到暴力解如下：</p>\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>function commaNumber(n) {\n    var parts = [];\n    var num = [];\n    var negative = false;\n    if(n &lt; 0) {\n        negative = true;\n    }\n    parts = n.toString().replace(\"-\",\"\").split(\".\");\n    num = parts[0].split(\"\");\n    for(var i = num.length - 4; i &gt; 0; i -= 3) {\n        num[i] += \",\";\n    }\n    parts[0] = num.join(\"\");\n    parts = parts.join(\".\");\n    if(negative) {\n        parts =  \"-\" + parts;\n    }\n    return parts;\n}\n</pre></div>\n</figure>\n<p>可能是覺得不夠優美，不過假如我無法解釋<code>/\\B(?=(\\d{3})+(?!\\d))/g</code>的話，那就對於團隊程式碼的品質而言，後者反而是比較好的。</p>\n<h3>後記</h3>\n<p>沒想到這麼簡單的題目，因為沒注意到細節就直直帶著壞習慣往陷阱裡跳了，真的是魔鬼藏在細節中。被震撼教育了一番後也發現自己的盲點：「常常為了求快，並沒有仔細去理解參考文件的內容。」跟一個非常基本的觀念：「不要提交連你都無法解釋的code給團隊，今天假如你花十分鐘寫完，團隊需要花一小時理解這段code，那這段code就是品質非常不好的。」</p>\n<p>不經一事不長一智，從簡單的一個題目能發現盲點與觀念也算是很有收穫，另外就是正規表達式也需要加強。</p>\n"},{"title":"心得｜Huli's Course｜緣起與收穫","catalog":true,"date":"2017-06-18T18:36:25.000Z","subtitle":"前端近幾年的變化過於快速，許多的工具與框架令初學者入門時很容易就學的雜亂無章，常遇到學習曲線陡峭的撞牆期，能在決定開始投身前端領域的初期就遇到Huli老師，是非常幸運的，誠摯感謝！","header-img":"../../../../img/header_img/bg.png","_content":"\n#### 緣起\n\n記得是三月初某個禮拜五午餐時滑PTT時看到Huli在Soft_Job版提供的[免費教學](https://www.ptt.cc/bbs/Soft_Job/M.1488469002.A.E34.html)，當下覺得好像可以報名試試看，由於從去年底開始就有買了幾門Udemy自學前端技術，一開始原本只是想聊聊新加坡工作的經驗，於是晚上就送了介紹信過去。\n\n「收到這封信，就代表你已經錄取了!」\n\n隔週收到回信，因為當初陸續在嘗試轉職，看到這標題莫名很開心，原來Huli佛心來著錄取了全部寄信報名約40位夥伴。由於課程內容幾乎都不熟，也決定跟著大家一起學習。\n\n#### 課程心得\n\n從hw1到hw3的部分，屬於偏CSS切版的課程，原本以為是一塊蛋糕的內容，實際做起來才發現自己對於`position`、`display`等等排版的屬性並不熟，更別說其實還有很方便的`flexbox`、`grid`了，主因是之前自學都是使用Bootstrap跟SemanticUI之類的library，就以為自己會寫網頁了。這是第一次實際從零開始的純CSS切版，算是彌補了自己很多CSS不足的觀念，也學到使用SASS等預處理器的方便。\n\nhw4到hw7的部分，正式進入Javascript的主題，難度開始提高了一些，也幫助我更理解了以前自學沒學到或是沒深入研究的地方，因為原本我對jQuery與ajax並不熟，串過API的經驗也是屈指可數，所以途中常常卡關，耐著性子讀學習資源和參考厲害的同學們的做法並理解，花了較多的時間才完成作業。\n\n從JS這幾門的講解也發現，與以往自學看線上課程不一樣的收穫是，Huli讓我們先去蒐集資料並實作，其中會卡關會有無法解決的bug，最後聽完直播講解後，發現是自己想太難了，真正的解法原來就是這麼簡單的道理，像這樣有仔細思考後才豁然開朗的學習方式，是真的學到蠻多的。\n\n不過JS的部分雖然有hw6 VanillaJS，但也算是自己沒有更深入地去研究raw javascript的其他基本語法，在最近的面試如果需要考live coding是尚需加強的，比較多會遇到是字串處理`.split`、`.join`、`.replace`等等，不過這個就是比較偏演算法的部分了，有其中一個面試官有建議我也不一定要刷題，可以把[MDN](https://developer.mozilla.org/en-US/)看過一遍就差不多了。\n\n回到正題，hw8到hw10，是屬於前端工程開發工具的認識與實作，這部分真的非常之實用！從原本只聞其名或一知半解，到實際操作過後發現Webpack、Gulp、ESLint這些工具強大的功能，原來可以如此增進前端工程開發效率與維護團隊程式碼的品質，也是因為這門課的關係，從簡單的小作品切入讓我可以循序漸進的練習並理解，課程的安排上真的是很用心。\n\n跟完一整輪大約為期兩個月的課程，從hw1到hw10堅持能都準時提交作業，並盡量地完善每一份作業的筆記，將自己學習過程記錄下來，隨時都可以拿出來複習。\n\n也非常感謝Huli大大提供這樣有組織性的課程全方位地補強初學者進階所需要的技能，而且對於我們的問題都能不厭其煩由淺入深地解釋到我們懂，也非常堅持且準時地每個星期二開直播講解與批改作業，重點是完全免費，真的是佛心來著！另外也要特別感謝其他同學們常常會幫忙解答問題，而大家也都不藏私地分享經驗等等，中途hw4與hw5卡關時我也是參考了許多高手們的寫法，才終於完成一個令自己滿意的版本，感謝感謝&lt;(_ _)&gt;。\n\n前端近幾年的變化過於快速，許多的工具與框架令初學者入門時很容易就學的雜亂無章，常遇到學習曲線陡峭的撞牆期，能在決定開始投身前端領域的初期就遇到Huli老師，是非常幸運的，誠摯感謝！\n\n#### 後記\n\n正所謂「師父引進門，修行在個人」，結束了課程後，補強了許多不足的知識，讓我能在之後前端轉職的面試中，有自信地提到自己曾實際操作過hw1到hw10的任何技能。\n\n之後也將持續從面試中發現自己不足的地方(Raw Javascript、Browser原理、網路Protocol、網路安全、正規表達式...等等)，慢慢地往成為一個專業前端工程師的道路上，繼續前進。\n\nPosted by Dez |  June 19th, 2017 | 02:35 AM","source":"_posts/20170619-0236-huli-course-feedback.md","raw":"---\ntitle: 心得｜Huli's Course｜緣起與收穫\ncatalog: true\ndate: 2017-06-19 02:36:25\nsubtitle: 前端近幾年的變化過於快速，許多的工具與框架令初學者入門時很容易就學的雜亂無章，常遇到學習曲線陡峭的撞牆期，能在決定開始投身前端領域的初期就遇到Huli老師，是非常幸運的，誠摯感謝！\nheader-img: \"../../../../img/header_img/bg.png\"\ntags:\n    - Front-End\n    - 前端\n    - 初學\n    - 心得\n---\n\n#### 緣起\n\n記得是三月初某個禮拜五午餐時滑PTT時看到Huli在Soft_Job版提供的[免費教學](https://www.ptt.cc/bbs/Soft_Job/M.1488469002.A.E34.html)，當下覺得好像可以報名試試看，由於從去年底開始就有買了幾門Udemy自學前端技術，一開始原本只是想聊聊新加坡工作的經驗，於是晚上就送了介紹信過去。\n\n「收到這封信，就代表你已經錄取了!」\n\n隔週收到回信，因為當初陸續在嘗試轉職，看到這標題莫名很開心，原來Huli佛心來著錄取了全部寄信報名約40位夥伴。由於課程內容幾乎都不熟，也決定跟著大家一起學習。\n\n#### 課程心得\n\n從hw1到hw3的部分，屬於偏CSS切版的課程，原本以為是一塊蛋糕的內容，實際做起來才發現自己對於`position`、`display`等等排版的屬性並不熟，更別說其實還有很方便的`flexbox`、`grid`了，主因是之前自學都是使用Bootstrap跟SemanticUI之類的library，就以為自己會寫網頁了。這是第一次實際從零開始的純CSS切版，算是彌補了自己很多CSS不足的觀念，也學到使用SASS等預處理器的方便。\n\nhw4到hw7的部分，正式進入Javascript的主題，難度開始提高了一些，也幫助我更理解了以前自學沒學到或是沒深入研究的地方，因為原本我對jQuery與ajax並不熟，串過API的經驗也是屈指可數，所以途中常常卡關，耐著性子讀學習資源和參考厲害的同學們的做法並理解，花了較多的時間才完成作業。\n\n從JS這幾門的講解也發現，與以往自學看線上課程不一樣的收穫是，Huli讓我們先去蒐集資料並實作，其中會卡關會有無法解決的bug，最後聽完直播講解後，發現是自己想太難了，真正的解法原來就是這麼簡單的道理，像這樣有仔細思考後才豁然開朗的學習方式，是真的學到蠻多的。\n\n不過JS的部分雖然有hw6 VanillaJS，但也算是自己沒有更深入地去研究raw javascript的其他基本語法，在最近的面試如果需要考live coding是尚需加強的，比較多會遇到是字串處理`.split`、`.join`、`.replace`等等，不過這個就是比較偏演算法的部分了，有其中一個面試官有建議我也不一定要刷題，可以把[MDN](https://developer.mozilla.org/en-US/)看過一遍就差不多了。\n\n回到正題，hw8到hw10，是屬於前端工程開發工具的認識與實作，這部分真的非常之實用！從原本只聞其名或一知半解，到實際操作過後發現Webpack、Gulp、ESLint這些工具強大的功能，原來可以如此增進前端工程開發效率與維護團隊程式碼的品質，也是因為這門課的關係，從簡單的小作品切入讓我可以循序漸進的練習並理解，課程的安排上真的是很用心。\n\n跟完一整輪大約為期兩個月的課程，從hw1到hw10堅持能都準時提交作業，並盡量地完善每一份作業的筆記，將自己學習過程記錄下來，隨時都可以拿出來複習。\n\n也非常感謝Huli大大提供這樣有組織性的課程全方位地補強初學者進階所需要的技能，而且對於我們的問題都能不厭其煩由淺入深地解釋到我們懂，也非常堅持且準時地每個星期二開直播講解與批改作業，重點是完全免費，真的是佛心來著！另外也要特別感謝其他同學們常常會幫忙解答問題，而大家也都不藏私地分享經驗等等，中途hw4與hw5卡關時我也是參考了許多高手們的寫法，才終於完成一個令自己滿意的版本，感謝感謝&lt;(_ _)&gt;。\n\n前端近幾年的變化過於快速，許多的工具與框架令初學者入門時很容易就學的雜亂無章，常遇到學習曲線陡峭的撞牆期，能在決定開始投身前端領域的初期就遇到Huli老師，是非常幸運的，誠摯感謝！\n\n#### 後記\n\n正所謂「師父引進門，修行在個人」，結束了課程後，補強了許多不足的知識，讓我能在之後前端轉職的面試中，有自信地提到自己曾實際操作過hw1到hw10的任何技能。\n\n之後也將持續從面試中發現自己不足的地方(Raw Javascript、Browser原理、網路Protocol、網路安全、正規表達式...等等)，慢慢地往成為一個專業前端工程師的道路上，繼續前進。\n\nPosted by Dez |  June 19th, 2017 | 02:35 AM","slug":"20170619-0236-huli-course-feedback","published":1,"updated":"2017-06-24T15:34:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4bgcs5m000x474u0j3ec7f2","content":"<h4 id=\"緣起\">緣起</h4>\n<p>記得是三月初某個禮拜五午餐時滑PTT時看到Huli在Soft_Job版提供的<a href=\"https://www.ptt.cc/bbs/Soft_Job/M.1488469002.A.E34.html\" target=\"_blank\" rel=\"external\">免費教學</a>，當下覺得好像可以報名試試看，由於從去年底開始就有買了幾門Udemy自學前端技術，一開始原本只是想聊聊新加坡工作的經驗，於是晚上就送了介紹信過去。</p>\n<p>「收到這封信，就代表你已經錄取了!」</p>\n<p>隔週收到回信，因為當初陸續在嘗試轉職，看到這標題莫名很開心，原來Huli佛心來著錄取了全部寄信報名約40位夥伴。由於課程內容幾乎都不熟，也決定跟著大家一起學習。</p>\n<h4 id=\"課程心得\">課程心得</h4>\n<p>從hw1到hw3的部分，屬於偏CSS切版的課程，原本以為是一塊蛋糕的內容，實際做起來才發現自己對於<code>position</code>、<code>display</code>等等排版的屬性並不熟，更別說其實還有很方便的<code>flexbox</code>、<code>grid</code>了，主因是之前自學都是使用Bootstrap跟SemanticUI之類的library，就以為自己會寫網頁了。這是第一次實際從零開始的純CSS切版，算是彌補了自己很多CSS不足的觀念，也學到使用SASS等預處理器的方便。</p>\n<p>hw4到hw7的部分，正式進入Javascript的主題，難度開始提高了一些，也幫助我更理解了以前自學沒學到或是沒深入研究的地方，因為原本我對jQuery與ajax並不熟，串過API的經驗也是屈指可數，所以途中常常卡關，耐著性子讀學習資源和參考厲害的同學們的做法並理解，花了較多的時間才完成作業。</p>\n<p>從JS這幾門的講解也發現，與以往自學看線上課程不一樣的收穫是，Huli讓我們先去蒐集資料並實作，其中會卡關會有無法解決的bug，最後聽完直播講解後，發現是自己想太難了，真正的解法原來就是這麼簡單的道理，像這樣有仔細思考後才豁然開朗的學習方式，是真的學到蠻多的。</p>\n<p>不過JS的部分雖然有hw6 VanillaJS，但也算是自己沒有更深入地去研究raw javascript的其他基本語法，在最近的面試如果需要考live coding是尚需加強的，比較多會遇到是字串處理<code>.split</code>、<code>.join</code>、<code>.replace</code>等等，不過這個就是比較偏演算法的部分了，有其中一個面試官有建議我也不一定要刷題，可以把<a href=\"https://developer.mozilla.org/en-US/\" target=\"_blank\" rel=\"external\">MDN</a>看過一遍就差不多了。</p>\n<p>回到正題，hw8到hw10，是屬於前端工程開發工具的認識與實作，這部分真的非常之實用！從原本只聞其名或一知半解，到實際操作過後發現Webpack、Gulp、ESLint這些工具強大的功能，原來可以如此增進前端工程開發效率與維護團隊程式碼的品質，也是因為這門課的關係，從簡單的小作品切入讓我可以循序漸進的練習並理解，課程的安排上真的是很用心。</p>\n<p>跟完一整輪大約為期兩個月的課程，從hw1到hw10堅持能都準時提交作業，並盡量地完善每一份作業的筆記，將自己學習過程記錄下來，隨時都可以拿出來複習。</p>\n<p>也非常感謝Huli大大提供這樣有組織性的課程全方位地補強初學者進階所需要的技能，而且對於我們的問題都能不厭其煩由淺入深地解釋到我們懂，也非常堅持且準時地每個星期二開直播講解與批改作業，重點是完全免費，真的是佛心來著！另外也要特別感謝其他同學們常常會幫忙解答問題，而大家也都不藏私地分享經驗等等，中途hw4與hw5卡關時我也是參考了許多高手們的寫法，才終於完成一個令自己滿意的版本，感謝感謝&lt;(_ _)&gt;。</p>\n<p>前端近幾年的變化過於快速，許多的工具與框架令初學者入門時很容易就學的雜亂無章，常遇到學習曲線陡峭的撞牆期，能在決定開始投身前端領域的初期就遇到Huli老師，是非常幸運的，誠摯感謝！</p>\n<h4 id=\"後記\">後記</h4>\n<p>正所謂「師父引進門，修行在個人」，結束了課程後，補強了許多不足的知識，讓我能在之後前端轉職的面試中，有自信地提到自己曾實際操作過hw1到hw10的任何技能。</p>\n<p>之後也將持續從面試中發現自己不足的地方(Raw Javascript、Browser原理、網路Protocol、網路安全、正規表達式…等等)，慢慢地往成為一個專業前端工程師的道路上，繼續前進。</p>\n<p>Posted by Dez |  June 19th, 2017 | 02:35 AM</p>\n","site":{"data":{}},"excerpt":"","more":"<h4>緣起</h4>\n<p>記得是三月初某個禮拜五午餐時滑PTT時看到Huli在Soft_Job版提供的<a href=\"https://www.ptt.cc/bbs/Soft_Job/M.1488469002.A.E34.html\" target=\"_blank\" rel=\"external\">免費教學</a>，當下覺得好像可以報名試試看，由於從去年底開始就有買了幾門Udemy自學前端技術，一開始原本只是想聊聊新加坡工作的經驗，於是晚上就送了介紹信過去。</p>\n<p>「收到這封信，就代表你已經錄取了!」</p>\n<p>隔週收到回信，因為當初陸續在嘗試轉職，看到這標題莫名很開心，原來Huli佛心來著錄取了全部寄信報名約40位夥伴。由於課程內容幾乎都不熟，也決定跟著大家一起學習。</p>\n<h4>課程心得</h4>\n<p>從hw1到hw3的部分，屬於偏CSS切版的課程，原本以為是一塊蛋糕的內容，實際做起來才發現自己對於<code>position</code>、<code>display</code>等等排版的屬性並不熟，更別說其實還有很方便的<code>flexbox</code>、<code>grid</code>了，主因是之前自學都是使用Bootstrap跟SemanticUI之類的library，就以為自己會寫網頁了。這是第一次實際從零開始的純CSS切版，算是彌補了自己很多CSS不足的觀念，也學到使用SASS等預處理器的方便。</p>\n<p>hw4到hw7的部分，正式進入Javascript的主題，難度開始提高了一些，也幫助我更理解了以前自學沒學到或是沒深入研究的地方，因為原本我對jQuery與ajax並不熟，串過API的經驗也是屈指可數，所以途中常常卡關，耐著性子讀學習資源和參考厲害的同學們的做法並理解，花了較多的時間才完成作業。</p>\n<p>從JS這幾門的講解也發現，與以往自學看線上課程不一樣的收穫是，Huli讓我們先去蒐集資料並實作，其中會卡關會有無法解決的bug，最後聽完直播講解後，發現是自己想太難了，真正的解法原來就是這麼簡單的道理，像這樣有仔細思考後才豁然開朗的學習方式，是真的學到蠻多的。</p>\n<p>不過JS的部分雖然有hw6 VanillaJS，但也算是自己沒有更深入地去研究raw javascript的其他基本語法，在最近的面試如果需要考live coding是尚需加強的，比較多會遇到是字串處理<code>.split</code>、<code>.join</code>、<code>.replace</code>等等，不過這個就是比較偏演算法的部分了，有其中一個面試官有建議我也不一定要刷題，可以把<a href=\"https://developer.mozilla.org/en-US/\" target=\"_blank\" rel=\"external\">MDN</a>看過一遍就差不多了。</p>\n<p>回到正題，hw8到hw10，是屬於前端工程開發工具的認識與實作，這部分真的非常之實用！從原本只聞其名或一知半解，到實際操作過後發現Webpack、Gulp、ESLint這些工具強大的功能，原來可以如此增進前端工程開發效率與維護團隊程式碼的品質，也是因為這門課的關係，從簡單的小作品切入讓我可以循序漸進的練習並理解，課程的安排上真的是很用心。</p>\n<p>跟完一整輪大約為期兩個月的課程，從hw1到hw10堅持能都準時提交作業，並盡量地完善每一份作業的筆記，將自己學習過程記錄下來，隨時都可以拿出來複習。</p>\n<p>也非常感謝Huli大大提供這樣有組織性的課程全方位地補強初學者進階所需要的技能，而且對於我們的問題都能不厭其煩由淺入深地解釋到我們懂，也非常堅持且準時地每個星期二開直播講解與批改作業，重點是完全免費，真的是佛心來著！另外也要特別感謝其他同學們常常會幫忙解答問題，而大家也都不藏私地分享經驗等等，中途hw4與hw5卡關時我也是參考了許多高手們的寫法，才終於完成一個令自己滿意的版本，感謝感謝&lt;(_ _)&gt;。</p>\n<p>前端近幾年的變化過於快速，許多的工具與框架令初學者入門時很容易就學的雜亂無章，常遇到學習曲線陡峭的撞牆期，能在決定開始投身前端領域的初期就遇到Huli老師，是非常幸運的，誠摯感謝！</p>\n<h4>後記</h4>\n<p>正所謂「師父引進門，修行在個人」，結束了課程後，補強了許多不足的知識，讓我能在之後前端轉職的面試中，有自信地提到自己曾實際操作過hw1到hw10的任何技能。</p>\n<p>之後也將持續從面試中發現自己不足的地方(Raw Javascript、Browser原理、網路Protocol、網路安全、正規表達式…等等)，慢慢地往成為一個專業前端工程師的道路上，繼續前進。</p>\n<p>Posted by Dez |  June 19th, 2017 | 02:35 AM</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj4bgcs3z0001474u9kg0n51u","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs4z000h474ux09a74mm"},{"post_id":"cj4bgcs3z0001474u9kg0n51u","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs53000j474u8m05g5p8"},{"post_id":"cj4bgcs3z0001474u9kg0n51u","tag_id":"cj4bgcs4p000c474ulruvrt5t","_id":"cj4bgcs57000m474ubuxbr0j7"},{"post_id":"cj4bgcs460003474u67tu9ayw","tag_id":"cj4bgcs4v000f474uj6wd15lt","_id":"cj4bgcs5p0011474u99xv76o8"},{"post_id":"cj4bgcs460003474u67tu9ayw","tag_id":"cj4bgcs55000k474uucv575tq","_id":"cj4bgcs5p0012474udlsijzfg"},{"post_id":"cj4bgcs460003474u67tu9ayw","tag_id":"cj4bgcs5b000p474uodwtx5zs","_id":"cj4bgcs5q0014474udanc43n4"},{"post_id":"cj4bgcs460003474u67tu9ayw","tag_id":"cj4bgcs5f000s474ughph1iss","_id":"cj4bgcs5q0015474ux59tzrvv"},{"post_id":"cj4bgcs460003474u67tu9ayw","tag_id":"cj4bgcs5j000v474ucd2uib3u","_id":"cj4bgcs5q0017474ucb0q2k6s"},{"post_id":"cj4bgcs460003474u67tu9ayw","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs5q0018474u6wnd9dka"},{"post_id":"cj4bgcs460003474u67tu9ayw","tag_id":"cj4bgcs4p000c474ulruvrt5t","_id":"cj4bgcs5q001a474u27athpk7"},{"post_id":"cj4bgcs4e0006474uytuxgeul","tag_id":"cj4bgcs5p0010474unyc0x7tg","_id":"cj4bgcs5r001f474ufulu0qoo"},{"post_id":"cj4bgcs4e0006474uytuxgeul","tag_id":"cj4bgcs5p0013474u7jh58bzz","_id":"cj4bgcs5s001g474udb4vnqy7"},{"post_id":"cj4bgcs4e0006474uytuxgeul","tag_id":"cj4bgcs4v000f474uj6wd15lt","_id":"cj4bgcs5s001i474uuavpn6td"},{"post_id":"cj4bgcs4e0006474uytuxgeul","tag_id":"cj4bgcs5q0019474uaz7khq4y","_id":"cj4bgcs5s001j474u260g9cno"},{"post_id":"cj4bgcs4e0006474uytuxgeul","tag_id":"cj4bgcs5q001b474u0em0u9yd","_id":"cj4bgcs5s001l474uglo8uerm"},{"post_id":"cj4bgcs4e0006474uytuxgeul","tag_id":"cj4bgcs5q001c474um5jqdv0z","_id":"cj4bgcs5s001m474ubb87i7ai"},{"post_id":"cj4bgcs4e0006474uytuxgeul","tag_id":"cj4bgcs5r001d474u5cbfy2b3","_id":"cj4bgcs5t001o474uvsltajes"},{"post_id":"cj4bgcs4g0007474uve5meuye","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs5t001p474uqvqlfsib"},{"post_id":"cj4bgcs4g0007474uve5meuye","tag_id":"cj4bgcs5s001h474uey4au05x","_id":"cj4bgcs5u001r474ul4rfeknc"},{"post_id":"cj4bgcs4g0007474uve5meuye","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs5u001s474uw4d41jzk"},{"post_id":"cj4bgcs4g0007474uve5meuye","tag_id":"cj4bgcs5r001d474u5cbfy2b3","_id":"cj4bgcs5w001u474u99w3svmj"},{"post_id":"cj4bgcs4k0008474uf4s6xthk","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs5z001y474utpw85mub"},{"post_id":"cj4bgcs4k0008474uf4s6xthk","tag_id":"cj4bgcs5t001q474ul3tm0fqd","_id":"cj4bgcs60001z474u71pnu6hp"},{"post_id":"cj4bgcs4k0008474uf4s6xthk","tag_id":"cj4bgcs5v001t474u3dz1fixt","_id":"cj4bgcs600021474urot34x8g"},{"post_id":"cj4bgcs4k0008474uf4s6xthk","tag_id":"cj4bgcs5w001v474ucwhsggux","_id":"cj4bgcs600022474uxlmjgowt"},{"post_id":"cj4bgcs4k0008474uf4s6xthk","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs620024474ut0nis9sz"},{"post_id":"cj4bgcs4k0008474uf4s6xthk","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs630025474uvv85d1s8"},{"post_id":"cj4bgcs4m000a474uzy4fao7i","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs640027474uog59ig7e"},{"post_id":"cj4bgcs4m000a474uzy4fao7i","tag_id":"cj4bgcs600020474uawyohcxc","_id":"cj4bgcs640028474u5zwdbjid"},{"post_id":"cj4bgcs4m000a474uzy4fao7i","tag_id":"cj4bgcs600023474un9inbzg6","_id":"cj4bgcs65002a474u70db6ogu"},{"post_id":"cj4bgcs4m000a474uzy4fao7i","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs65002b474urii936fc"},{"post_id":"cj4bgcs4m000a474uzy4fao7i","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs65002d474uskjgzmpb"},{"post_id":"cj4bgcs4o000b474u9tg81y9m","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs66002f474ukjdns7fp"},{"post_id":"cj4bgcs4o000b474u9tg81y9m","tag_id":"cj4bgcs640029474uj172irxl","_id":"cj4bgcs66002g474upzzsljpp"},{"post_id":"cj4bgcs4o000b474u9tg81y9m","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs67002i474uzlsmp6p9"},{"post_id":"cj4bgcs4o000b474u9tg81y9m","tag_id":"cj4bgcs5r001d474u5cbfy2b3","_id":"cj4bgcs67002j474u8i5q26m3"},{"post_id":"cj4bgcs4q000d474un3huezif","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs68002m474u6ui1ndrm"},{"post_id":"cj4bgcs4q000d474un3huezif","tag_id":"cj4bgcs600020474uawyohcxc","_id":"cj4bgcs68002n474u42kwy6ak"},{"post_id":"cj4bgcs4q000d474un3huezif","tag_id":"cj4bgcs67002k474u5gktkblu","_id":"cj4bgcs69002p474uqbcad2ta"},{"post_id":"cj4bgcs4q000d474un3huezif","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs69002q474uys61gl9a"},{"post_id":"cj4bgcs4q000d474un3huezif","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs6a002s474ux0h2bv97"},{"post_id":"cj4bgcs4t000e474u4wcxqp5v","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs6c002v474uiqdeadww"},{"post_id":"cj4bgcs4t000e474u4wcxqp5v","tag_id":"cj4bgcs68002o474uo6l9xbig","_id":"cj4bgcs6c002w474uokxccjkg"},{"post_id":"cj4bgcs4t000e474u4wcxqp5v","tag_id":"cj4bgcs69002r474ujyjtp3cx","_id":"cj4bgcs6c002y474usshajv98"},{"post_id":"cj4bgcs4t000e474u4wcxqp5v","tag_id":"cj4bgcs6a002t474ur8mvrs78","_id":"cj4bgcs6c002z474up5q3e7ao"},{"post_id":"cj4bgcs4t000e474u4wcxqp5v","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs6c0031474uhcetndhh"},{"post_id":"cj4bgcs4t000e474u4wcxqp5v","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs6c0032474uql9cktue"},{"post_id":"cj4bgcs4x000g474uowxcvdi1","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs6n0035474u0f3i8iwj"},{"post_id":"cj4bgcs4x000g474uowxcvdi1","tag_id":"cj4bgcs6c002x474ufk6ov80w","_id":"cj4bgcs6n0036474uhrep69ru"},{"post_id":"cj4bgcs4x000g474uowxcvdi1","tag_id":"cj4bgcs6c0030474u1oxe86m4","_id":"cj4bgcs6n0038474uc156elh6"},{"post_id":"cj4bgcs4x000g474uowxcvdi1","tag_id":"cj4bgcs6a002t474ur8mvrs78","_id":"cj4bgcs6n0039474uc20z74pi"},{"post_id":"cj4bgcs4x000g474uowxcvdi1","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs6o003b474u3ut9rfsk"},{"post_id":"cj4bgcs4x000g474uowxcvdi1","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs6o003c474ud9dhuyrr"},{"post_id":"cj4bgcs51000i474ubob0cr6a","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs6q003e474u38mmedbu"},{"post_id":"cj4bgcs51000i474ubob0cr6a","tag_id":"cj4bgcs6n0037474un0c9se8u","_id":"cj4bgcs6q003f474unt6xdr0n"},{"post_id":"cj4bgcs51000i474ubob0cr6a","tag_id":"cj4bgcs6n003a474uf5akmo6g","_id":"cj4bgcs6q003h474u3p9a5rmz"},{"post_id":"cj4bgcs51000i474ubob0cr6a","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs6r003i474u6y8g1uhh"},{"post_id":"cj4bgcs51000i474ubob0cr6a","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs6r003k474ulk9rgb9x"},{"post_id":"cj4bgcs56000l474u8k2d934k","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs6s003l474uohc4fgd3"},{"post_id":"cj4bgcs56000l474u8k2d934k","tag_id":"cj4bgcs6q003g474uzgv0fowg","_id":"cj4bgcs6t003n474uwx7t7ovt"},{"post_id":"cj4bgcs56000l474u8k2d934k","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs6u003o474uf7qijxn1"},{"post_id":"cj4bgcs56000l474u8k2d934k","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs6v003q474uvc4ykcip"},{"post_id":"cj4bgcs58000n474uf4yty1h1","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs6v003r474usoy13yxd"},{"post_id":"cj4bgcs58000n474uf4yty1h1","tag_id":"cj4bgcs6s003m474u1jfinf41","_id":"cj4bgcs6x003t474u4u39oodo"},{"post_id":"cj4bgcs58000n474uf4yty1h1","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs6x003u474use7mh1q0"},{"post_id":"cj4bgcs58000n474uf4yty1h1","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs6x003w474u4u84jj5u"},{"post_id":"cj4bgcs5a000o474u8vgygxzv","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs6z003z474uskflz1vg"},{"post_id":"cj4bgcs5a000o474u8vgygxzv","tag_id":"cj4bgcs6n003a474uf5akmo6g","_id":"cj4bgcs6z0040474uggc1rmm9"},{"post_id":"cj4bgcs5a000o474u8vgygxzv","tag_id":"cj4bgcs6x003v474u64nz9nb5","_id":"cj4bgcs6z0042474up3ackbvx"},{"post_id":"cj4bgcs5a000o474u8vgygxzv","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs700043474uelxykvoz"},{"post_id":"cj4bgcs5a000o474u8vgygxzv","tag_id":"cj4bgcs5r001d474u5cbfy2b3","_id":"cj4bgcs700045474uau6v89oo"},{"post_id":"cj4bgcs5c000q474uucsqv90r","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs700046474udwcgayng"},{"post_id":"cj4bgcs5c000q474uucsqv90r","tag_id":"cj4bgcs6z0041474uo8ud682s","_id":"cj4bgcs710048474uf2da6ygk"},{"post_id":"cj4bgcs5c000q474uucsqv90r","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs720049474udi1kkp4n"},{"post_id":"cj4bgcs5c000q474uucsqv90r","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs72004b474u9wb0kami"},{"post_id":"cj4bgcs5d000r474ul40ku4x1","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs73004d474ulj4wtmkq"},{"post_id":"cj4bgcs5d000r474ul40ku4x1","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs73004e474ueqqhvxne"},{"post_id":"cj4bgcs5d000r474ul40ku4x1","tag_id":"cj4bgcs6n003a474uf5akmo6g","_id":"cj4bgcs73004g474ufz0ts8eb"},{"post_id":"cj4bgcs5d000r474ul40ku4x1","tag_id":"cj4bgcs5r001d474u5cbfy2b3","_id":"cj4bgcs73004h474uzawdjdd7"},{"post_id":"cj4bgcs5f000t474unupmby6m","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs75004l474uyf0vwvp8"},{"post_id":"cj4bgcs5f000t474unupmby6m","tag_id":"cj4bgcs73004f474u7c69n2sv","_id":"cj4bgcs75004m474upxlmyvyn"},{"post_id":"cj4bgcs5f000t474unupmby6m","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs76004o474u75xzu1t8"},{"post_id":"cj4bgcs5f000t474unupmby6m","tag_id":"cj4bgcs73004i474u6sc7pp2x","_id":"cj4bgcs76004p474udbqjdc0b"},{"post_id":"cj4bgcs5f000t474unupmby6m","tag_id":"cj4bgcs5r001d474u5cbfy2b3","_id":"cj4bgcs76004r474uah2sgvk2"},{"post_id":"cj4bgcs5i000u474ucnforc61","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs76004s474uwxus3ak4"},{"post_id":"cj4bgcs5i000u474ucnforc61","tag_id":"cj4bgcs75004n474um2ln31zu","_id":"cj4bgcs77004u474uqc3pbr9g"},{"post_id":"cj4bgcs5i000u474ucnforc61","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs77004v474u1r22997w"},{"post_id":"cj4bgcs5k000w474ukhnkqc0x","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs77004y474utsacbhc2"},{"post_id":"cj4bgcs5k000w474ukhnkqc0x","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs77004z474u71svwei4"},{"post_id":"cj4bgcs5k000w474ukhnkqc0x","tag_id":"cj4bgcs73004i474u6sc7pp2x","_id":"cj4bgcs780050474ufx05dwpk"},{"post_id":"cj4bgcs5k000w474ukhnkqc0x","tag_id":"cj4bgcs5r001d474u5cbfy2b3","_id":"cj4bgcs780051474uyhzx66jj"},{"post_id":"cj4bgcs5m000x474u0j3ec7f2","tag_id":"cj4bgcs5r001e474ucbtwvsh5","_id":"cj4bgcs780052474uwoqdhtrp"},{"post_id":"cj4bgcs5m000x474u0j3ec7f2","tag_id":"cj4bgcs4b0005474u9vuym1tz","_id":"cj4bgcs780053474u3mfsbdu4"},{"post_id":"cj4bgcs5m000x474u0j3ec7f2","tag_id":"cj4bgcs4l0009474ubhcvxcxo","_id":"cj4bgcs780054474ueanfeezi"},{"post_id":"cj4bgcs5m000x474u0j3ec7f2","tag_id":"cj4bgcs4p000c474ulruvrt5t","_id":"cj4bgcs780055474uhg8zl5n0"}],"Tag":[{"name":"前端","_id":"cj4bgcs4b0005474u9vuym1tz"},{"name":"初學","_id":"cj4bgcs4l0009474ubhcvxcxo"},{"name":"心得","_id":"cj4bgcs4p000c474ulruvrt5t"},{"name":"Node","_id":"cj4bgcs4v000f474uj6wd15lt"},{"name":"MongoDB","_id":"cj4bgcs55000k474uucv575tq"},{"name":"Blog","_id":"cj4bgcs5b000p474uodwtx5zs"},{"name":"ejs","_id":"cj4bgcs5f000s474ughph1iss"},{"name":"後端","_id":"cj4bgcs5j000v474ucd2uib3u"},{"name":"AWS","_id":"cj4bgcs5p0010474unyc0x7tg"},{"name":"EC2","_id":"cj4bgcs5p0013474u7jh58bzz"},{"name":"deploy","_id":"cj4bgcs5q0019474uaz7khq4y"},{"name":"部署","_id":"cj4bgcs5q001b474u0em0u9yd"},{"name":"教學","_id":"cj4bgcs5q001c474um5jqdv0z"},{"name":"筆記","_id":"cj4bgcs5r001d474u5cbfy2b3"},{"name":"Front-End","_id":"cj4bgcs5r001e474ucbtwvsh5"},{"name":"React","_id":"cj4bgcs5s001h474uey4au05x"},{"name":"HTML","_id":"cj4bgcs5t001q474ul3tm0fqd"},{"name":"Flexbox","_id":"cj4bgcs5v001t474u3dz1fixt"},{"name":"切版","_id":"cj4bgcs5w001v474ucwhsggux"},{"name":"CSS","_id":"cj4bgcs600020474uawyohcxc"},{"name":"transition","_id":"cj4bgcs600023474un9inbzg6"},{"name":"Redux","_id":"cj4bgcs640029474uj172irxl"},{"name":"SASS","_id":"cj4bgcs67002k474u5gktkblu"},{"name":"Ajax","_id":"cj4bgcs68002o474uo6l9xbig"},{"name":"API","_id":"cj4bgcs69002r474ujyjtp3cx"},{"name":"jQuery","_id":"cj4bgcs6a002t474ur8mvrs78"},{"name":"placeholder","_id":"cj4bgcs6c002x474ufk6ov80w"},{"name":"scroll","_id":"cj4bgcs6c0030474u1oxe86m4"},{"name":"Vanilla","_id":"cj4bgcs6n0037474un0c9se8u"},{"name":"JavaScript","_id":"cj4bgcs6n003a474uf5akmo6g"},{"name":"i18n","_id":"cj4bgcs6q003g474uzgv0fowg"},{"name":"Webpack","_id":"cj4bgcs6s003m474u1jfinf41"},{"name":"stopPropagation","_id":"cj4bgcs6x003v474u64nz9nb5"},{"name":"Gulp","_id":"cj4bgcs6z0041474uo8ud682s"},{"name":"JSON","_id":"cj4bgcs73004f474u7c69n2sv"},{"name":"面試","_id":"cj4bgcs73004i474u6sc7pp2x"},{"name":"ESLint","_id":"cj4bgcs75004n474um2ln31zu"}]}}